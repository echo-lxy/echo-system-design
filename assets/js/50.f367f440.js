(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{387:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("提出问题是一切智慧的开端")]),t._v(" "),s("ol",[s("li",[t._v("为什么 Redis 从单线程演变到多线程？单线程模式的瓶颈在哪里？")]),t._v(" "),s("li",[t._v("Redis 6.0 引入多线程 IO 的主要原理是什么？它如何提升性能？")]),t._v(" "),s("li",[t._v("多线程 IO 是如何在 Redis 中分担读写任务的？与单线程 IO 有哪些关键区别？")]),t._v(" "),s("li",[t._v("在 Redis 6.0 中，哪些情况下适合启用多线程 IO，线程数该如何配置？")]),t._v(" "),s("li",[t._v("Redis 如何利用多线程机制分配和处理客户端请求？具体流程是怎样的？")]),t._v(" "),s("li",[t._v("多线程 IO 如何解决单线程模式下的性能瓶颈？有哪些场景下效果最显著？")]),t._v(" "),s("li",[t._v("什么是 Redis 多线程 IO 的主要性能优化点？如何避免潜在的问题？")]),t._v(" "),s("li",[t._v("多 IO 线程对 Redis 命令执行的影响有哪些？是否会带来新的并发挑战？")])])]),t._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("复杂的架构系统通常是逐渐演进的，从单线程到多线程，从单体应用到复杂功能的分布式系统，Redis 也经历了类似的发展历程。")]),t._v(" "),s("p",[t._v("在单线程模式下，Redis 能够实现极高的吞吐量，但在某些情况下，处理时间可能会显著增加，导致性能下降。为了解决这些问题，Redis 引入了后台线程来处理一些耗时的操作。随着对更高吞吐量的需求增加，网络模块也成为瓶颈，因此 Redis 在 6.0 版本中引入了多线程来解决这个问题——这也是本文主要探讨的内容。")]),t._v(" "),s("p",[t._v("本文内容包括：")]),t._v(" "),s("ol",[s("li",[t._v("早期单线程 IO 处理过程及其缺点")]),t._v(" "),s("li",[t._v("Redis 多线程 IO 的工作原理")]),t._v(" "),s("li",[t._v("Redis 多线程 IO 核心源码解析")])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("请下载 "),s("a",{attrs:{href:"https://github.com/redis/redis/tree/6.0",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis 6.0.15"),s("OutboundLink")],1),t._v(" 的源码，以便查看与多 IO 线程机制相关的代码。")])]),t._v(" "),s("h2",{attrs:{id:"单线程-io-及其缺陷"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单线程-io-及其缺陷"}},[t._v("#")]),t._v(" 单线程 IO 及其缺陷")]),t._v(" "),s("h3",{attrs:{id:"异步处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步处理"}},[t._v("#")]),t._v(" 异步处理")]),t._v(" "),s("p",[t._v("Redis 的核心负载由单线程处理，但为何其性能仍能如此优异？")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("纯内存操作")]),t._v("：Redis 的操作大多在内存中完成。")]),t._v(" "),s("li",[s("strong",[t._v("非阻塞 IO")]),t._v("：Redis 使用非阻塞的 IO 机制。")]),t._v(" "),s("li",[s("strong",[t._v("异步 IO 处理")]),t._v("：每个命令在接收、处理和返回的过程中，经过多个“不连续”的步骤。")])]),t._v(" "),s("blockquote",[s("p",[t._v("需要特别指出的是，此处的“异步处理”并非指同步/异步 IO，而是指 IO 处理过程的异步化，即各个处理步骤之间不是同步执行的，而是通过事件循环机制和非阻塞 IO，使 Redis 能在单线程环境下高效处理多个请求。")])]),t._v(" "),s("p",[t._v("假设客户端发送以下命令：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("GET key"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("how"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("to"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("be"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("better"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("man\n")])])]),s("p",[t._v("Redis 的回应是：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("努力加把劲把文章写完\n")])])]),s("p",[t._v("处理这个命令的过程包括以下几个步骤：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("接收")]),t._v("：通过 TCP 接收命令，可能经历多次 TCP 包、确认应答 (ack) 和 IO 操作。")]),t._v(" "),s("li",[s("strong",[t._v("解析")]),t._v("：从接收到的数据中提取命令。")]),t._v(" "),s("li",[s("strong",[t._v("执行")]),t._v("：读取指定位置的值。")]),t._v(" "),s("li",[s("strong",[t._v("返回")]),t._v("：通过 TCP 返回值给客户端。如果值较大，IO 负载也更重。")])]),t._v(" "),s("p",[t._v("其中，解析和执行步骤主要是 CPU 和内存操作，而接收和返回主要涉及 IO 操作，这是我们关注的重点。以接收为例，Redis 采用了两种策略：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("同步处理")]),t._v("：在接收完整命令之前，始终保持等待状态，接收到完整命令后才进行处理，然后返回结果。在网络状况不佳时，这种方法可能会导致较长的等待时间。")]),t._v(" "),s("li",[s("strong",[t._v("异步处理")]),t._v("：通过非阻塞 IO 和事件循环机制，在处理一个请求时，Redis 可以继续处理其他请求，从而避免了阻塞等待。Redis 使用高效的事件驱动机制（如 epoll）来监控 IO 事件，从而提高单线程下的并发处理能力。")])]),t._v(" "),s("p",[t._v("以下是对异步处理的类比：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("同步")]),t._v("：当聊天框显示“正在输入”时，你需要等对方输入完成后，才能回答对方的问题。完成回答后，才会转向其他人。")]),t._v(" "),s("li",[s("strong",[t._v("异步")]),t._v("：当聊天框显示“正在输入”时，你可以回答其他已完成输入的问题，而不必等对方输入完成，待对方输入完成后再继续回答其他问题。")])]),t._v(" "),s("p",[t._v("显然，异步处理的效率更高，因为同步处理在等待上浪费了时间。异步处理策略总结如下：")]),t._v(" "),s("ul",[s("li",[t._v("在网络包到达时立即读取并放入缓冲区，读取完成后立即进行其他操作，而不等待下一个包。")]),t._v(" "),s("li",[t._v("解析缓冲区中的数据是否完整。若数据完整，则执行命令；若不完整，则继续处理其他任务。")]),t._v(" "),s("li",[t._v("数据完整后立即执行命令，将结果放入缓冲区。")]),t._v(" "),s("li",[t._v("将数据返回给客户端。如果一次不能全部发送，则等到可以发送时再继续发送，直到全部发送完毕。")])]),t._v(" "),s("h3",{attrs:{id:"事件驱动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件驱动"}},[t._v("#")]),t._v(" 事件驱动")]),t._v(" "),s("p",[t._v("尽管异步处理避免了零散的等待时间，但如何得知“网络包有数据”或“下次可以发送数据”呢？如果通过轮询检查这些时机，效率会很低。Redis 使用事件驱动机制来解决这一问题。")]),t._v(" "),s("p",[t._v("事件驱动框架能够高效地通知 Redis 在何时需要处理事件。Redis 通过事件驱动机制（如 epoll）来监听和处理事件。Linux 中的 epoll 机制专为高效通知而设计。Redis 基于 epoll 等机制抽象出了一套事件驱动框架，整个服务器由事件驱动，当事件发生时进行处理，无事件时则处于空闲状态。")]),t._v(" "),s("ul",[s("li",[s("strong",[s("code",[t._v("可读")]),t._v("事件")]),t._v("：表示对应的 socket 中有新的 TCP 数据包到达。")]),t._v(" "),s("li",[s("strong",[s("code",[t._v("可写")]),t._v("事件")]),t._v("：表示对应的 socket 的写缓冲区已经空了（数据已通过网络发送给客户端）。")])]),t._v(" "),s("p",[t._v("处理流程如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409172227893.webp",alt:"img"}})]),t._v(" "),s("ul",[s("li",[s("code",[t._v("aeMain()")]),t._v(" 内部为一个死循环，在 "),s("code",[t._v("epoll_wait")]),t._v(" 处短暂休眠。")]),t._v(" "),s("li",[s("code",[t._v("epoll_wait")]),t._v(" 返回当前可读、可写的 socket 列表。")]),t._v(" "),s("li",[s("code",[t._v("beforeSleep")]),t._v(" 是进入休眠前执行的逻辑，主要是将数据回写到 socket。")]),t._v(" "),s("li",[t._v("核心逻辑由 IO 事件触发，可能是可读事件，也可能是可写事件，否则执行定时任务。")]),t._v(" "),s("li",[t._v("第一次的 IO 可读事件是监听 socket（如监听 6379 端口），当有握手请求时，执行 "),s("code",[t._v("accept")]),t._v(" 调用，获取一个连接 socket，并注册可读回调 "),s("code",[t._v("createClient")]),t._v("，此后客户端与 Redis 的数据通过该 socket 进行传输。")]),t._v(" "),s("li",[t._v("一个完整的命令可能通过多次 "),s("code",[t._v("readQueryFromClient")]),t._v(" 读取完毕，意味着会有多次可读 IO 事件。")]),t._v(" "),s("li",[t._v("命令执行结果也可能需要通过多次写操作完成。")]),t._v(" "),s("li",[t._v("命令执行完毕后，对应的连接会被加入 "),s("code",[t._v("clients_pending_write")]),t._v("，"),s("code",[t._v("beforeSleep")]),t._v(" 会尝试回写到 socket，若写不完则注册可写事件，下次继续写。")]),t._v(" "),s("li",[t._v("整个过程中的 IO 全部是同步非阻塞的，没有时间浪费。")])]),t._v(" "),s("h3",{attrs:{id:"单线程-io-的瓶颈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单线程-io-的瓶颈"}},[t._v("#")]),t._v(" 单线程 IO 的瓶颈")]),t._v(" "),s("p",[t._v("尽管单线程 IO 处理过程避免了等待时间的浪费，并能实现较高的 QPS，但仍然存在一些瓶颈：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("仅使用一个 CPU 核心")]),t._v("（忽略后台线程）。")]),t._v(" "),s("li",[t._v("当数据量较大时，Redis 的 QPS 可能会显著下降，有时一个大的 key 会拖垮整个系统。")]),t._v(" "),s("li",[t._v("难以进一步提升 QPS。")])]),t._v(" "),s("p",[t._v("Redis 主线程的时间消耗主要集中在以下两个方面：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("逻辑计算消耗")])]),t._v(" "),s("li",[s("strong",[t._v("同步 IO 读写消耗")]),t._v("，包括数据拷贝的消耗。")])]),t._v(" "),s("p",[t._v("当数据量较大时，瓶颈主要出现在同步 IO 上（假设带宽和内存充足）。主要的消耗包括：")]),t._v(" "),s("ul",[s("li",[t._v("从 socket 中读取请求数据时，会将数据从内核态拷贝到用户态（"),s("code",[t._v("read")]),t._v(" 调用）。")]),t._v(" "),s("li",[t._v("将数据回写到 socket 时，会将数据从用户态拷贝到内核态（"),s("code",[t._v("write")]),t._v(" 调用）。")])]),t._v(" "),s("p",[t._v("这些数据读写操作会占用大量 CPU 时间，并直接导致性能瓶颈。如果能通过多线程来分担这些消耗，Redis 的吞吐量有望得到显著提升，这也是 Redis 引入多线程 IO 的主要目的。")]),t._v(" "),s("h2",{attrs:{id:"redis-多线程-io-的工作原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-多线程-io-的工作原理"}},[t._v("#")]),t._v(" Redis 多线程 IO 的工作原理")]),t._v(" "),s("p",[t._v("接下来将目光放到： 如何用多线程分担IO的负荷。其做法用简单的话来说就是：")]),t._v(" "),s("ul",[s("li",[t._v("用一组单独的线程专门进行 read/write socket读写调用 （同步IO）")]),t._v(" "),s("li",[t._v("读回调函数中不再读数据，而是将对应的连接追加到可读 clients_pending_read 的链表")]),t._v(" "),s("li",[t._v("主线程在 beforeSleep 中将IO读任务分给IO线程组")]),t._v(" "),s("li",[t._v("主线程自己也处理一个 IO 读任务，并自旋式等 IO 线程组处理完，再继续往下")]),t._v(" "),s("li",[t._v("主线程在 beforeSleep 中将 IO 写任务分给IO线程组")]),t._v(" "),s("li",[t._v("主线程自己也处理一个 IO 写任务，并自旋式等 IO 线程组处理完，再继续往下")]),t._v(" "),s("li",[t._v("IO线程组要么同时在读，要么同时在写")]),t._v(" "),s("li",[t._v("命令的执行由主线程串行执行（保持单线程）")]),t._v(" "),s("li",[t._v("IO线程数量可配置")])]),t._v(" "),s("p",[t._v("完整流程图如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409172051604.webp",alt:"img"}})]),t._v(" "),s("p",[t._v("beforesleep 中，先让 IO 线程读数据，然后再让 IO 线程写数据。 读写时，多线程能并发执行，利用多核。")]),t._v(" "),s("ol",[s("li",[t._v("将读任务均匀分发到各个IO线程的任务链表 io_threads_list[i]，将 io_threads_pending[i] 设置为对应的任务数，此时 IO 线程将从死循环中被激活，开始执行任务，执行完毕后，会将 io_threads_pending[i] 清零。 函数名为： handleClientsWithPendingReadsUsingThreads")]),t._v(" "),s("li",[t._v("将写任务均匀分发到各个IO线程的任务链表 io_threads_list[i]，将io_threads_pending[i] 设置为对应的任务数，此时IO线程将从死循环中被激活，开始执行任务，执行完毕后，会将 io_threads_pending[i]清零。 函数名为： handleClientsWithPendingWritesUsingThreads")]),t._v(" "),s("li",[t._v("beforeSleep中主线程也会执行其中一个任务，执行完后自旋等待 IO 线程处理完。")]),t._v(" "),s("li",[t._v("读任务要么在 beforeSleep 中被执行，要么在 IO 线程被执行，不会再在读回调中执行")]),t._v(" "),s("li",[t._v("写任务会分散到 beforeSleep、IO线程、写回调中执行")]),t._v(" "),s("li",[t._v("主线程和 IO 线程交互是无锁的，通过标志位设置进行，不会同时写任务链表")])]),t._v(" "),s("h2",{attrs:{id:"redis-多线程-io-核心源码解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-多线程-io-核心源码解析"}},[t._v("#")]),t._v(" Redis 多线程 IO 核心源码解析")]),t._v(" "),s("h3",{attrs:{id:"_1、初始化-io-线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、初始化-io-线程"}},[t._v("#")]),t._v(" 1、初始化 IO 线程")]),t._v(" "),s("p",[t._v("在 "),s("a",{attrs:{href:""}},[t._v("Redis 的执行模式")]),t._v(" 中提到：Redis 5.0 版本中的三个后台线程是在 "),s("code",[t._v("server.c")]),t._v(" 文件的 "),s("code",[t._v("main")]),t._v(" 函数启动的最后阶段调用 "),s("code",[t._v("InitServerLast")]),t._v(" 函数来初始化的，而 "),s("code",[t._v("InitServerLast")]),t._v(" 函数则进一步调用 "),s("code",[t._v("bioInit")]),t._v(" 函数来完成初始化。")]),t._v(" "),s("p",[t._v("在 Redis 6.0 中，"),s("code",[t._v("InitServerLast")]),t._v(" 函数在调用 "),s("code",[t._v("bioInit")]),t._v(" 后，新增了对 "),s("code",[t._v("initThreadedIO")]),t._v(" 函数的调用，以初始化多线程 IO 机制。")]),t._v(" "),s("p",[s("code",[t._v("initThreadedIO")]),t._v(" 函数用于初始化多 IO 线程，其代码实现如下所示：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// server.c#InitServerLast")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("InitServerLast")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bioInit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("initThreadedIO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set_jemalloc_bg_thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("jemalloc_bg_thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("initial_memory_usage "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("zmalloc_used_memory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("blockquote",[s("p",[s("code",[t._v("bioInit")]),t._v(" 函数用于初始化 Redis 的后台 IO 线程，处理如 RDB/AOF 持久化等耗时操作。而 "),s("code",[t._v("initThreadedIO")]),t._v(" 函数在此基础上进一步初始化多线程 IO 机制，以支持更高效的客户端请求处理。")])]),t._v(" "),s("p",[s("code",[t._v("initThreadedIO")]),t._v(" 函数的主要任务是初始化 IO 线程，其代码实现如下：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// networking.c#initThreadedIO")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("initThreadedIO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io_threads_active "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 初始化时线程未激活。 */")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 如果用户选择了单线程，则不创建额外线程：\n     * 所有 I/O 操作将由主线程处理。 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io_threads_num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io_threads_num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" IO_THREADS_MAX_NUM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("serverLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LL_WARNING"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"致命错误：配置了过多的 I/O 线程。"')]),t._v("\n                             "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"最大允许数量为 %d。"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" IO_THREADS_MAX_NUM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 创建并初始化 I/O 线程。 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io_threads_num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 对所有线程（包括主线程）执行的操作。 */")]),t._v("\n        io_threads_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listCreate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 线程 0 是主线程。 */")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 对额外线程执行的操作。 */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_t")]),t._v(" tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_mutex_init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("io_threads_mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setIOPendingCount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_mutex_lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("io_threads_mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 线程将被暂停。 */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建线程，并指定处理方法 IOThreadMain")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("IOThreadMain"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("serverLog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LL_WARNING"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"致命错误：无法初始化 IO 线程。"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        io_threads"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",[s("li",[t._v("首先，"),s("code",[t._v("initThreadedIO")]),t._v(" 函数会设置 IO 线程的激活标志。")]),t._v(" "),s("li",[t._v("随后，"),s("code",[t._v("initThreadedIO")]),t._v(" 函数对设置的 IO 线程数量进行检查：\n"),s("ol",[s("li",[t._v("如果 IO 线程数量为 1，则表示只有一个主线程，"),s("code",[t._v("initThreadedIO")]),t._v(" 函数将直接返回。在这种情况下，Redis server 的 IO 线程配置与 Redis 6.0 之前的版本相同。")]),t._v(" "),s("li",[t._v("如果 IO 线程数量超过宏定义 "),s("code",[t._v("IO_THREADS_MAX_NUM")]),t._v("（默认值为 128），"),s("code",[t._v("initThreadedIO")]),t._v(" 函数会报错并退出程序。")]),t._v(" "),s("li",[t._v("如果 IO 线程数量在 1 和 "),s("code",[t._v("IO_THREADS_MAX_NUM")]),t._v(" 之间，"),s("code",[t._v("initThreadedIO")]),t._v(" 函数会执行一个循环，该循环次数等于设置的 IO 线程数量（"),s("strong",[t._v("注意")]),t._v("，"),s("code",[t._v("i == 0")]),t._v(" 表示主线程）。")])])])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("IO_THREADS_MAX_NUM")]),t._v(" 是一个宏定义，表示 Redis 支持的最大 IO 线程数量，默认值为 128。这一限制旨在防止过多线程对系统性能造成负担。")])]),t._v(" "),s("p",[t._v("在该循环中，"),s("code",[t._v("initThreadedIO")]),t._v(" 函数会对以下四个数组进行初始化：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("io_threads_list 数组")]),t._v("：保存每个 IO 线程要处理的客户端列表，数组的每个元素初始化为一个 "),s("code",[t._v("List")]),t._v(" 类型的列表。")]),t._v(" "),s("li",[s("strong",[t._v("io_threads_pending 数组")]),t._v("：保存等待每个 IO 线程处理的客户端数量。")]),t._v(" "),s("li",[s("strong",[t._v("io_threads_mutex 数组")]),t._v("：保存线程的互斥锁。")]),t._v(" "),s("li",[s("strong",[t._v("io_threads 数组")]),t._v("：保存每个 IO 线程的描述符。")])]),t._v(" "),s("p",[t._v("这些数组的定义都在 "),s("code",[t._v("networking.c")]),t._v(" 文件中，如下所示：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_t")]),t._v(" io_threads"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("IO_THREADS_MAX_NUM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录线程描述符的数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_mutex_t")]),t._v(" io_threads_mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("IO_THREADS_MAX_NUM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录线程互斥锁的数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("_Atomic")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" io_threads_pending"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("IO_THREADS_MAX_NUM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录线程待处理的客户端数量")]),t._v("\nlist "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("io_threads_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("IO_THREADS_MAX_NUM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录线程对应处理的客户端列表")]),t._v("\n")])])]),s("p",[t._v("在对这些数组进行初始化的同时，"),s("code",[t._v("initThreadedIO")]),t._v(" 函数还会根据 IO 线程数量，"),s("strong",[t._v("调用 "),s("code",[t._v("pthread_create")]),t._v(" 函数创建相应数量的线程")]),t._v("。")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("for")]),t._v(" 循环中，"),s("code",[t._v("pthread_create")]),t._v(" 函数用于创建线程。每个线程执行 "),s("code",[t._v("IOThreadMain")]),t._v(" 函数来处理客户端请求。如果 "),s("code",[t._v("pthread_create")]),t._v(" 返回非零值，则说明线程创建失败，此时 Redis 会记录错误并退出。")]),t._v(" "),s("p",[t._v("因此，"),s("code",[t._v("initThreadedIO")]),t._v(" 函数创建的线程运行的函数是 "),s("strong",[t._v("IOThreadMain")]),t._v("，参数为当前创建线程的编号。需要注意的是，该编号从 1 开始，而编号为 0 的线程实际上是运行 Redis server 主流程的主线程。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("IOThreadMain")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("myid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ID 是线程编号（从 0 到 server.iothreads_num-1） */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("myid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" thdname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("snprintf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("thdname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("thdname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"io_thd_%ld"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("redis_set_thread_title")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("thdname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("redisSetCpuAffinity")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("server_cpulist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeThreadKillable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 等待开始 */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getIOPendingCount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 给主线程一个机会来停止此线程。 */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getIOPendingCount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_mutex_lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("io_threads_mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_mutex_unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("io_threads_mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("serverAssert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getIOPendingCount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tio_debug"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[%ld] %d to handle\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listLength")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io_threads_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 处理：注意主线程不会在我们将待处理数量减少到 0 之前触碰我们的列表 */")]),t._v("\n        listIter li"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        listNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ln"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listRewind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io_threads_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("li"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ln "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("li"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            client "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listNodeValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ln"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io_threads_op "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" IO_THREADS_OP_WRITE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeToClient")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io_threads_op "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" IO_THREADS_OP_READ"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readQueryFromClient")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("conn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("serverPanic")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"io_threads_op 值未知"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listEmpty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io_threads_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setIOPendingCount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tio_debug"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[%ld] Done\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("IOThreadMain")]),t._v(" 函数也在 "),s("code",[t._v("networking.c")]),t._v(" 文件中定义，其主要逻辑为一个 "),s("strong",[t._v("while(1) 循环")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("IOThreadMain")]),t._v(" 函数在循环中处理 "),s("code",[t._v("io_threads_list")]),t._v(" 数组中每个线程的客户端请求。")]),t._v(" "),s("p",[t._v("正如之前所述，"),s("code",[t._v("io_threads_list")]),t._v(" 数组中为每个 IO 线程使用一个列表记录待处理的客户端。因此，"),s("code",[t._v("IOThreadMain")]),t._v(" 函数会从每个 IO 线程对应的列表中取出待处理的客户端，并根据操作类型执行相应操作。操作类型由变量 "),s("code",[t._v("io_threads_op")]),t._v(" 表示，其值有两种：")]),t._v(" "),s("ul",[s("li",[s("strong",[s("code",[t._v("io_threads_op")]),t._v(" 的值为宏定义 "),s("code",[t._v("IO_THREADS_OP_WRITE")])]),t._v("：表示该 IO 线程进行写操作，将数据从 Redis 写回客户端，线程会调用 "),s("code",[t._v("writeToClient")]),t._v(" 函数。")]),t._v(" "),s("li",[s("strong",[s("code",[t._v("io_threads_op")]),t._v(" 的值为宏定义 "),s("code",[t._v("IO_THREADS_OP_READ")])]),t._v("：表示该 IO 线程进行读操作，从客户端读取数据，线程会调用 "),s("code",[t._v("readQueryFromClient")]),t._v(" 函数。")])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("笔记")]),t._v(" "),s("p",[t._v("如果您对 Java 编程熟悉，可以将 "),s("code",[t._v("IOThreadMain")]),t._v(" 函数视为 "),s("code",[t._v("Runnable")]),t._v(" 的具体实现。其核心逻辑在于 "),s("code",[t._v("while(1)")]),t._v(" 无限循环中。根据源码，IO 线程从 "),s("code",[t._v("io_threads_list")]),t._v(" 队列（或列表）中获取待处理的客户端，并根据操作类型选择具体的执行逻辑。这是一种典型的 "),s("code",[t._v("生产者-消费者模型")]),t._v("，主线程负责投递事件，IO 线程负责消费事件（主线程也参与）。")])]),t._v(" "),s("p",[t._v("我绘制了下图，以展示 "),s("code",[t._v("IOThreadMain")]),t._v(" 函数的基本流程，请参考：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409172237429.png",alt:"image-20240917144454718"}})]),t._v(" "),s("p",[t._v("如上所示，每个 IO 线程在运行过程中，会不断检查是否有待处理的客户端请求。如果存在待处理的客户端，线程会根据操作类型，从客户端读取数据或将数据写回客户端。这些操作涉及 Redis 与客户端之间的 I/O 交互，因此这些线程被称为 IO 线程。")]),t._v(" "),s("p",[t._v("在此，您可能会产生一些疑问："),s("strong",[t._v("IO 线程如何将客户端添加到 "),s("code",[t._v("io_threads_list")]),t._v(" 数组中？")])]),t._v(" "),s("p",[t._v("这涉及 Redis server 的全局变量 "),s("code",[t._v("server")]),t._v("。"),s("code",[t._v("server")]),t._v(" 变量中包含两个 "),s("code",[t._v("List")]),t._v(" 类型的成员变量："),s("code",[t._v("clients_pending_write")]),t._v(" 和 "),s("code",[t._v("clients_pending_read")]),t._v("，分别记录待写回数据的客户端和待读取数据的客户端，如下所示：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("redisServer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 待写回数据的客户端")]),t._v("\n    list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("clients_pending_write"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 待读取数据的客户端")]),t._v("\n    list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("clients_pending_read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Redis server 在接收客户端请求和返回数据的过程中，会根据特定条件推迟客户端的读写操作，并将这些客户端分别保存到这两个列表中。随后，在每次进入事件循环前，Redis server 会将列表中的客户端添加到 "),s("code",[t._v("io_threads_list")]),t._v(" 数组中，由 IO 线程进行处理。")]),t._v(" "),s("p",[t._v("接下来，我们将探讨 Redis 如何推迟客户端的读写操作，并将这些客户端添加到 "),s("code",[t._v("clients_pending_write")]),t._v(" 和 "),s("code",[t._v("clients_pending_read")]),t._v(" 列表中。")]),t._v(" "),s("h3",{attrs:{id:"_2-多线程读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-多线程读"}},[t._v("#")]),t._v(" 2. 多线程读")]),t._v(" "),s("p",[t._v("在早期的单线程版本中，当多路复用检测到客户端数据准备就绪时，主事件循环会轮询处理这些就绪的客户端，步骤如下：")]),t._v(" "),s("ol",[s("li",[t._v("读取数据")]),t._v(" "),s("li",[t._v("解析数据")]),t._v(" "),s("li",[t._v("执行命令")]),t._v(" "),s("li",[t._v("将数据写回客户端缓冲区")]),t._v(" "),s("li",[t._v("等待下一轮主事件循环")]),t._v(" "),s("li",[t._v("将客户端缓冲数据写回客户端")])]),t._v(" "),s("p",[t._v("在多线程模式下（假设配置了多线程读），上述流程有所变化：数据读取和解析操作将被分配给多个 IO 线程（包括主线程）。")]),t._v(" "),s("p",[t._v("所有就绪客户端将暂存至队列中：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("redisServer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n   list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("clients_pending_read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("处理流程如下：")]),t._v(" "),s("ol",[s("li",[t._v("主线程开始监听 IO 事件")]),t._v(" "),s("li",[t._v("主线程调用 "),s("code",[t._v("readQueryFromClient")])]),t._v(" "),s("li",[s("code",[t._v("postponeClientRead")]),t._v(" 将客户端添加至 "),s("code",[t._v("clients_pending_read")])]),t._v(" "),s("li",[s("code",[t._v("handleClientsWithPendingReadsUsingThreads")]),t._v(" 将 "),s("code",[t._v("clients_pending_read")]),t._v(" 列表中的客户端分配给所有 IO 线程")]),t._v(" "),s("li",[t._v("主线程阻塞并等待所有 IO 线程完成读取")]),t._v(" "),s("li",[t._v("主线程循环遍历并处理所有读取到的数据")])]),t._v(" "),s("h4",{attrs:{id:"入队-如何推迟客户端读操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#入队-如何推迟客户端读操作"}},[t._v("#")]),t._v(" 入队：如何推迟客户端读操作？")]),t._v(" "),s("p",[t._v("Redis server 在与客户端建立连接后，会开始监听客户端的可读事件。处理可读事件的回调函数是 "),s("code",[t._v("readQueryFromClient")]),t._v("。我在某处已介绍了这一过程，您可以再次回顾。")]),t._v(" "),s("p",[t._v("在 Redis 6.0 版本中，"),s("code",[t._v("readQueryFromClient")]),t._v(" 函数首先从传入的参数 "),s("code",[t._v("conn")]),t._v(" 中获取客户端 "),s("code",[t._v("c")]),t._v("，然后调用 "),s("code",[t._v("postponeClientRead")]),t._v(" 函数来判断是否推迟从客户端读取数据。执行逻辑如下：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readQueryFromClient")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connection "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("conn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    client "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("connGetPrivateData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("conn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从连接数据结构中获取客户端")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postponeClientRead")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断是否推迟从客户端读取数据")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("接下来，我们将分析 "),s("code",[t._v("postponeClientRead")]),t._v(" 函数的执行逻辑。该函数会根据以下四个条件判断是否可以推迟从客户端读取数据：")]),t._v(" "),s("p",[s("strong",[t._v("条件一：全局变量 "),s("code",[t._v("server")]),t._v(" 的 "),s("code",[t._v("io_threads_active")]),t._v(" 值为 1")])]),t._v(" "),s("p",[t._v("这表示多 IO 线程已激活。正如前述，该变量在 "),s("code",[t._v("initThreadedIO")]),t._v(" 函数中初始化为 0，表明多 IO 线程初始化后默认未激活（后文将详细介绍何时将该变量值设置为 1）。")]),t._v(" "),s("p",[s("strong",[t._v("条件二：全局变量 "),s("code",[t._v("server")]),t._v(" 的 "),s("code",[t._v("io_threads_do_read")]),t._v(" 值为 1")])]),t._v(" "),s("p",[t._v("这表示多 IO 线程可以处理延后执行的客户端读操作。该变量在 Redis 配置文件 "),s("code",[t._v("redis.conf")]),t._v(" 中通过 "),s("code",[t._v("io-threads-do-reads")]),t._v(" 配置项设置，默认为 "),s("code",[t._v("no")]),t._v("，即多 IO 线程机制默认不用于客户端读操作。若要启用多 IO 线程处理客户端读操作，需将 "),s("code",[t._v("io-threads-do-reads")]),t._v(" 配置项设为 "),s("code",[t._v("yes")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("条件三："),s("code",[t._v("ProcessingEventsWhileBlocked")]),t._v(" 变量值为 0")])]),t._v(" "),s("p",[t._v("这表示 "),s("code",[t._v("processEventsWhileBlocked")]),t._v(" 函数未在执行中。"),s("code",[t._v("ProcessingEventsWhileBlocked")]),t._v(" 是一个全局变量，当 "),s("code",[t._v("processEventsWhileBlocked")]),t._v(" 函数执行时，该变量值为 1，函数执行完成后值为 0。"),s("code",[t._v("processEventsWhileBlocked")]),t._v(" 函数在 "),s("code",[t._v("networking.c")]),t._v(" 文件中实现，主要用于在 Redis 读取 RDB 或 AOF 文件时处理事件，避免因读取文件阻塞 Redis 导致事件处理延迟。因此，当 "),s("code",[t._v("processEventsWhileBlocked")]),t._v(" 函数处理客户端可读事件时，这些客户端读操作不会被推迟。")]),t._v(" "),s("p",[s("strong",[t._v("条件四：客户端当前标识不能包含 "),s("code",[t._v("CLIENT_MASTER")]),t._v("、"),s("code",[t._v("CLIENT_SLAVE")]),t._v(" 和 "),s("code",[t._v("CLIENT_PENDING_READ")])])]),t._v(" "),s("p",[t._v("其中，"),s("code",[t._v("CLIENT_MASTER")]),t._v(" 和 "),s("code",[t._v("CLIENT_SLAVE")]),t._v(" 标识表示客户端用于主从复制，这些客户端的读操作不会被推迟。"),s("code",[t._v("CLIENT_PENDING_READ")]),t._v(" 标识表示客户端已设置为推迟读操作，因此，对于已带有 "),s("code",[t._v("CLIENT_PENDING_READ")]),t._v(" 标识的客户端，"),s("code",[t._v("postponeClientRead")]),t._v(" 函数不会再次推迟其读操作。")]),t._v(" "),s("p",[t._v("只有当上述四个条件均满足时，"),s("code",[t._v("postponeClientRead")]),t._v(" 函数才会推迟当前客户端的读操作。具体来说，"),s("code",[t._v("postponeClientRead")]),t._v(" 函数会为该客户端设置 "),s("code",[t._v("CLIENT_PENDING_READ")]),t._v(" 标识，并调用 "),s("code",[t._v("listAddNodeHead")]),t._v(" 函数，将客户端添加到全局变量 "),s("code",[t._v("server")]),t._v(" 的 "),s("code",[t._v("clients_pending_read")]),t._v(" 列表中。")]),t._v(" "),s("p",[t._v("以下是 "),s("code",[t._v("postponeClientRead")]),t._v(" 函数的代码：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postponeClientRead")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("client "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断 IO 线程是否激活")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io_threads_active "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io_threads_do_reads "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("      \n         "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("ProcessingEventsWhileBlocked "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CLIENT_MASTER"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("CLIENT_SLAVE"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("CLIENT_PENDING_READ"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" CLIENT_PENDING_READ"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置客户端标识为 CLIENT_PENDING_READ，表示推迟该客户端的读操作")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listAddNodeHead")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("clients_pending_read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将客户端添加到 clients_pending_read 列表中")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("综上所述，Redis 在客户端读事件回调函数 "),s("code",[t._v("readQueryFromClient")]),t._v(" 中，通过调用 "),s("code",[t._v("postponeClientRead")]),t._v(" 函数来判断并推迟客户端读操作。接下来，我们将探讨 Redis 如何推迟客户端写操作。")]),t._v(" "),s("h4",{attrs:{id:"分配-如何将待读客户端分配给-io-线程执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分配-如何将待读客户端分配给-io-线程执行"}},[t._v("#")]),t._v(" 分配：如何将待读客户端分配给 IO 线程执行？")]),t._v(" "),s("p",[t._v("首先，我们需要了解 "),s("strong",[t._v("handleClientsWithPendingReadsUsingThreads")]),t._v(" 函数的作用。该函数在 "),s("code",[t._v("beforeSleep")]),t._v(" 函数中被调用。")]),t._v(" "),s("p",[t._v("在 Redis 6.0 版本的实现中，事件驱动框架通过调用 "),s("code",[t._v("aeMain")]),t._v(" 函数执行事件循环，"),s("code",[t._v("aeMain")]),t._v(" 函数进一步调用 "),s("code",[t._v("aeProcessEvents")]),t._v(" 处理各种事件。在 "),s("code",[t._v("aeProcessEvents")]),t._v(" 实际调用 "),s("code",[t._v("aeApiPoll")]),t._v(" 捕获 IO 事件之前，"),s("code",[t._v("beforeSleep")]),t._v(" 函数会被执行。")]),t._v(" "),s("p",[t._v("该过程如图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409172240189.png",alt:"image-20240917145125065"}})]),t._v(" "),s("p",[s("strong",[t._v("handleClientsWithPendingReadsUsingThreads")]),t._v(" 函数的执行逻辑可分为四个步骤：")]),t._v(" "),s("p",[s("strong",[t._v("第一步")]),t._v("，该函数首先检查全局变量 "),s("code",[t._v("server")]),t._v(" 的 "),s("code",[t._v("io_threads_active")]),t._v(" 成员变量，确认 IO 线程是否激活，同时依据 "),s("code",[t._v("io_threads_do_reads")]),t._v(" 成员变量判断是否允许 IO 线程处理待读客户端。只有在 IO 线程被激活并且允许处理待读客户端的情况下，"),s("code",[t._v("handleClientsWithPendingReadsUsingThreads")]),t._v(" 函数才会继续执行，否则函数将直接返回。判断逻辑如下：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io_threads_active "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io_threads_do_reads"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("第二步")]),t._v("，函数获取 "),s("code",[t._v("clients_pending_read")]),t._v(" 列表的长度，表示待处理客户端的数量。随后，函数从 "),s("code",[t._v("clients_pending_read")]),t._v(" 列表中逐一取出待处理的客户端，并通过客户端在列表中的序号对 IO 线程数量进行取模运算。")]),t._v(" "),s("p",[t._v("通过这种方式，客户端将被分配给对应的 IO 线程。接着，函数会调用 "),s("code",[t._v("listAddNodeTail")]),t._v(" 将分配好的客户端添加到 "),s("code",[t._v("io_threads_list")]),t._v(" 数组的相应元素中。"),s("code",[t._v("io_threads_list")]),t._v(" 数组的每个元素是一个列表，保存了每个 IO 线程需要处理的客户端。")]),t._v(" "),s("p",[t._v("以下是具体的示例：")]),t._v(" "),s("p",[t._v("假设 IO 线程数量为 3，而 "),s("code",[t._v("clients_pending_read")]),t._v(" 列表中有 5 个客户端，其序号分别为 0、1、2、3 和 4。在此步骤中，这些客户端的序号对线程数量 3 取模的结果分别是 0、1、2、0、1，这对应了处理这些客户端的 IO 线程编号。也就是说，客户端 0 由线程 0 处理，客户端 1 由线程 1 处理，以此类推。客户端的分配方式实际上是一种 "),s("strong",[t._v("轮询")]),t._v(" 方式。")]),t._v(" "),s("p",[t._v("下图展示了这种分配结果：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409172240213.png",alt:"image-20240917145140527"}})]),t._v(" "),s("p",[t._v("以下代码展示了如何以轮询方式将客户端分配给 IO 线程的执行逻辑：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" processed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listLength")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("clients_pending_read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listRewind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("clients_pending_read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("li"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" item_id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ln "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("li"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    client "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listNodeValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ln"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" target_id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item_id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io_threads_num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listAddNodeTail")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io_threads_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("target_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    item_id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("当 "),s("code",[t._v("handleClientsWithPendingReadsUsingThreads")]),t._v(" 函数完成客户端的 IO 线程分配后，它会将 IO 线程的操作标识设置为 "),s("strong",[t._v("读操作")]),t._v("，即 "),s("code",[t._v("IO_THREADS_OP_READ")]),t._v("。然后，它会遍历 "),s("code",[t._v("io_threads_list")]),t._v(" 数组中的每个元素列表，记录每个线程待处理客户端的数量，并赋值给 "),s("code",[t._v("io_threads_pending")]),t._v(" 数组。具体过程如下：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("io_threads_op "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" IO_THREADS_OP_READ"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io_threads_num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listLength")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io_threads_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    io_threads_pending"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("第三步")]),t._v("，函数会将 "),s("code",[t._v("io_threads_list")]),t._v(" 数组中的 0 号列表（即 "),s("code",[t._v("io_threads_list[0]")]),t._v("）中的客户端逐一取出，并调用 "),s("code",[t._v("readQueryFromClient")]),t._v(" 函数进行处理。")]),t._v(" "),s("p",[t._v("需要注意的是，"),s("code",[t._v("handleClientsWithPendingReadsUsingThreads")]),t._v(" 函数本身由 IO 主线程执行，而 "),s("code",[t._v("io_threads_list")]),t._v(" 数组中的 0 号线程即为 IO 主线程，因此此步骤是由主线程处理其待读客户端：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listRewind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io_threads_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("li"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取 0 号列表中的所有客户端")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ln "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("li"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    client "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listNodeValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ln"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("readQueryFromClient")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("conn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listEmpty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io_threads_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处理完后，清空 0 号列表")]),t._v("\n")])])]),s("p",[t._v("接下来，"),s("code",[t._v("handleClientsWithPendingReadsUsingThreads")]),t._v(" 函数会进入一个 "),s("code",[t._v("while(1)")]),t._v(" 循环，等待所有 IO 线程完成对待读客户端的处理，如下所示：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" pending "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io_threads_num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        pending "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" io_threads_pending"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pending "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("第四步")]),t._v("，函数会再次遍历 "),s("code",[t._v("clients_pending_read")]),t._v(" 列表，逐一取出其中的客户端。接着，函数会检查客户端是否有 "),s("code",[t._v("CLIENT_PENDING_COMMAND")]),t._v(" 标识。如果存在，说明该客户端的命令已被某个 IO 线程解析，可以执行。")]),t._v(" "),s("p",[t._v("此时，"),s("code",[t._v("handleClientsWithPendingReadsUsingThreads")]),t._v(" 函数会调用 "),s("code",[t._v("processCommandAndResetClient")]),t._v(" 执行命令，并直接调用 "),s("code",[t._v("processInputBuffer")]),t._v(" 解析客户端中所有命令并执行。")]),t._v(" "),s("p",[t._v("相关代码如下：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listLength")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("clients_pending_read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ln "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listFirst")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("clients_pending_read"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    client "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listNodeValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ln"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果命令已解析，则执行该命令")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" CLIENT_PENDING_COMMAND"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v("CLIENT_PENDING_COMMAND"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("processCommandAndResetClient")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" C_ERR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解析并执行所有命令")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("processInputBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("至此，你已经了解了如何将 "),s("code",[t._v("clients_pending_read")]),t._v(" 列表中的待读客户端通过上述四个步骤分配给 IO 线程进行处理。下图展示了这一主要过程，你可以进一步回顾：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409172240204.png",alt:"image-20240917145158198"}})]),t._v(" "),s("p",[t._v("接下来，我们将探讨待写客户端的分配和处理方式。")]),t._v(" "),s("p",[t._v("需要注意的是，当 "),s("code",[t._v("待处理客户端")]),t._v(" 数量较少时，Redis 认为不需要多线程共同处理，所有任务将由主线程完成：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stopThreadedIOIfNeeded")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" pending "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listLength")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("clients_pending_write"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io_threads_num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pending "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io_threads_num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io_threads_active"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stopThreadedIO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("当 "),s("code",[t._v("待处理客户端数量")]),t._v(" 小于 "),s("code",[t._v("2倍的 IO 线程数")]),t._v(" 时，所有客户端数据将由主线程处理。")]),t._v(" "),s("h3",{attrs:{id:"_3、多线程写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、多线程写"}},[t._v("#")]),t._v(" 3、多线程写")]),t._v(" "),s("h4",{attrs:{id:"入队-如何决定是否推迟客户端写操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#入队-如何决定是否推迟客户端写操作"}},[t._v("#")]),t._v(" 入队：如何决定是否推迟客户端写操作？")]),t._v(" "),s("p",[t._v("在 Redis 中，当执行客户端命令后，需要向客户端返回结果时，会调用 "),s("code",[t._v("addReply")]),t._v(" 函数将待返回的结果写入客户端的输出缓冲区。")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("addReply")]),t._v(" 函数的开始部分，该函数会调用 "),s("code",[t._v("prepareClientToWrite")]),t._v(" 函数来判断是否需要推迟执行客户端的写操作。以下代码展示了 "),s("code",[t._v("addReply")]),t._v(" 函数如何调用 "),s("code",[t._v("prepareClientToWrite")]),t._v(" 函数：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addReply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("client "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" robj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("prepareClientToWrite")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" C_OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("接下来，我们来看一下 "),s("code",[t._v("prepareClientToWrite")]),t._v(" 函数。该函数根据客户端的设置进行一系列判断。其中，"),s("code",[t._v("clientHasPendingReplies")]),t._v(" 函数会被调用，用于检查当前客户端的输出缓冲区中是否还有待写回的数据。")]),t._v(" "),s("p",[t._v("如果缓冲区中没有待写回的数据，"),s("code",[t._v("prepareClientToWrite")]),t._v(" 函数会进一步调用 "),s("code",[t._v("clientInstallWriteHandler")]),t._v(" 函数，以判断是否能够推迟客户端的写操作。以下代码展示了这一调用过程：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("prepareClientToWrite")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("client "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果客户端没有待写回数据，则调用 clientInstallWriteHandler 函数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clientHasPendingReplies")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clientInstallWriteHandler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" C_OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("因此，推迟客户端写操作的最终决定由 "),s("code",[t._v("clientInstallWriteHandler")]),t._v(" 函数做出。该函数会检查两个条件：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("条件一")]),t._v("：客户端未设置 "),s("code",[t._v("CLIENT_PENDING_WRITE")]),t._v(" 标识，即尚未推迟过写操作。")]),t._v(" "),s("li",[s("strong",[t._v("条件二")]),t._v("：客户端所在实例未进行主从复制，或即使正在进行主从复制，客户端所在实例作为从节点且全量复制的 RDB 文件已传输完成，可以接收请求。")])]),t._v(" "),s("p",[t._v("当上述两个条件都满足时，"),s("code",[t._v("clientInstallWriteHandler")]),t._v(" 函数会将客户端标识设置为 "),s("code",[t._v("CLIENT_PENDING_WRITE")]),t._v("，以表示推迟该客户端的写操作。同时，该函数会将客户端添加到全局变量 "),s("code",[t._v("server")]),t._v(" 的待写回客户端列表 "),s("code",[t._v("clients_pending_write")]),t._v(" 中。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clientInstallWriteHandler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("client "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果客户端没有设置过 CLIENT_PENDING_WRITE 标识，且客户端不在主从复制中，或作为从节点且已接收请求")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" CLIENT_PENDING_WRITE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("replstate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" REPL_STATE_NONE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("replstate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" SLAVE_STATE_ONLINE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("repl_put_online_on_ack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将客户端标识设置为待写回，即 CLIENT_PENDING_WRITE")]),t._v("\n        c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" CLIENT_PENDING_WRITE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listAddNodeHead")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("clients_pending_write"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将客户端添加到 clients_pending_write 列表")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("为帮助理解，我绘制了一张图，展示了 Redis 推迟客户端写操作的函数调用关系，供参考。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409172248379.png",alt:"img"}})]),t._v(" "),s("p",[t._v("然而，当 Redis 使用 "),s("code",[t._v("clients_pending_read")]),t._v(" 和 "),s("code",[t._v("clients_pending_write")]),t._v(" 两个列表保存推迟执行的客户端时，"),s("strong",[t._v("这些客户端如何分配给多个 I/O 线程进行处理呢？")]),t._v(" 这涉及到以下两个函数：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("handleClientsWithPendingReadsUsingThreads")]),t._v(" 函数：负责将 "),s("code",[t._v("clients_pending_read")]),t._v(" 列表中的客户端分配给 I/O 线程处理。")]),t._v(" "),s("li",[s("code",[t._v("handleClientsWithPendingWritesUsingThreads")]),t._v(" 函数：负责将 "),s("code",[t._v("clients_pending_write")]),t._v(" 列表中的客户端分配给 I/O 线程处理。")])]),t._v(" "),s("p",[t._v("接下来，我们将详细介绍这两个函数的具体操作。")]),t._v(" "),s("h4",{attrs:{id:"分配-如何将待读客户端分配给-10-个线程执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分配-如何将待读客户端分配给-10-个线程执行"}},[t._v("#")]),t._v(" 分配：如何将待读客户端分配给 10 个线程执行？")]),t._v(" "),s("p",[t._v("与待读客户端的分配类似，待写客户端的分配处理由 "),s("code",[t._v("handleClientsWithPendingWritesUsingThreads")]),t._v(" 函数完成，该函数同样在 "),s("code",[t._v("beforeSleep")]),t._v(" 函数中被调用。")]),t._v(" "),s("p",[s("code",[t._v("handleClientsWithPendingWritesUsingThreads")]),t._v(" 函数的主要流程可以分为四个步骤，其中第二、第三和第四步的执行逻辑与 "),s("code",[t._v("handleClientsWithPendingReadsUsingThreads")]),t._v(" 函数类似。")]),t._v(" "),s("p",[t._v("简言之，在第二步中，"),s("code",[t._v("handleClientsWithPendingWritesUsingThreads")]),t._v(" 函数会将待写客户端按照 "),s("strong",[t._v("轮询方式")]),t._v(" 分配给 I/O 线程，并将其添加到 "),s("code",[t._v("io_threads_list")]),t._v(" 数组的各个元素中。")]),t._v(" "),s("p",[t._v("在第三步中，"),s("code",[t._v("handleClientsWithPendingWritesUsingThreads")]),t._v(" 函数会让主 I/O 线程处理其待写客户端，并执行 "),s("code",[t._v("while(1)")]),t._v(" 循环以等待所有 I/O 线程完成处理。")]),t._v(" "),s("p",[t._v("在第四步中，"),s("code",[t._v("handleClientsWithPendingWritesUsingThreads")]),t._v(" 函数会再次检查 "),s("code",[t._v("clients_pending_write")]),t._v(" 列表中是否还有待写客户端。如果存在且这些客户端仍有数据待写，函数会调用 "),s("code",[t._v("connSetWriteHandler")]),t._v(" 函数注册可写事件，该事件的回调函数为 "),s("code",[t._v("sendReplyToClient")]),t._v("。")]),t._v(" "),s("p",[t._v("当事件循环流程再次执行时，"),s("code",[t._v("sendReplyToClient")]),t._v(" 函数会被调用，它会直接调用 "),s("code",[t._v("writeToClient")]),t._v(" 函数，将客户端缓冲区中的数据写回。")]),t._v(" "),s("p",[t._v("需要注意的是，"),s("code",[t._v("connSetWriteHandler")]),t._v(" 函数最终会映射为 "),s("code",[t._v("connSocketSetWriteHandler")]),t._v(" 函数，后者在 "),s("a",{attrs:{href:"https://github.com/redis/redis/tree/5.0/src/connection.c",target:"_blank",rel:"noopener noreferrer"}},[t._v("connection.c"),s("OutboundLink")],1),t._v(" 文件中实现。"),s("code",[t._v("connSocketSetWriteHandler")]),t._v(" 函数会调用 "),s("code",[t._v("aeCreateFileEvent")]),t._v(" 函数创建 "),s("code",[t._v("AE_WRITABLE")]),t._v(" 事件，这即为可写事件的注册（有关 "),s("code",[t._v("aeCreateFileEvent")]),t._v(" 函数的使用，可以参见第 11 讲）。")]),t._v(" "),s("p",[t._v("与 "),s("code",[t._v("handleClientsWithPendingReadsUsingThreads")]),t._v(" 函数不同的是，在第一步中，"),s("code",[t._v("handleClientsWithPendingWritesUsingThreads")]),t._v(" 函数会判断 I/O 线程数量是否为 1，或待写客户端数量是否少于 I/O 线程数量的两倍。")]),t._v(" "),s("p",[t._v("如果满足上述任一条件，则 "),s("code",[t._v("handleClientsWithPendingWritesUsingThreads")]),t._v(" 函数不会采用多线程处理客户端，而是调用 "),s("code",[t._v("handleClientsWithPendingWrites")]),t._v(" 函数由主 I/O 线程直接处理待写客户端。这主要是为了在待写客户端数量较少时，"),s("strong",[t._v("节省 CPU 开销")]),t._v("。")]),t._v(" "),s("p",[t._v("以下是条件判断逻辑：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io_threads_num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stopThreadedIOIfNeeded")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleClientsWithPendingWrites")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("此外，"),s("code",[t._v("handleClientsWithPendingWritesUsingThreads")]),t._v(" 函数在第一步中还会判断 I/O 线程是否已激活。如果未激活，则调用 "),s("code",[t._v("startThreadedIO")]),t._v(" 函数，将全局变量 "),s("code",[t._v("server")]),t._v(" 的 "),s("code",[t._v("io_threads_active")]),t._v(" 成员变量设置为 1，以表示 I/O 线程已激活。此判断操作如下：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io_threads_active"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("startThreadedIO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("总之，Redis 通过 "),s("code",[t._v("handleClientsWithPendingWritesUsingThreads")]),t._v(" 函数将待写客户端按轮询方式分配给各个 I/O 线程，并由这些线程负责数据的写回。")]),t._v(" "),s("h2",{attrs:{id:"redis-多线程-io-的性能调优与实际问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-多线程-io-的性能调优与实际问题"}},[t._v("#")]),t._v(" Redis 多线程 IO 的性能调优与实际问题")]),t._v(" "),s("p",[t._v("redis 默认情况下不会开启多线程处理，官方也建议，除非性能达到瓶颈，否则没必要开启多线程。")]),t._v(" "),s("p",[s("strong",[t._v("配置多少合适？")])]),t._v(" "),s("p",[t._v("官方文档 redis.conf 中介绍有：")]),t._v(" "),s("blockquote",[s("p",[t._v("By default threading is disabled, we suggest enabling it only in machines\nthat have at least 4 or more cores, leaving at least one spare core.\nUsing more than 8 threads is unlikely to help much. We also recommend using\nthreaded I/O only if you actually have performance problems, with Redis\ninstances being able to use a quite big percentage of CPU time, otherwise\nthere is no point in using this feature.")]),t._v(" "),s("p",[t._v("So for instance if you have a four cores boxes, try to use 2 or 3 I/O\nthreads, if you have a 8 cores, try to use 6 threads. In order to\nenable I/O threads use the following configuration directive:")])]),t._v(" "),s("p",[t._v("CPU 4 核以上，才考虑开启多线程，其中：")]),t._v(" "),s("ul",[s("li",[t._v("4 核开启 2 - 3 个 IO 线程")]),t._v(" "),s("li",[t._v("8 核 开启 6 个 IO 线程")]),t._v(" "),s("li",[t._v("超过 8 个 IO 线程，性能提升已经不大")])]),t._v(" "),s("p",[t._v("值得注意的是，以上的 IO 线程其实包含了主线程。")]),t._v(" "),s("p",[s("strong",[t._v("配置：")])]),t._v(" "),s("p",[t._v("开启多线程：配置 io-thread 即可。io-thread = 1 表示只使用主线程")]),t._v(" "),s("blockquote",[s("p",[t._v("io-threads 4")])]),t._v(" "),s("p",[t._v("开启之后，默认写操作会通过多线程来处理，而读操作则不会。")]),t._v(" "),s("p",[t._v("如果读操作也想要开启多线程，则需要配置：")]),t._v(" "),s("blockquote",[s("p",[t._v("io-threads-do-reads yes")])]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("今天这节课，我给你介绍了 Redis 6.0 中新设计实现的"),s("strong",[t._v("多 IO 线程机制")]),t._v("。这个机制的设计主要是为了使用多个 IO 线程，来并发处理客户端读取数据、解析命令和写回数据。使用了多线程后，Redis 就可以充分利用服务器的多核特性，从而"),s("strong",[t._v("提高 IO 效率")]),t._v("。")]),t._v(" "),s("p",[t._v("总结来说，Redis 6.0 先是在初始化过程中，根据用户设置的 IO 线程数量，创建对应数量的 IO 线程。")]),t._v(" "),s("p",[t._v("当 Redis server 初始化完成后正常运行时，它会在 readQueryFromClient 函数中通过调用 postponeClientRead 函数来决定是否推迟客户端读操作。同时，Redis server 会在 addReply 函数中通过调用 prepareClientToWrite 函数，来决定是否推迟客户端写操作。而待读写的客户端会被分别加入到 clients_pending_read 和 clients_pending_write 两个列表中。")]),t._v(" "),s("p",[t._v("这样，每当 Redis server 要进入事件循环流程前，都会在 beforeSleep 函数中分别调用 handleClientsWithPendingReadsUsingThreads 函数和 handleClientsWithPendingWritesUsingThreads 函数，将待读写客户端"),s("strong",[t._v("以轮询方式分配给 IO 线程")]),t._v("，加入到 IO 线程的待处理客户端列表 io_threads_list 中。")]),t._v(" "),s("p",[t._v("而 IO 线程一旦运行后，本身会一直检测 io_threads_list 中的客户端，如果有待读写客户端，IO 线程就会调用 readQueryFromClient 或 writeToClient 函数来进行处理。")]),t._v(" "),s("p",[t._v("最后，我也想再提醒你一下，"),s("strong",[t._v("多 IO 线程本身并不会执行命令")]),t._v("，它们只是利用多核并行地读取数据和解析命令，或是将 server 数据写回（下节课我还会结合分布式锁的原子性保证，来给你介绍这一部分的源码实现。）。所以，"),s("strong",[t._v("Redis 执行命令的线程还是主线程")]),t._v("。这一点对于你理解多 IO 线程机制很重要，可以避免你误解 Redis 有多线程同时执行命令。")]),t._v(" "),s("p",[t._v("这样一来，我们原来针对 Redis 单个主线程做的优化仍然有效，比如避免 bigkey、避免阻塞操作等。")]),t._v(" "),s("h2",{attrs:{id:"参考文献"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/556726757",target:"_blank",rel:"noopener noreferrer"}},[t._v("redis 6.0之多线程，深入解读 - 知乎 (zhihu.com)"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.zhihu.com/tardis/zm/art/144805500?source_id=1005",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis 6.0 多线程IO处理过程详解 (zhihu.com)"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://time.geekbang.org/column/intro/100084301",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis 源码剖析与实战 (geekbang.org)"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);