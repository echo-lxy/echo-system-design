(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{374:function(t,_,e){"use strict";e.r(_);var v=e(4),s=Object(v.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"前言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),_("p",[t._v("在"),_("code",[t._v("非阻塞IO")]),t._v("这一小节的开头，我们提到"),_("code",[t._v("网络IO模型")]),t._v("的演变都是围绕着---"),_("strong",[t._v("如何用尽可能少的线程去处理更多的连接")]),t._v("这个核心需求开始展开的。")]),t._v(" "),_("p",[t._v("本小节我们来谈谈"),_("code",[t._v("IO多路复用模型")]),t._v("，那么什么是"),_("code",[t._v("多路")]),t._v("？，什么又是"),_("code",[t._v("复用")]),t._v("呢？")]),t._v(" "),_("p",[t._v("我们还是以这个核心需求来对这两个概念展开阐述：")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("多路")]),t._v("：我们的核心需求是要用尽可能少的线程来处理尽可能多的连接，这里的"),_("code",[t._v("多路")]),t._v("指的就是我们需要处理的众多连接。")]),t._v(" "),_("li",[_("strong",[t._v("复用")]),t._v("：核心需求要求我们使用"),_("code",[t._v("尽可能少的线程")]),t._v("，"),_("code",[t._v("尽可能少的系统开销")]),t._v("去处理"),_("code",[t._v("尽可能多")]),t._v("的连接（"),_("code",[t._v("多路")]),t._v("），那么这里的"),_("code",[t._v("复用")]),t._v("指的就是用"),_("code",[t._v("有限的资源")]),t._v("，比如用一个线程或者固定数量的线程去处理众多连接上的读写事件。换句话说，在"),_("code",[t._v("阻塞IO模型")]),t._v("中一个连接就需要分配一个独立的线程去专门处理这个连接上的读写，到了"),_("code",[t._v("IO多路复用模型")]),t._v("中，多个连接可以"),_("code",[t._v("复用")]),t._v("这一个独立的线程去处理这多个连接上的读写。")])]),t._v(" "),_("p",[t._v("好了，"),_("code",[t._v("IO多路复用模型")]),t._v("的概念解释清楚了，那么"),_("strong",[t._v("问题的关键")]),t._v("是我们如何去实现这个"),_("code",[t._v("复用")]),t._v("，也就是如何让一个独立的线程去处理众多连接上的读写事件呢？")]),t._v(" "),_("p",[t._v("这个问题其实在"),_("code",[t._v("非阻塞IO模型")]),t._v("中已经给出了它的答案，在"),_("code",[t._v("非阻塞IO模型")]),t._v("中，利用"),_("code",[t._v("非阻塞")]),t._v("的系统IO调用去不断的轮询众多连接的"),_("code",[t._v("Socket")]),t._v("接收缓冲区看是否有数据到来，如果有则处理，如果没有则继续轮询下一个"),_("code",[t._v("Socket")]),t._v("。这样就达到了用一个线程去处理众多连接上的读写事件了。")]),t._v(" "),_("p",[_("strong",[t._v("但是")]),_("code",[t._v("非阻塞IO模型")]),t._v("最大的问题就是需要不断的发起"),_("code",[t._v("系统调用")]),t._v("去轮询各个"),_("code",[t._v("Socket")]),t._v("中的接收缓冲区是否有数据到来，"),_("code",[t._v("频繁")]),t._v("的"),_("code",[t._v("系统调用")]),t._v("随之带来了大量的上下文切换开销。随着并发量的提升，这样也会导致非常严重的性能问题。")]),t._v(" "),_("p",[_("strong",[t._v("那么如何避免频繁的系统调用同时又可以实现我们的核心需求呢？")])]),t._v(" "),_("p",[t._v("这就需要操作系统的内核来支持这样的操作，我们可以把频繁的轮询操作交给操作系统内核来替我们完成，这样就避免了在"),_("code",[t._v("用户空间")]),t._v("频繁的去使用系统调用来轮询所带来的性能开销。")]),t._v(" "),_("p",[t._v("正如我们所想，操作系统内核也确实为我们提供了这样的功能实现，下面我们来一起看下操作系统对"),_("code",[t._v("IO多路复用模型")]),t._v("的实现。")]),t._v(" "),_("h2",{attrs:{id:"select"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#select"}},[t._v("#")]),t._v(" select")]),t._v(" "),_("p",[_("code",[t._v("select")]),t._v("是操作系统内核提供给我们使用的一个"),_("code",[t._v("系统调用")]),t._v("，它解决了在"),_("code",[t._v("非阻塞IO模型")]),t._v("中需要不断的发起"),_("code",[t._v("系统IO调用")]),t._v("去轮询"),_("code",[t._v("各个连接上的Socket")]),t._v("接收缓冲区所带来的"),_("code",[t._v("用户空间")]),t._v("与"),_("code",[t._v("内核空间")]),t._v("不断切换的"),_("code",[t._v("系统开销")]),t._v("。")]),t._v(" "),_("p",[_("code",[t._v("select")]),t._v("系统调用将"),_("code",[t._v("轮询")]),t._v("的操作交给了"),_("code",[t._v("内核")]),t._v("来帮助我们完成，从而避免了在"),_("code",[t._v("用户空间")]),t._v("不断的发起轮询所带来的的系统性能开销。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190918459.png",alt:"图片"}})]),t._v(" "),_("ul",[_("li",[_("p",[t._v("首先用户线程在发起"),_("code",[t._v("select")]),t._v("系统调用的时候会"),_("code",[t._v("阻塞")]),t._v("在"),_("code",[t._v("select")]),t._v("系统调用上。此时，用户线程从"),_("code",[t._v("用户态")]),t._v("切换到了"),_("code",[t._v("内核态")]),t._v("完成了一次"),_("code",[t._v("上下文切换")])])]),t._v(" "),_("li",[_("p",[t._v("用户线程将需要监听的"),_("code",[t._v("Socket")]),t._v("对应的文件描述符"),_("code",[t._v("fd")]),t._v("数组通过"),_("code",[t._v("select")]),t._v("系统调用传递给内核。此时，用户线程将"),_("code",[t._v("用户空间")]),t._v("中的文件描述符"),_("code",[t._v("fd")]),t._v("数组"),_("code",[t._v("拷贝")]),t._v("到"),_("code",[t._v("内核空间")]),t._v("。")])])]),t._v(" "),_("p",[t._v("这里的"),_("strong",[t._v("文件描述符数组")]),t._v("其实是一个"),_("code",[t._v("BitMap")]),t._v("，"),_("code",[t._v("BitMap")]),t._v("下标为"),_("code",[t._v("文件描述符fd")]),t._v("，下标对应的值为："),_("code",[t._v("1")]),t._v("表示该"),_("code",[t._v("fd")]),t._v("上有读写事件，"),_("code",[t._v("0")]),t._v("表示该"),_("code",[t._v("fd")]),t._v("上没有读写事件。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190918284.png",alt:"图片"}})]),t._v(" "),_("p",[_("strong",[t._v("文件描述符fd")]),t._v("其实就是一个"),_("code",[t._v("整数值")]),t._v("，在Linux中一切皆文件，"),_("code",[t._v("Socket")]),t._v("也是一个文件。描述进程所有信息的数据结构"),_("code",[t._v("task_struct")]),t._v("中有一个属性"),_("code",[t._v("struct files_struct *files")]),t._v("，它最终指向了一个数组，数组里存放了进程打开的所有文件列表，文件信息封装在"),_("code",[t._v("struct file")]),t._v("结构体中，这个数组存放的类型就是"),_("code",[t._v("struct file")]),t._v("结构体，"),_("code",[t._v("数组的下标")]),t._v("则是我们常说的文件描述符"),_("code",[t._v("fd")]),t._v("。")]),t._v(" "),_("ul",[_("li",[t._v("当用户线程调用完"),_("code",[t._v("select")]),t._v("后开始进入"),_("code",[t._v("阻塞状态")]),t._v("，"),_("code",[t._v("内核")]),t._v("开始轮询遍历"),_("code",[t._v("fd")]),t._v("数组，查看"),_("code",[t._v("fd")]),t._v("对应的"),_("code",[t._v("Socket")]),t._v("接收缓冲区中是否有数据到来。如果有数据到来，则将"),_("code",[t._v("fd")]),t._v("对应"),_("code",[t._v("BitMap")]),t._v("的值设置为"),_("code",[t._v("1")]),t._v("。如果没有数据到来，则保持值为"),_("code",[t._v("0")]),t._v("。")])]),t._v(" "),_("div",{staticClass:"custom-block warning"},[_("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),_("p",[_("strong",[t._v("注意")]),t._v("这里内核会修改原始的"),_("code",[t._v("fd")]),t._v("数组！！")])]),t._v(" "),_("ul",[_("li",[_("p",[t._v("内核遍历一遍"),_("code",[t._v("fd")]),t._v("数组后，如果发现有些"),_("code",[t._v("fd")]),t._v("上有IO数据到来，则将修改后的"),_("code",[t._v("fd")]),t._v("数组返回给用户线程。此时，会将"),_("code",[t._v("fd")]),t._v("数组从"),_("code",[t._v("内核空间")]),t._v("拷贝到"),_("code",[t._v("用户空间")]),t._v("。")])]),t._v(" "),_("li",[_("p",[t._v("当内核将修改后的"),_("code",[t._v("fd")]),t._v("数组返回给用户线程后，用户线程解除"),_("code",[t._v("阻塞")]),t._v("，由用户线程开始遍历"),_("code",[t._v("fd")]),t._v("数组然后找出"),_("code",[t._v("fd")]),t._v("数组中值为"),_("code",[t._v("1")]),t._v("的"),_("code",[t._v("Socket")]),t._v("文件描述符。最后对这些"),_("code",[t._v("Socket")]),t._v("发起系统调用读取数据。")])])]),t._v(" "),_("div",{staticClass:"custom-block note"},[_("p",{staticClass:"custom-block-title"},[t._v("笔记")]),t._v(" "),_("p",[_("code",[t._v("select")]),t._v("不会告诉用户线程具体哪些"),_("code",[t._v("fd")]),t._v("上有IO数据到来，只是在"),_("code",[t._v("IO活跃")]),t._v("的"),_("code",[t._v("fd")]),t._v("上打上标记，将打好标记的完整"),_("code",[t._v("fd")]),t._v("数组返回给用户线程，所以用户线程还需要遍历"),_("code",[t._v("fd")]),t._v("数组找出具体哪些"),_("code",[t._v("fd")]),t._v("上有"),_("code",[t._v("IO数据")]),t._v("到来。")])]),t._v(" "),_("ul",[_("li",[t._v("由于内核在遍历的过程中已经修改了"),_("code",[t._v("fd")]),t._v("数组，所以在用户线程遍历完"),_("code",[t._v("fd")]),t._v("数组后获取到"),_("code",[t._v("IO就绪")]),t._v("的"),_("code",[t._v("Socket")]),t._v("后，就需要"),_("code",[t._v("重置")]),t._v("fd数组，并重新调用"),_("code",[t._v("select")]),t._v("传入重置后的"),_("code",[t._v("fd")]),t._v("数组，让内核发起新的一轮遍历轮询。")])]),t._v(" "),_("h3",{attrs:{id:"api介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#api介绍"}},[t._v("#")]),t._v(" API介绍")]),t._v(" "),_("p",[t._v("当我们熟悉了"),_("code",[t._v("select")]),t._v("的原理后，就很容易理解内核给我们提供的"),_("code",[t._v("select API")]),t._v("了。")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v(" int select(int maxfdp1,fd_set *readset,fd_set *writeset,fd_set *exceptset,const struct timeval *timeout)\n")])])]),_("p",[t._v("从"),_("code",[t._v("select API")]),t._v("中我们可以看到，"),_("code",[t._v("select")]),t._v("系统调用是在规定的"),_("code",[t._v("超时时间内")]),t._v("，监听（"),_("code",[t._v("轮询")]),t._v("）用户感兴趣的文件描述符集合上的"),_("code",[t._v("可读")]),t._v(","),_("code",[t._v("可写")]),t._v(","),_("code",[t._v("异常")]),t._v("三类事件。")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("maxfdp1 ：")]),t._v(" select传递给内核监听的文件描述符集合中数值最大的文件描述符"),_("code",[t._v("+1")]),t._v("，目的是用于限定内核遍历范围。比如："),_("code",[t._v("select")]),t._v("监听的文件描述符集合为"),_("code",[t._v("{0,1,2,3,4}")]),t._v("，那么"),_("code",[t._v("maxfdp1")]),t._v("的值为"),_("code",[t._v("5")]),t._v("。")]),t._v(" "),_("li",[_("code",[t._v("fd_set *readset：")]),t._v(" 对"),_("code",[t._v("可读事件")]),t._v("感兴趣的文件描述符集合。")]),t._v(" "),_("li",[_("code",[t._v("fd_set *writeset：")]),t._v(" 对"),_("code",[t._v("可写事件")]),t._v("感兴趣的文件描述符集合。")]),t._v(" "),_("li",[_("code",[t._v("fd_set *exceptset：")]),t._v("对"),_("code",[t._v("异常事件")]),t._v("感兴趣的文件描述符集合。")])]),t._v(" "),_("blockquote",[_("p",[t._v("这里的"),_("code",[t._v("fd_set")]),t._v("就是我们前边提到的"),_("code",[t._v("文件描述符数组")]),t._v("，是一个"),_("code",[t._v("BitMap")]),t._v("结构。")])]),t._v(" "),_("ul",[_("li",[_("code",[t._v("const struct timeval *timeout：")]),t._v("select系统调用超时时间，在这段时间内，内核如果没有发现有"),_("code",[t._v("IO就绪")]),t._v("的文件描述符，就直接返回。")])]),t._v(" "),_("p",[t._v("上小节提到，在"),_("code",[t._v("内核")]),t._v("遍历完"),_("code",[t._v("fd")]),t._v("数组后，发现有"),_("code",[t._v("IO就绪")]),t._v("的"),_("code",[t._v("fd")]),t._v("，则会将该"),_("code",[t._v("fd")]),t._v("对应的"),_("code",[t._v("BitMap")]),t._v("中的值设置为"),_("code",[t._v("1")]),t._v("，并将修改后的"),_("code",[t._v("fd")]),t._v("数组，返回给用户线程。")]),t._v(" "),_("p",[t._v("在用户线程中需要重新遍历"),_("code",[t._v("fd")]),t._v("数组，找出"),_("code",[t._v("IO就绪")]),t._v("的"),_("code",[t._v("fd")]),t._v("出来，然后发起真正的读写调用。")]),t._v(" "),_("p",[t._v("下面介绍下在用户线程中重新遍历"),_("code",[t._v("fd")]),t._v("数组的过程中，我们需要用到的"),_("code",[t._v("API")]),t._v("：")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("void FD_ZERO(fd_set *fdset)：")]),t._v("清空指定的文件描述符集合，即让"),_("code",[t._v("fd_set")]),t._v("中不在包含任何文件描述符。")]),t._v(" "),_("li",[_("code",[t._v("void FD_SET(int fd, fd_set *fdset)：")]),t._v("将一个给定的文件描述符加入集合之中。")])]),t._v(" "),_("blockquote",[_("p",[t._v("每次调用"),_("code",[t._v("select")]),t._v("之前都要通过"),_("code",[t._v("FD_ZERO")]),t._v("和"),_("code",[t._v("FD_SET")]),t._v("重新设置文件描述符，因为文件描述符集合会在"),_("code",[t._v("内核")]),t._v("中"),_("code",[t._v("被修改")]),t._v("。")])]),t._v(" "),_("ul",[_("li",[_("code",[t._v("int FD_ISSET(int fd, fd_set *fdset)：")]),t._v("检查集合中指定的文件描述符是否可以读写。用户线程"),_("code",[t._v("遍历")]),t._v("文件描述符集合,调用该方法检查相应的文件描述符是否"),_("code",[t._v("IO就绪")]),t._v("。")]),t._v(" "),_("li",[_("code",[t._v("void FD_CLR(int fd, fd_set *fdset)：")]),t._v("将一个给定的文件描述符从集合中删除")])]),t._v(" "),_("h3",{attrs:{id:"性能开销"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#性能开销"}},[t._v("#")]),t._v(" 性能开销")]),t._v(" "),_("p",[t._v("虽然"),_("code",[t._v("select")]),t._v("解决了"),_("code",[t._v("非阻塞IO模型")]),t._v("中频繁发起"),_("code",[t._v("系统调用")]),t._v("的问题，但是在整个"),_("code",[t._v("select")]),t._v("工作过程中，我们还是看出了"),_("code",[t._v("select")]),t._v("有些不足的地方。")]),t._v(" "),_("ul",[_("li",[t._v("在发起"),_("code",[t._v("select")]),t._v("系统调用以及返回时，用户线程各发生了一次"),_("code",[t._v("用户态")]),t._v("到"),_("code",[t._v("内核态")]),t._v("以及"),_("code",[t._v("内核态")]),t._v("到"),_("code",[t._v("用户态")]),t._v("的上下文切换开销。"),_("strong",[t._v("发生2次上下文"),_("code",[t._v("切换")])])]),t._v(" "),_("li",[t._v("在发起"),_("code",[t._v("select")]),t._v("系统调用以及返回时，用户线程在"),_("code",[t._v("内核态")]),t._v("需要将"),_("code",[t._v("文件描述符集合")]),t._v("从用户空间"),_("code",[t._v("拷贝")]),t._v("到内核空间。以及在内核修改完"),_("code",[t._v("文件描述符集合")]),t._v("后，又要将它从内核空间"),_("code",[t._v("拷贝")]),t._v("到用户空间。"),_("strong",[t._v("发生2次文件描述符集合的"),_("code",[t._v("拷贝")])])]),t._v(" "),_("li",[t._v("虽然由原来在"),_("code",[t._v("用户空间")]),t._v("发起轮询"),_("code",[t._v("优化成了")]),t._v("在"),_("code",[t._v("内核空间")]),t._v("发起轮询但"),_("code",[t._v("select")]),t._v("不会告诉用户线程到底是哪些"),_("code",[t._v("Socket")]),t._v("上发生了"),_("code",[t._v("IO就绪")]),t._v("事件，只是对"),_("code",[t._v("IO就绪")]),t._v("的"),_("code",[t._v("Socket")]),t._v("作了标记，用户线程依然要"),_("code",[t._v("遍历")]),t._v("文件描述符集合去查找具体"),_("code",[t._v("IO就绪")]),t._v("的"),_("code",[t._v("Socket")]),t._v("。时间复杂度依然为"),_("code",[t._v("O(n)")]),t._v("。")])]),t._v(" "),_("blockquote",[_("p",[t._v("大部分情况下，网络连接并不总是活跃的，如果"),_("code",[t._v("select")]),t._v("监听了大量的客户端连接，只有少数的连接活跃，然而使用轮询的这种方式会随着连接数的增大，效率会越来越低。")])]),t._v(" "),_("ul",[_("li",[_("code",[t._v("内核")]),t._v("会对原始的"),_("code",[t._v("文件描述符集合")]),t._v("进行修改。导致每次在用户空间重新发起"),_("code",[t._v("select")]),t._v("调用时，都需要对"),_("code",[t._v("文件描述符集合")]),t._v("进行"),_("code",[t._v("重置")]),t._v("。")]),t._v(" "),_("li",[_("code",[t._v("BitMap")]),t._v("结构的文件描述符集合，长度为固定的"),_("code",[t._v("1024")]),t._v(",所以只能监听"),_("code",[t._v("0~1023")]),t._v("的文件描述符。")]),t._v(" "),_("li",[_("code",[t._v("select")]),t._v("系统调用 不是线程安全的。")])]),t._v(" "),_("p",[t._v("以上"),_("code",[t._v("select")]),t._v("的不足所产生的"),_("code",[t._v("性能开销")]),t._v("都会随着并发量的增大而"),_("code",[t._v("线性增长")]),t._v("。")]),t._v(" "),_("p",[t._v("很明显"),_("code",[t._v("select")]),t._v("也不能解决"),_("code",[t._v("C10K")]),t._v("问题，只适用于"),_("code",[t._v("1000")]),t._v("个左右的并发连接场景。")]),t._v(" "),_("h2",{attrs:{id:"poll"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#poll"}},[t._v("#")]),t._v(" poll")]),t._v(" "),_("p",[_("code",[t._v("poll")]),t._v("相当于是改进版的"),_("code",[t._v("select")]),t._v("，但是工作原理基本和"),_("code",[t._v("select")]),t._v("没有本质的区别。")]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pollfd")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("fds"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nfds"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" timeout"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pollfd")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("   fd"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 文件描述符 */")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" events"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 需要监听的事件 */")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" revents"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 实际发生的事件 由内核修改设置 */")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),_("p",[_("code",[t._v("select")]),t._v("中使用的文件描述符集合是采用的固定长度为1024的"),_("code",[t._v("BitMap")]),t._v("结构的"),_("code",[t._v("fd_set")]),t._v("，而"),_("code",[t._v("poll")]),t._v("换成了一个"),_("code",[t._v("pollfd")]),t._v("结构没有固定长度的数组，这样就没有了最大描述符数量的限制（当然还会受到系统文件描述符限制）")]),t._v(" "),_("p",[_("code",[t._v("poll")]),t._v("只是改进了"),_("code",[t._v("select")]),t._v("只能监听"),_("code",[t._v("1024")]),t._v("个文件描述符的数量限制，但是并没有在性能方面做出改进。和"),_("code",[t._v("select")]),t._v("上本质并没有多大差别。")]),t._v(" "),_("ul",[_("li",[t._v("同样需要在"),_("code",[t._v("内核空间")]),t._v("和"),_("code",[t._v("用户空间")]),t._v("中对文件描述符集合进行"),_("code",[t._v("轮询")]),t._v("，查找出"),_("code",[t._v("IO就绪")]),t._v("的"),_("code",[t._v("Socket")]),t._v("的时间复杂度依然为"),_("code",[t._v("O(n)")]),t._v("。")]),t._v(" "),_("li",[t._v("同样需要将"),_("code",[t._v("包含大量文件描述符的集合")]),t._v("整体在"),_("code",[t._v("用户空间")]),t._v("和"),_("code",[t._v("内核空间")]),t._v("之间"),_("code",[t._v("来回复制")]),t._v("，"),_("strong",[t._v("无论这些文件描述符是否就绪")]),t._v("。他们的开销都会随着文件描述符数量的增加而线性增大。")]),t._v(" "),_("li",[_("code",[t._v("select，poll")]),t._v("在每次新增，删除需要监听的socket时，都需要将整个新的"),_("code",[t._v("socket")]),t._v("集合全量传至"),_("code",[t._v("内核")]),t._v("。")])]),t._v(" "),_("p",[_("code",[t._v("poll")]),t._v("同样不适用高并发的场景。依然无法解决"),_("code",[t._v("C10K")]),t._v("问题。")]),t._v(" "),_("h2",{attrs:{id:"epoll"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#epoll"}},[t._v("#")]),t._v(" epoll")]),t._v(" "),_("p",[t._v("通过上边对"),_("code",[t._v("select,poll")]),t._v("核心原理的介绍，我们看到"),_("code",[t._v("select,poll")]),t._v("的性能瓶颈主要体现在下面三个地方：")]),t._v(" "),_("ul",[_("li",[t._v("因为内核不会保存我们要监听的"),_("code",[t._v("socket")]),t._v("集合，所以在每次调用"),_("code",[t._v("select,poll")]),t._v("的时候都需要传入，传出全量的"),_("code",[t._v("socket")]),t._v("文件描述符集合。这导致了大量的文件描述符在"),_("code",[t._v("用户空间")]),t._v("和"),_("code",[t._v("内核空间")]),t._v("频繁的来回复制。")]),t._v(" "),_("li",[t._v("由于内核不会通知具体"),_("code",[t._v("IO就绪")]),t._v("的"),_("code",[t._v("socket")]),t._v("，只是在这些"),_("code",[t._v("IO就绪")]),t._v("的socket上打好标记，所以当"),_("code",[t._v("select")]),t._v("系统调用返回时，在"),_("code",[t._v("用户空间")]),t._v("还是需要"),_("code",[t._v("完整遍历")]),t._v("一遍"),_("code",[t._v("socket")]),t._v("文件描述符集合来获取具体"),_("code",[t._v("IO就绪")]),t._v("的"),_("code",[t._v("socket")]),t._v("。")]),t._v(" "),_("li",[t._v("在"),_("code",[t._v("内核空间")]),t._v("中也是通过遍历的方式来得到"),_("code",[t._v("IO就绪")]),t._v("的"),_("code",[t._v("socket")]),t._v("。")])]),t._v(" "),_("p",[t._v("下面我们来看下"),_("code",[t._v("epoll")]),t._v("是如何解决这些问题的。在介绍"),_("code",[t._v("epoll")]),t._v("的核心原理之前，我们需要介绍下理解"),_("code",[t._v("epoll")]),t._v("工作过程所需要的一些核心基础知识。")]),t._v(" "),_("h3",{attrs:{id:"socket的创建"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#socket的创建"}},[t._v("#")]),t._v(" Socket的创建")]),t._v(" "),_("p",[t._v("服务端线程调用"),_("code",[t._v("accept")]),t._v("系统调用后开始"),_("code",[t._v("阻塞")]),t._v("，当有客户端连接上来并完成"),_("code",[t._v("TCP三次握手")]),t._v("后，"),_("code",[t._v("内核")]),t._v("会创建一个对应的"),_("code",[t._v("Socket")]),t._v("作为服务端与客户端通信的"),_("code",[t._v("内核")]),t._v("接口。")]),t._v(" "),_("p",[t._v("在Linux内核的角度看来，一切皆是文件，"),_("code",[t._v("Socket")]),t._v("也不例外，当内核创建出"),_("code",[t._v("Socket")]),t._v("之后，会将这个"),_("code",[t._v("Socket")]),t._v("放到当前进程所打开的文件列表中管理起来。")]),t._v(" "),_("p",[t._v("下面我们来看下进程管理这些打开的文件列表相关的内核数据结构是什么样的？在了解完这些数据结构后，我们会更加清晰的理解"),_("code",[t._v("Socket")]),t._v("在内核中所发挥的作用。并且对后面我们理解"),_("code",[t._v("epoll")]),t._v("的创建过程有很大的帮助。")]),t._v(" "),_("h4",{attrs:{id:"进程中管理文件列表结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程中管理文件列表结构"}},[t._v("#")]),t._v(" 进程中管理文件列表结构")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190920121.png",alt:"图片"}})]),t._v(" "),_("p",[_("code",[t._v("struct tast_struct")]),t._v("是内核中用来表示进程的一个数据结构，它包含了进程的所有信息。本小节我们只列出和文件管理相关的属性。")]),t._v(" "),_("p",[t._v("其中进程内打开的所有文件是通过一个数组"),_("code",[t._v("fd_array")]),t._v("来进行组织管理，数组的下标即为我们常提到的"),_("code",[t._v("文件描述符")]),t._v("，数组中存放的是对应的文件数据结构"),_("code",[t._v("struct file")]),t._v("。每打开一个文件，内核都会创建一个"),_("code",[t._v("struct file")]),t._v("与之对应，并在"),_("code",[t._v("fd_array")]),t._v("中找到一个空闲位置分配给它，数组中对应的下标，就是我们在"),_("code",[t._v("用户空间")]),t._v("用到的"),_("code",[t._v("文件描述符")]),t._v("。")]),t._v(" "),_("blockquote",[_("p",[t._v("对于任何一个进程，默认情况下，文件描述符 "),_("code",[t._v("0")]),t._v("表示 "),_("code",[t._v("stdin 标准输入")]),t._v("，文件描述符 "),_("code",[t._v("1")]),t._v("表示"),_("code",[t._v("stdout 标准输出")]),t._v("，文件描述符"),_("code",[t._v("2")]),t._v("表示"),_("code",[t._v("stderr 标准错误输出")]),t._v("。")])]),t._v(" "),_("p",[t._v("进程中打开的文件列表"),_("code",[t._v("fd_array")]),t._v("定义在内核数据结构"),_("code",[t._v("struct files_struct")]),t._v("中，在"),_("code",[t._v("struct fdtable")]),t._v("结构中有一个指针"),_("code",[t._v("struct fd **fd")]),t._v("指向"),_("code",[t._v("fd_array")]),t._v("。")]),t._v(" "),_("p",[_("strong",[t._v("由于本小节讨论的是内核网络系统部分的数据结构")]),t._v("，所以这里拿"),_("code",[t._v("Socket")]),t._v("文件类型来举例说明：")]),t._v(" "),_("p",[t._v("用于封装文件元信息的内核数据结构"),_("code",[t._v("struct file")]),t._v("中的"),_("code",[t._v("private_data")]),t._v("指针指向具体的"),_("code",[t._v("Socket")]),t._v("结构。")]),t._v(" "),_("p",[_("code",[t._v("struct file")]),t._v("中的"),_("code",[t._v("file_operations")]),t._v("属性定义了文件的操作函数，不同的文件类型，对应的"),_("code",[t._v("file_operations")]),t._v("是不同的，针对"),_("code",[t._v("Socket")]),t._v("文件类型，这里的"),_("code",[t._v("file_operations")]),t._v("指向"),_("code",[t._v("socket_file_ops")]),t._v("。")]),t._v(" "),_("blockquote",[_("p",[t._v("我们在"),_("code",[t._v("用户空间")]),t._v("对"),_("code",[t._v("Socket")]),t._v("发起的读写等系统调用，进入内核首先会调用的是"),_("code",[t._v("Socket")]),t._v("对应的"),_("code",[t._v("struct file")]),t._v("中指向的"),_("code",[t._v("socket_file_ops")]),t._v("。"),_("strong",[t._v("比如")]),t._v("：对"),_("code",[t._v("Socket")]),t._v("发起"),_("code",[t._v("write")]),t._v("写操作，在内核中首先被调用的就是"),_("code",[t._v("socket_file_ops")]),t._v("中定义的"),_("code",[t._v("sock_write_iter")]),t._v("。"),_("code",[t._v("Socket")]),t._v("发起"),_("code",[t._v("read")]),t._v("读操作内核中对应的则是"),_("code",[t._v("sock_read_iter")]),t._v("。")])]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("file_operations")]),t._v(" socket_file_ops "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("owner "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  THIS_MODULE"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("llseek "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  no_llseek"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read_iter "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  sock_read_iter"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("write_iter "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  sock_write_iter"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("poll "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("    sock_poll"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unlocked_ioctl "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sock_ioctl"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mmap "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("    sock_mmap"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("release "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  sock_close"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fasync "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  sock_fasync"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sendpage "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  sock_sendpage"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("splice_write "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" generic_splice_sendpage"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("splice_read "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  sock_splice_read"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),_("h4",{attrs:{id:"socket内核结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#socket内核结构"}},[t._v("#")]),t._v(" Socket内核结构")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190922929.png",alt:"图片"}})]),t._v(" "),_("p",[t._v("在我们进行网络程序的编写时会首先创建一个"),_("code",[t._v("Socket")]),t._v("，然后基于这个"),_("code",[t._v("Socket")]),t._v("进行"),_("code",[t._v("bind")]),t._v("，"),_("code",[t._v("listen")]),t._v("，我们先将这个"),_("code",[t._v("Socket")]),t._v("称作为"),_("code",[t._v("监听Socket")]),t._v("。")]),t._v(" "),_("ol",[_("li",[t._v("当我们调用"),_("code",[t._v("accept")]),t._v("后，内核会基于"),_("code",[t._v("监听Socket")]),t._v("创建出来一个新的"),_("code",[t._v("Socket")]),t._v("专门用于与客户端之间的网络通信。并将"),_("code",[t._v("监听Socket")]),t._v("中的"),_("code",[t._v("Socket操作函数集合")]),t._v("（"),_("code",[t._v("inet_stream_ops")]),t._v("）"),_("code",[t._v("ops")]),t._v("赋值到新的"),_("code",[t._v("Socket")]),t._v("的"),_("code",[t._v("ops")]),t._v("属性中。")])]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("proto_ops")]),t._v(" inet_stream_ops "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bind "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" inet_bind"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("connect "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" inet_stream_connect"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("accept "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" inet_accept"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("poll "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tcp_poll"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("listen "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" inet_listen"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sendmsg "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" inet_sendmsg"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("recvmsg "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" inet_recvmsg"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("blockquote",[_("p",[t._v("这里需要注意的是，"),_("code",[t._v("监听的 socket")]),t._v("和真正用来网络通信的 "),_("code",[t._v("Socket")]),t._v("，是两个 Socket，一个叫作"),_("code",[t._v("监听 Socket")]),t._v("，一个叫作"),_("code",[t._v("已连接的Socket")]),t._v("。")])]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[t._v("接着内核会为"),_("code",[t._v("已连接的Socket")]),t._v("创建"),_("code",[t._v("struct file")]),t._v("并初始化，并把Socket文件操作函数集合（"),_("code",[t._v("socket_file_ops")]),t._v("）赋值给"),_("code",[t._v("struct file")]),t._v("中的"),_("code",[t._v("f_ops")]),t._v("指针。然后将"),_("code",[t._v("struct socket")]),t._v("中的"),_("code",[t._v("file")]),t._v("指针指向这个新分配申请的"),_("code",[t._v("struct file")]),t._v("结构体。")])]),t._v(" "),_("blockquote",[_("p",[t._v("内核会维护两个队列：")]),t._v(" "),_("ul",[_("li",[t._v("一个是已经完成"),_("code",[t._v("TCP三次握手")]),t._v("，连接状态处于"),_("code",[t._v("established")]),t._v("的连接队列。内核中为"),_("code",[t._v("icsk_accept_queue")]),t._v("。")]),t._v(" "),_("li",[t._v("一个是还没有完成"),_("code",[t._v("TCP三次握手")]),t._v("，连接状态处于"),_("code",[t._v("syn_rcvd")]),t._v("的半连接队列。")])])]),t._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[t._v("然后调用"),_("code",[t._v("socket->ops->accept")]),t._v("，从"),_("code",[t._v("Socket内核结构图")]),t._v("中我们可以看到其实调用的是"),_("code",[t._v("inet_accept")]),t._v("，该函数会在"),_("code",[t._v("icsk_accept_queue")]),t._v("中查找是否有已经建立好的连接，如果有的话，直接从"),_("code",[t._v("icsk_accept_queue")]),t._v("中获取已经创建好的"),_("code",[t._v("struct sock")]),t._v("。并将这个"),_("code",[t._v("struct sock")]),t._v("对象赋值给"),_("code",[t._v("struct socket")]),t._v("中的"),_("code",[t._v("sock")]),t._v("指针。")])]),t._v(" "),_("p",[_("code",[t._v("struct sock")]),t._v("在"),_("code",[t._v("struct socket")]),t._v("中是一个非常核心的内核对象，正是在这里定义了我们在介绍"),_("code",[t._v("网络包的接收发送流程")]),t._v("中提到的"),_("code",[t._v("接收队列")]),t._v("，"),_("code",[t._v("发送队列")]),t._v("，"),_("code",[t._v("等待队列")]),t._v("，"),_("code",[t._v("数据就绪回调函数指针")]),t._v("，"),_("code",[t._v("内核协议栈操作函数集合")])]),t._v(" "),_("p",[t._v("struct sock"),_("code",[t._v("在")]),t._v("struct socket"),_("code",[t._v("中是一个非常核心的内核对象，正是在这里定义了我们在介绍")]),t._v("网络包的接收发送流程"),_("code",[t._v("中提到的")]),t._v("接收队列"),_("code",[t._v("，")]),t._v("发送队列"),_("code",[t._v("，")]),t._v("等待队列"),_("code",[t._v("，")]),t._v("数据就绪回调函数指针"),_("code",[t._v("，")]),t._v("内核协议栈操作函数集合")]),t._v(" "),_("ul",[_("li",[t._v("根据创建"),_("code",[t._v("Socket")]),t._v("时发起的系统调用"),_("code",[t._v("sock_create")]),t._v("中的"),_("code",[t._v("protocol")]),t._v("参数(对于"),_("code",[t._v("TCP协议")]),t._v("这里的参数值为"),_("code",[t._v("SOCK_STREAM")]),t._v(")查找到对于 tcp 定义的操作方法实现集合 "),_("code",[t._v("inet_stream_ops")]),t._v(" 和"),_("code",[t._v("tcp_prot")]),t._v("。并把它们分别设置到"),_("code",[t._v("socket->ops")]),t._v("和"),_("code",[t._v("sock->sk_prot")]),t._v("上。")])]),t._v(" "),_("blockquote",[_("p",[t._v("这里可以回看下本小节开头的《Socket内核结构图》捋一下他们之间的关系。")])]),t._v(" "),_("blockquote",[_("p",[_("code",[t._v("socket")]),t._v("相关的操作接口定义在"),_("code",[t._v("inet_stream_ops")]),t._v("函数集合中，负责对上给用户提供接口。而"),_("code",[t._v("socket")]),t._v("与内核协议栈之间的操作接口定义在"),_("code",[t._v("struct sock")]),t._v("中的"),_("code",[t._v("sk_prot")]),t._v("指针上，这里指向"),_("code",[t._v("tcp_prot")]),t._v("协议操作函数集合。")])]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("proto")]),t._v(" tcp_prot "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name      "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"TCP"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("owner      "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" THIS_MODULE"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("close      "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tcp_close"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("connect    "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tcp_v4_connect"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("disconnect    "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tcp_disconnect"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("accept      "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" inet_csk_accept"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keepalive    "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tcp_set_keepalive"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("recvmsg    "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tcp_recvmsg"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sendmsg    "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tcp_sendmsg"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("backlog_rcv    "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tcp_v4_do_rcv"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("blockquote",[_("p",[t._v("之前提到的对"),_("code",[t._v("Socket")]),t._v("发起的系统IO调用，在内核中首先会调用"),_("code",[t._v("Socket")]),t._v("的文件结构"),_("code",[t._v("struct file")]),t._v("中的"),_("code",[t._v("file_operations")]),t._v("文件操作集合，然后调用"),_("code",[t._v("struct socket")]),t._v("中的"),_("code",[t._v("ops")]),t._v("指向的"),_("code",[t._v("inet_stream_ops")]),t._v("socket操作函数，最终调用到"),_("code",[t._v("struct sock")]),t._v("中"),_("code",[t._v("sk_prot")]),t._v("指针指向的"),_("code",[t._v("tcp_prot")]),t._v("内核协议栈操作函数接口集合。")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190923558.png",alt:"图片"}})]),t._v(" "),_("ul",[_("li",[t._v("将"),_("code",[t._v("struct sock")]),t._v(" 对象中的"),_("code",[t._v("sk_data_ready")]),t._v(" 函数指针设置为 "),_("code",[t._v("sock_def_readable")]),t._v("，在"),_("code",[t._v("Socket")]),t._v("数据就绪的时候内核会回调该函数。")]),t._v(" "),_("li",[_("code",[t._v("struct sock")]),t._v("中的"),_("code",[t._v("等待队列")]),t._v("中存放的是系统IO调用发生阻塞的"),_("code",[t._v("进程fd")]),t._v("，以及相应的"),_("code",[t._v("回调函数")]),t._v("。"),_("strong",[t._v("记住这个地方，后边介绍epoll的时候我们还会提到！")])])]),t._v(" "),_("ol",{attrs:{start:"4"}},[_("li",[t._v("当"),_("code",[t._v("struct file")]),t._v("，"),_("code",[t._v("struct socket")]),t._v("，"),_("code",[t._v("struct sock")]),t._v("这些核心的内核对象创建好之后，最后就是把"),_("code",[t._v("socket")]),t._v("对象对应的"),_("code",[t._v("struct file")]),t._v("放到进程打开的文件列表"),_("code",[t._v("fd_array")]),t._v("中。随后系统调用"),_("code",[t._v("accept")]),t._v("返回"),_("code",[t._v("socket")]),t._v("的文件描述符"),_("code",[t._v("fd")]),t._v("给用户程序。")])]),t._v(" "),_("h3",{attrs:{id:"阻塞io中用户进程阻塞以及唤醒原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#阻塞io中用户进程阻塞以及唤醒原理"}},[t._v("#")]),t._v(" 阻塞IO中用户进程阻塞以及唤醒原理")]),t._v(" "),_("p",[t._v("在前边小节我们介绍"),_("code",[t._v("阻塞IO")]),t._v("的时候提到，当用户进程发起系统IO调用时，这里我们拿"),_("code",[t._v("read")]),t._v("举例，用户进程会在"),_("code",[t._v("内核态")]),t._v("查看对应"),_("code",[t._v("Socket")]),t._v("接收缓冲区是否有数据到来。")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("Socket")]),t._v("接收缓冲区有数据，则拷贝数据到"),_("code",[t._v("用户空间")]),t._v("，系统调用返回。")]),t._v(" "),_("li",[_("code",[t._v("Socket")]),t._v("接收缓冲区没有数据，则用户进程让出"),_("code",[t._v("CPU")]),t._v("进入"),_("code",[t._v("阻塞状态")]),t._v("，当数据到达接收缓冲区时，用户进程会被唤醒，从"),_("code",[t._v("阻塞状态")]),t._v("进入"),_("code",[t._v("就绪状态")]),t._v("，等待CPU调度。")])]),t._v(" "),_("p",[t._v("本小节我们就来看下用户进程是如何"),_("code",[t._v("阻塞")]),t._v("在"),_("code",[t._v("Socket")]),t._v("上，又是如何在"),_("code",[t._v("Socket")]),t._v("上被唤醒的。"),_("strong",[t._v("理解这个过程很重要，对我们理解epoll的事件通知过程很有帮助")])]),t._v(" "),_("ul",[_("li",[t._v("首先我们在用户进程中对"),_("code",[t._v("Socket")]),t._v("进行"),_("code",[t._v("read")]),t._v("系统调用时，用户进程会从"),_("code",[t._v("用户态")]),t._v("转为"),_("code",[t._v("内核态")]),t._v("。")]),t._v(" "),_("li",[t._v("在进程的"),_("code",[t._v("struct task_struct")]),t._v("结构找到"),_("code",[t._v("fd_array")]),t._v("，并根据"),_("code",[t._v("Socket")]),t._v("的文件描述符"),_("code",[t._v("fd")]),t._v("找到对应的"),_("code",[t._v("struct file")]),t._v("，调用"),_("code",[t._v("struct file")]),t._v("中的文件操作函数结合"),_("code",[t._v("file_operations")]),t._v("，"),_("code",[t._v("read")]),t._v("系统调用对应的是"),_("code",[t._v("sock_read_iter")]),t._v("。")]),t._v(" "),_("li",[t._v("在"),_("code",[t._v("sock_read_iter")]),t._v("函数中找到"),_("code",[t._v("struct file")]),t._v("指向的"),_("code",[t._v("struct socket")]),t._v("，并调用"),_("code",[t._v("socket->ops->recvmsg")]),t._v("，这里我们知道调用的是"),_("code",[t._v("inet_stream_ops")]),t._v("集合中定义的"),_("code",[t._v("inet_recvmsg")]),t._v("。")]),t._v(" "),_("li",[t._v("在"),_("code",[t._v("inet_recvmsg")]),t._v("中会找到"),_("code",[t._v("struct sock")]),t._v("，并调用"),_("code",[t._v("sock->skprot->recvmsg")]),t._v(",这里调用的是"),_("code",[t._v("tcp_prot")]),t._v("集合中定义的"),_("code",[t._v("tcp_recvmsg")]),t._v("函数。")])]),t._v(" "),_("blockquote",[_("p",[t._v("整个调用过程可以参考上边的《系统IO调用结构图》")])]),t._v(" "),_("p",[t._v("熟悉了内核函数调用栈后，我们来看下系统IO调用在"),_("code",[t._v("tcp_recvmsg")]),t._v("内核函数中是如何将用户进程给阻塞掉的")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190926378.png",alt:"图片"}})]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("tcp_recvmsg")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("kiocb")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("iocb"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sock")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("sk"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("msghdr")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("msg"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" len"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nonblock"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" flags"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("addr_len"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("省略非核心代码"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n   "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//访问sock对象中定义的接收队列")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("skb_queue_walk")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("sk"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("sk_receive_queue"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" skb"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("省略非核心代码"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n  "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//没有收到足够数据，调用sk_wait_data 阻塞当前进程")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("sk_wait_data")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sk"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("timeo"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("sk_wait_data")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sock")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("sk"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("timeo"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建struct sock中等待队列上的元素wait_queue_t")]),t._v("\n "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将进程描述符和回调函数autoremove_wake_function关联到wait_queue_t中")]),t._v("\n "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("DEFINE_WAIT")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("wait"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 sk_sleep 获取 sock 对象下的等待队列的头指针wait_queue_head_t")]),t._v("\n "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用prepare_to_wait将新创建的等待项wait_queue_t插入到等待队列中，并将进程状态设置为可打断 INTERRUPTIBLE")]),t._v("\n "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("prepare_to_wait")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("sk_sleep")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sk"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("wait"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" TASK_INTERRUPTIBLE"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("set_bit")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SOCK_ASYNC_WAITDATA"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("sk"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("sk_socket"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("flags"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过调用schedule_timeout让出CPU，然后进行睡眠，导致一次上下文切换")]),t._v("\n rc "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("sk_wait_event")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sk"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" timeo"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("skb_queue_empty")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("sk"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("sk_receive_queue"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),_("ul",[_("li",[t._v("首先会在"),_("code",[t._v("DEFINE_WAIT")]),t._v("中创建"),_("code",[t._v("struct sock")]),t._v("中等待队列上的等待类型"),_("code",[t._v("wait_queue_t")]),t._v("。")])]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[_("span",{pre:!0,attrs:{class:"token macro property"}},[_("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),_("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token macro-name function"}},[t._v("DEFINE_WAIT")]),_("span",{pre:!0,attrs:{class:"token expression"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("DEFINE_WAIT_FUNC")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" autoremove_wake_function"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token macro property"}},[_("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),_("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token macro-name function"}},[t._v("DEFINE_WAIT_FUNC")]),_("span",{pre:!0,attrs:{class:"token expression"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" function"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    ")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n "),_("span",{pre:!0,attrs:{class:"token expression"}},[_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("wait_queue_t")]),t._v(" name "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("      ")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token expression"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("private "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" current"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("    ")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token expression"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("func  "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" function"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("    ")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token expression"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("task_list "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("LIST_HEAD_INIT")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("task_list"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n "),_("span",{pre:!0,attrs:{class:"token expression"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])]),t._v("\n")])])]),_("p",[t._v("等待类型"),_("code",[t._v("wait_queue_t")]),t._v("中的"),_("code",[t._v("private")]),t._v("用来关联"),_("code",[t._v("阻塞")]),t._v("在当前"),_("code",[t._v("socket")]),t._v("上的用户进程"),_("code",[t._v("fd")]),t._v("。"),_("code",[t._v("func")]),t._v("用来关联等待项上注册的回调函数。这里注册的是"),_("code",[t._v("autoremove_wake_function")]),t._v("。")]),t._v(" "),_("ul",[_("li",[t._v("调用"),_("code",[t._v("sk_sleep(sk)")]),t._v("获取"),_("code",[t._v("struct sock")]),t._v("对象中的等待队列头指针"),_("code",[t._v("wait_queue_head_t")]),t._v("。")]),t._v(" "),_("li",[t._v("调用"),_("code",[t._v("prepare_to_wait")]),t._v("将新创建的等待项"),_("code",[t._v("wait_queue_t")]),t._v("插入到等待队列中，并将进程设置为可打断 "),_("code",[t._v("INTERRUPTIBL")]),t._v("。")]),t._v(" "),_("li",[t._v("调用"),_("code",[t._v("sk_wait_event")]),t._v("让出CPU，进程进入睡眠状态。")])]),t._v(" "),_("p",[t._v("用户进程的"),_("code",[t._v("阻塞过程")]),t._v("我们就介绍完了，关键是要理解记住"),_("code",[t._v("struct sock")]),t._v("中定义的等待队列上的等待类型"),_("code",[t._v("wait_queue_t")]),t._v("的结构。后面"),_("code",[t._v("epoll")]),t._v("的介绍中我们还会用到它。")]),t._v(" "),_("p",[_("strong",[t._v("下面我们接着介绍当数据就绪后，用户进程是如何被唤醒的")])]),t._v(" "),_("p",[t._v("在本文开始介绍《网络包接收过程》这一小节中我们提到：")]),t._v(" "),_("ul",[_("li",[t._v("当网络数据包到达网卡时，网卡通过"),_("code",[t._v("DMA")]),t._v("的方式将数据放到"),_("code",[t._v("RingBuffer")]),t._v("中。")]),t._v(" "),_("li",[t._v("然后向CPU发起硬中断，在硬中断响应程序中创建"),_("code",[t._v("sk_buffer")]),t._v("，并将网络数据拷贝至"),_("code",[t._v("sk_buffer")]),t._v("中。")]),t._v(" "),_("li",[t._v("随后发起软中断，内核线程"),_("code",[t._v("ksoftirqd")]),t._v("响应软中断，调用"),_("code",[t._v("poll函数")]),t._v("将"),_("code",[t._v("sk_buffer")]),t._v("送往内核协议栈做层层协议处理。")]),t._v(" "),_("li",[t._v("在传输层"),_("code",[t._v("tcp_rcv 函数")]),t._v("中，去掉TCP头，根据"),_("code",[t._v("四元组（源IP，源端口，目的IP，目的端口）")]),t._v("查找对应的"),_("code",[t._v("Socket")]),t._v("。")]),t._v(" "),_("li",[t._v("最后将"),_("code",[t._v("sk_buffer")]),t._v("放到"),_("code",[t._v("Socket")]),t._v("中的接收队列里。")])]),t._v(" "),_("p",[t._v("上边这些过程是内核接收网络数据的完整过程，下边我们来看下，当数据包接收完毕后，用户进程是如何被唤醒的。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190928958.png",alt:"图片"}})]),t._v(" "),_("ul",[_("li",[_("p",[t._v("当软中断将"),_("code",[t._v("sk_buffer")]),t._v("放到"),_("code",[t._v("Socket")]),t._v("的接收队列上时，接着就会调用"),_("code",[t._v("数据就绪函数回调指针sk_data_ready")]),t._v("，前边我们提到，这个函数指针在初始化的时候指向了"),_("code",[t._v("sock_def_readable")]),t._v("函数。")])]),t._v(" "),_("li",[_("p",[t._v("在"),_("code",[t._v("sock_def_readable")]),t._v("函数中会去获取"),_("code",[t._v("socket->sock->sk_wq")]),t._v("等待队列。在"),_("code",[t._v("wake_up_common")]),t._v("函数中从等待队列"),_("code",[t._v("sk_wq")]),t._v("中找出"),_("code",[t._v("一个")]),t._v("等待项"),_("code",[t._v("wait_queue_t")]),t._v("，回调注册在该等待项上的"),_("code",[t._v("func")]),t._v("回调函数（"),_("code",[t._v("wait_queue_t->func")]),t._v("）,创建等待项"),_("code",[t._v("wait_queue_t")]),t._v("是我们提到，这里注册的回调函数是"),_("code",[t._v("autoremove_wake_function")]),t._v("。")])])]),t._v(" "),_("blockquote",[_("p",[t._v("即使是有多个进程都阻塞在同一个 socket 上，也只唤醒 1 个进程。其作用是为了避免惊群。")])]),t._v(" "),_("ul",[_("li",[t._v("在"),_("code",[t._v("autoremove_wake_function")]),t._v("函数中，根据等待项"),_("code",[t._v("wait_queue_t")]),t._v("上的"),_("code",[t._v("private")]),t._v("关联的"),_("code",[t._v("阻塞进程fd")]),t._v("调用"),_("code",[t._v("try_to_wake_up")]),t._v("唤醒阻塞在该"),_("code",[t._v("Socket")]),t._v("上的进程。")])]),t._v(" "),_("blockquote",[_("p",[t._v("记住"),_("code",[t._v("wait_queue_t")]),t._v("中的"),_("code",[t._v("func")]),t._v("函数指针，在"),_("code",[t._v("epoll")]),t._v("中这里会注册"),_("code",[t._v("epoll")]),t._v("的回调函数。")])]),t._v(" "),_("p",[t._v("现在理解"),_("code",[t._v("epoll")]),t._v("所需要的基础知识我们就介绍完了，唠叨了这么多，下面终于正式进入本小节的主题"),_("code",[t._v("epoll")]),t._v("了。")]),t._v(" "),_("h3",{attrs:{id:"epoll-create创建epoll对象"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#epoll-create创建epoll对象"}},[t._v("#")]),t._v(" epoll_create创建epoll对象")]),t._v(" "),_("p",[_("code",[t._v("epoll_create")]),t._v("是内核提供给我们创建"),_("code",[t._v("epoll")]),t._v("对象的一个系统调用，当我们在用户进程中调用"),_("code",[t._v("epoll_create")]),t._v("时，内核会为我们创建一个"),_("code",[t._v("struct eventpoll")]),t._v("对象，并且也有相应的"),_("code",[t._v("struct file")]),t._v("与之关联，同样需要把这个"),_("code",[t._v("struct eventpoll")]),t._v("对象所关联的"),_("code",[t._v("struct file")]),t._v("放入进程打开的文件列表"),_("code",[t._v("fd_array")]),t._v("中管理。")]),t._v(" "),_("blockquote",[_("p",[t._v("熟悉了"),_("code",[t._v("Socket")]),t._v("的创建逻辑，"),_("code",[t._v("epoll")]),t._v("的创建逻辑也就不难理解了。")])]),t._v(" "),_("blockquote",[_("p",[_("code",[t._v("struct eventpoll")]),t._v("对象关联的"),_("code",[t._v("struct file")]),t._v("中的"),_("code",[t._v("file_operations 指针")]),t._v("指向的是"),_("code",[t._v("eventpoll_fops")]),t._v("操作函数集合。")])]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("file_operations")]),t._v(" eventpoll_fops "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("release "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ep_eventpoll_release"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("poll "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ep_eventpoll_poll"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("p",[_("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190930088.png",alt:"图片"}})]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("eventpoll")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//等待队列，阻塞在epoll上的进程会放在这里")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("wait_queue_head_t")]),t._v(" wq"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//就绪队列，IO就绪的socket连接会放在这里")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("list_head")]),t._v(" rdllist"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//红黑树用来管理所有监听的socket连接")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("rb_root")]),t._v(" rbr"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("ul",[_("li",[_("code",[t._v("wait_queue_head_t wq：")]),t._v("epoll中的等待队列，队列里存放的是"),_("code",[t._v("阻塞")]),t._v("在"),_("code",[t._v("epoll")]),t._v("上的用户进程。在"),_("code",[t._v("IO就绪")]),t._v("的时候"),_("code",[t._v("epoll")]),t._v("可以通过这个队列找到这些"),_("code",[t._v("阻塞")]),t._v("的进程并唤醒它们，从而执行"),_("code",[t._v("IO调用")]),t._v("读写"),_("code",[t._v("Socket")]),t._v("上的数据。")])]),t._v(" "),_("blockquote",[_("p",[t._v("这里注意与"),_("code",[t._v("Socket")]),t._v("中的等待队列区分！！！")])]),t._v(" "),_("ul",[_("li",[_("code",[t._v("struct list_head rdllist：")]),t._v("epoll中的就绪队列，队列里存放的是都是"),_("code",[t._v("IO就绪")]),t._v("的"),_("code",[t._v("Socket")]),t._v("，被唤醒的用户进程可以直接读取这个队列获取"),_("code",[t._v("IO活跃")]),t._v("的"),_("code",[t._v("Socket")]),t._v("。无需再次遍历整个"),_("code",[t._v("Socket")]),t._v("集合。")])]),t._v(" "),_("blockquote",[_("p",[t._v("这里正是"),_("code",[t._v("epoll")]),t._v("比"),_("code",[t._v("select ，poll")]),t._v("高效之处，"),_("code",[t._v("select ，poll")]),t._v("返回的是全部的"),_("code",[t._v("socket")]),t._v("连接，我们需要在"),_("code",[t._v("用户空间")]),t._v("再次遍历找出真正"),_("code",[t._v("IO活跃")]),t._v("的"),_("code",[t._v("Socket")]),t._v("连接。而"),_("code",[t._v("epoll")]),t._v("只是返回"),_("code",[t._v("IO活跃")]),t._v("的"),_("code",[t._v("Socket")]),t._v("连接。用户进程可以直接进行IO操作。")])]),t._v(" "),_("ul",[_("li",[_("code",[t._v("struct rb_root rbr :")]),t._v(" 由于红黑树在"),_("code",[t._v("查找")]),t._v("，"),_("code",[t._v("插入")]),t._v("，"),_("code",[t._v("删除")]),t._v("等综合性能方面是最优的，所以epoll内部使用一颗红黑树来管理海量的"),_("code",[t._v("Socket")]),t._v("连接。")])]),t._v(" "),_("blockquote",[_("p",[_("code",[t._v("select")]),t._v("用"),_("code",[t._v("数组")]),t._v("管理连接，"),_("code",[t._v("poll")]),t._v("用"),_("code",[t._v("链表")]),t._v("管理连接。")])]),t._v(" "),_("h3",{attrs:{id:"epoll-ctl向epoll对象中添加监听的socket"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#epoll-ctl向epoll对象中添加监听的socket"}},[t._v("#")]),t._v(" epoll_ctl向epoll对象中添加监听的Socket")]),t._v(" "),_("p",[t._v("当我们调用"),_("code",[t._v("epoll_create")]),t._v("在内核中创建出"),_("code",[t._v("epoll")]),t._v("对象"),_("code",[t._v("struct eventpoll")]),t._v("后，我们就可以利用"),_("code",[t._v("epoll_ctl")]),t._v("向"),_("code",[t._v("epoll")]),t._v("中添加我们需要管理的"),_("code",[t._v("Socket")]),t._v("连接了。")]),t._v(" "),_("ol",[_("li",[t._v("首先要在epoll内核中创建一个表示"),_("code",[t._v("Socket连接")]),t._v("的数据结构"),_("code",[t._v("struct epitem")]),t._v("，而在"),_("code",[t._v("epoll")]),t._v("中为了综合性能的考虑，采用一颗红黑树来管理这些海量"),_("code",[t._v("socket连接")]),t._v("。所以"),_("code",[t._v("struct epitem")]),t._v("是一个红黑树节点。")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190932959.png",alt:"图片"}})]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epitem")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//指向所属epoll对象")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("eventpoll")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ep"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//注册的感兴趣的事件,也就是用户空间的epoll_event     ")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_event")]),t._v(" event"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//指向epoll对象中的就绪队列")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("list_head")]),t._v(" rdllink"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//指向epoll中对应的红黑树节点")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("rb_node")]),t._v(" rbn"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//指向epitem所表示的socket->file结构以及对应的fd")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epoll_filefd")]),t._v(" ffd"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                  \n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("blockquote",[_("p",[t._v("这里重点记住"),_("code",[t._v("struct epitem")]),t._v("结构中的"),_("code",[t._v("rdllink")]),t._v("以及"),_("code",[t._v("epoll_filefd")]),t._v("成员，后面我们会用到。")])]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[t._v("在内核中创建完表示"),_("code",[t._v("Socket连接")]),t._v("的数据结构"),_("code",[t._v("struct epitem")]),t._v("后，我们就需要在"),_("code",[t._v("Socket")]),t._v("中的等待队列上创建等待项"),_("code",[t._v("wait_queue_t")]),t._v("并且注册"),_("code",[t._v("epoll的回调函数ep_poll_callback")]),t._v("。")])]),t._v(" "),_("p",[t._v("通过"),_("code",[t._v("《阻塞IO中用户进程阻塞以及唤醒原理》")]),t._v("小节的铺垫，我想大家已经猜到这一步的意义所在了吧！当时在等待项"),_("code",[t._v("wait_queue_t")]),t._v("中注册的是"),_("code",[t._v("autoremove_wake_function")]),t._v("回调函数。还记得吗？")]),t._v(" "),_("blockquote",[_("p",[t._v("epoll的回调函数"),_("code",[t._v("ep_poll_callback")]),t._v("正是"),_("code",[t._v("epoll")]),t._v("同步IO事件通知机制的核心所在，也是区别于"),_("code",[t._v("select，poll")]),t._v("采用内核轮询方式的根本性能差异所在。")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190933396.png",alt:"图片"}})]),t._v(" "),_("p",[_("strong",[t._v("这里又出现了一个新的数据结构"),_("code",[t._v("struct eppoll_entry")]),t._v("，那它的作用是干什么的呢？大家可以结合上图先猜测下它的作用!")])]),t._v(" "),_("p",[t._v("我们知道"),_("code",[t._v("socket->sock->sk_wq")]),t._v("等待队列中的类型是"),_("code",[t._v("wait_queue_t")]),t._v("，我们需要在"),_("code",[t._v("struct epitem")]),t._v("所表示的"),_("code",[t._v("socket")]),t._v("的等待队列上注册"),_("code",[t._v("epoll")]),t._v("回调函数"),_("code",[t._v("ep_poll_callback")]),t._v("。")]),t._v(" "),_("p",[t._v("这样当数据到达"),_("code",[t._v("socket")]),t._v("中的接收队列时，内核会回调"),_("code",[t._v("sk_data_ready")]),t._v("，在"),_("code",[t._v("阻塞IO中用户进程阻塞以及唤醒原理")]),t._v("这一小节中，我们知道这个"),_("code",[t._v("sk_data_ready")]),t._v("函数指针会指向"),_("code",[t._v("sk_def_readable")]),t._v("函数，在"),_("code",[t._v("sk_def_readable")]),t._v("中会回调注册在等待队列里的等待项"),_("code",[t._v("wait_queue_t -> func")]),t._v("回调函数"),_("code",[t._v("ep_poll_callback")]),t._v("。"),_("strong",[t._v("在"),_("code",[t._v("ep_poll_callback")]),t._v("中需要找到"),_("code",[t._v("epitem")])]),t._v("，将"),_("code",[t._v("IO就绪")]),t._v("的"),_("code",[t._v("epitem")]),t._v("放入"),_("code",[t._v("epoll")]),t._v("中的就绪队列中。")]),t._v(" "),_("p",[t._v("而"),_("code",[t._v("socket")]),t._v("等待队列中类型是"),_("code",[t._v("wait_queue_t")]),t._v("无法关联到"),_("code",[t._v("epitem")]),t._v("。所以就出现了"),_("code",[t._v("struct eppoll_entry")]),t._v("结构体，它的作用就是关联"),_("code",[t._v("Socket")]),t._v("等待队列中的等待项"),_("code",[t._v("wait_queue_t")]),t._v("和"),_("code",[t._v("epitem")]),t._v("。")]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("eppoll_entry")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//指向关联的epitem")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("epitem")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("base"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 关联监听socket中等待队列中的等待项 (private = null  func = ep_poll_callback)")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("wait_queue_t")]),t._v(" wait"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n\n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听socket中等待队列头指针")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("wait_queue_head_t")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("whead"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),_("p",[t._v("这样在"),_("code",[t._v("ep_poll_callback")]),t._v("回调函数中就可以根据"),_("code",[t._v("Socket")]),t._v("等待队列中的等待项"),_("code",[t._v("wait")]),t._v("，通过"),_("code",[t._v("container_of宏")]),t._v("找到"),_("code",[t._v("eppoll_entry")]),t._v("，继而找到"),_("code",[t._v("epitem")]),t._v("了。")]),t._v(" "),_("blockquote",[_("p",[_("code",[t._v("container_of")]),t._v("在Linux内核中是一个常用的宏，用于从包含在某个结构中的指针获得结构本身的指针，通俗地讲就是通过结构体变量中某个成员的首地址进而获得整个结构体变量的首地址。")])]),t._v(" "),_("blockquote",[_("p",[t._v("这里需要注意下这次等待项"),_("code",[t._v("wait_queue_t")]),t._v("中的"),_("code",[t._v("private")]),t._v("设置的是"),_("code",[t._v("null")]),t._v("，因为这里"),_("code",[t._v("Socket")]),t._v("是交给"),_("code",[t._v("epoll")]),t._v("来管理的，阻塞在"),_("code",[t._v("Socket")]),t._v("上的进程是也由"),_("code",[t._v("epoll")]),t._v("来唤醒。在等待项"),_("code",[t._v("wait_queue_t")]),t._v("注册的"),_("code",[t._v("func")]),t._v("是"),_("code",[t._v("ep_poll_callback")]),t._v("而不是"),_("code",[t._v("autoremove_wake_function")]),t._v("，"),_("code",[t._v("阻塞进程")]),t._v("并不需要"),_("code",[t._v("autoremove_wake_function")]),t._v("来唤醒，所以这里设置"),_("code",[t._v("private")]),t._v("为"),_("code",[t._v("null")])])]),t._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[t._v("当在"),_("code",[t._v("Socket")]),t._v("的等待队列中创建好等待项"),_("code",[t._v("wait_queue_t")]),t._v("并且注册了"),_("code",[t._v("epoll")]),t._v("的回调函数"),_("code",[t._v("ep_poll_callback")]),t._v("，然后又通过"),_("code",[t._v("eppoll_entry")]),t._v("关联了"),_("code",[t._v("epitem")]),t._v("后。剩下要做的就是将"),_("code",[t._v("epitem")]),t._v("插入到"),_("code",[t._v("epoll")]),t._v("中的红黑树"),_("code",[t._v("struct rb_root rbr")]),t._v("中。")])]),t._v(" "),_("blockquote",[_("p",[t._v("这里可以看到"),_("code",[t._v("epoll")]),t._v("另一个优化的地方，"),_("code",[t._v("epoll")]),t._v("将所有的"),_("code",[t._v("socket")]),t._v("连接通过内核中的红黑树来集中管理。每次添加或者删除"),_("code",[t._v("socket连接")]),t._v("都是增量添加删除，而不是像"),_("code",[t._v("select，poll")]),t._v("那样每次调用都是全量"),_("code",[t._v("socket连接")]),t._v("集合传入内核。避免了"),_("code",[t._v("频繁大量")]),t._v("的"),_("code",[t._v("内存拷贝")]),t._v("。")])]),t._v(" "),_("h3",{attrs:{id:"epoll-wait同步阻塞获取io就绪的socket"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#epoll-wait同步阻塞获取io就绪的socket"}},[t._v("#")]),t._v(" epoll_wait同步阻塞获取IO就绪的Socket")]),t._v(" "),_("ol",[_("li",[t._v("用户程序调用"),_("code",[t._v("epoll_wait")]),t._v("后，内核首先会查找epoll中的就绪队列"),_("code",[t._v("eventpoll->rdllist")]),t._v("是否有"),_("code",[t._v("IO就绪")]),t._v("的"),_("code",[t._v("epitem")]),t._v("。"),_("code",[t._v("epitem")]),t._v("里封装了"),_("code",[t._v("socket")]),t._v("的信息。如果就绪队列中有就绪的"),_("code",[t._v("epitem")]),t._v("，就将"),_("code",[t._v("就绪的socket")]),t._v("信息封装到"),_("code",[t._v("epoll_event")]),t._v("返回。")]),t._v(" "),_("li",[t._v("如果"),_("code",[t._v("eventpoll->rdllist")]),t._v("就绪队列中没有"),_("code",[t._v("IO就绪")]),t._v("的"),_("code",[t._v("epitem")]),t._v("，则会创建等待项"),_("code",[t._v("wait_queue_t")]),t._v("，将用户进程的"),_("code",[t._v("fd")]),t._v("关联到"),_("code",[t._v("wait_queue_t->private")]),t._v("上，并在等待项"),_("code",[t._v("wait_queue_t->func")]),t._v("上注册回调函数"),_("code",[t._v("default_wake_function")]),t._v("。最后将等待项添加到"),_("code",[t._v("epoll")]),t._v("中的等待队列中。用户进程让出CPU，进入"),_("code",[t._v("阻塞状态")]),t._v("。")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190936059.png",alt:"图片"}})]),t._v(" "),_("blockquote",[_("p",[t._v("这里和"),_("code",[t._v("阻塞IO模型")]),t._v("中的阻塞原理是一样的，只不过在"),_("code",[t._v("阻塞IO模型")]),t._v("中注册到等待项"),_("code",[t._v("wait_queue_t->func")]),t._v("上的是"),_("code",[t._v("autoremove_wake_function")]),t._v("，并将等待项添加到"),_("code",[t._v("socket")]),t._v("中的等待队列中。这里注册的是"),_("code",[t._v("default_wake_function")]),t._v("，将等待项添加到"),_("code",[t._v("epoll")]),t._v("中的等待队列上。")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190936947.png",alt:"图片"}})]),t._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[_("strong",[t._v("前边做了那么多的知识铺垫，下面终于到了"),_("code",[t._v("epoll")]),t._v("的整个工作流程了：")])])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190936732.png",alt:"图片"}})]),t._v(" "),_("ul",[_("li",[t._v("当网络数据包在软中断中经过内核协议栈的处理到达"),_("code",[t._v("socket")]),t._v("的接收缓冲区时，紧接着会调用socket的数据就绪回调指针"),_("code",[t._v("sk_data_ready")]),t._v("，回调函数为"),_("code",[t._v("sock_def_readable")]),t._v("。在"),_("code",[t._v("socket")]),t._v("的等待队列中找出等待项，其中等待项中注册的回调函数为"),_("code",[t._v("ep_poll_callback")]),t._v("。")]),t._v(" "),_("li",[t._v("在回调函数"),_("code",[t._v("ep_poll_callback")]),t._v("中，根据"),_("code",[t._v("struct eppoll_entry")]),t._v("中的"),_("code",[t._v("struct wait_queue_t wait")]),t._v("通过"),_("code",[t._v("container_of宏")]),t._v("找到"),_("code",[t._v("eppoll_entry")]),t._v("对象并通过它的"),_("code",[t._v("base")]),t._v("指针找到封装"),_("code",[t._v("socket")]),t._v("的数据结构"),_("code",[t._v("struct epitem")]),t._v("，并将它加入到"),_("code",[t._v("epoll")]),t._v("中的就绪队列"),_("code",[t._v("rdllist")]),t._v("中。")]),t._v(" "),_("li",[t._v("随后查看"),_("code",[t._v("epoll")]),t._v("中的等待队列中是否有等待项，也就是说查看是否有进程阻塞在"),_("code",[t._v("epoll_wait")]),t._v("上等待"),_("code",[t._v("IO就绪")]),t._v("的"),_("code",[t._v("socket")]),t._v("。如果没有等待项，则软中断处理完成。")]),t._v(" "),_("li",[t._v("如果有等待项，则回到注册在等待项中的回调函数"),_("code",[t._v("default_wake_function")]),t._v(",在回调函数中唤醒"),_("code",[t._v("阻塞进程")]),t._v("，并将就绪队列"),_("code",[t._v("rdllist")]),t._v("中的"),_("code",[t._v("epitem")]),t._v("的"),_("code",[t._v("IO就绪")]),t._v("socket信息封装到"),_("code",[t._v("struct epoll_event")]),t._v("中返回。")]),t._v(" "),_("li",[t._v("用户进程拿到"),_("code",[t._v("epoll_event")]),t._v("获取"),_("code",[t._v("IO就绪")]),t._v("的socket，发起系统IO调用读取数据。")])]),t._v(" "),_("h3",{attrs:{id:"再谈水平触发和边缘触发"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#再谈水平触发和边缘触发"}},[t._v("#")]),t._v(" 再谈水平触发和边缘触发")]),t._v(" "),_("p",[t._v("网上有大量的关于这两种模式的讲解，大部分讲的比较模糊，感觉只是强行从概念上进行描述，看完让人难以理解。所以在这里，笔者想结合上边"),_("code",[t._v("epoll")]),t._v("的工作过程，再次对这两种模式做下自己的解读，力求清晰的解释出这两种工作模式的异同。")]),t._v(" "),_("p",[t._v("经过上边对"),_("code",[t._v("epoll")]),t._v("工作过程的详细解读，我们知道，当我们监听的"),_("code",[t._v("socket")]),t._v("上有数据到来时，软中断会执行"),_("code",[t._v("epoll")]),t._v("的回调函数"),_("code",[t._v("ep_poll_callback")]),t._v(",在回调函数中会将"),_("code",[t._v("epoll")]),t._v("中描述"),_("code",[t._v("socket信息")]),t._v("的数据结构"),_("code",[t._v("epitem")]),t._v("插入到"),_("code",[t._v("epoll")]),t._v("中的就绪队列"),_("code",[t._v("rdllist")]),t._v("中。随后用户进程从"),_("code",[t._v("epoll")]),t._v("的等待队列中被唤醒，"),_("code",[t._v("epoll_wait")]),t._v("将"),_("code",[t._v("IO就绪")]),t._v("的"),_("code",[t._v("socket")]),t._v("返回给用户进程，随即"),_("code",[t._v("epoll_wait")]),t._v("会清空"),_("code",[t._v("rdllist")]),t._v("。")]),t._v(" "),_("p",[_("strong",[t._v("水平触发")]),t._v("和"),_("strong",[t._v("边缘触发")]),t._v("最关键的"),_("strong",[t._v("区别")]),t._v("就在于当"),_("code",[t._v("socket")]),t._v("中的接收缓冲区还有数据可读时。"),_("strong",[_("code",[t._v("epoll_wait")]),t._v("是否会清空"),_("code",[t._v("rdllist")]),t._v("。")])]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("水平触发")]),t._v("：在这种模式下，用户线程调用"),_("code",[t._v("epoll_wait")]),t._v("获取到"),_("code",[t._v("IO就绪")]),t._v("的socket后，对"),_("code",[t._v("Socket")]),t._v("进行系统IO调用读取数据，假设"),_("code",[t._v("socket")]),t._v("中的数据只读了一部分没有全部读完，这时再次调用"),_("code",[t._v("epoll_wait")]),t._v("，"),_("code",[t._v("epoll_wait")]),t._v("会检查这些"),_("code",[t._v("Socket")]),t._v("中的接收缓冲区是否还有数据可读，如果还有数据可读，就将"),_("code",[t._v("socket")]),t._v("重新放回"),_("code",[t._v("rdllist")]),t._v("。所以当"),_("code",[t._v("socket")]),t._v("上的IO没有被处理完时，再次调用"),_("code",[t._v("epoll_wait")]),t._v("依然可以获得这些"),_("code",[t._v("socket")]),t._v("，用户进程可以接着处理"),_("code",[t._v("socket")]),t._v("上的IO事件。")]),t._v(" "),_("li",[_("strong",[t._v("边缘触发：")]),t._v(" 在这种模式下，"),_("code",[t._v("epoll_wait")]),t._v("就会直接清空"),_("code",[t._v("rdllist")]),t._v("，不管"),_("code",[t._v("socket")]),t._v("上是否还有数据可读。所以在边缘触发模式下，当你没有来得及处理"),_("code",[t._v("socket")]),t._v("接收缓冲区的剩下可读数据时，再次调用"),_("code",[t._v("epoll_wait")]),t._v("，因为这时"),_("code",[t._v("rdlist")]),t._v("已经被清空了，"),_("code",[t._v("socket")]),t._v("不会再次从"),_("code",[t._v("epoll_wait")]),t._v("中返回，所以用户进程就不会再次获得这个"),_("code",[t._v("socket")]),t._v("了，也就无法在对它进行IO处理了。"),_("strong",[t._v("除非，这个"),_("code",[t._v("socket")]),t._v("上有新的IO数据到达")]),t._v("，根据"),_("code",[t._v("epoll")]),t._v("的工作过程，该"),_("code",[t._v("socket")]),t._v("会被再次放入"),_("code",[t._v("rdllist")]),t._v("中。")])]),t._v(" "),_("blockquote",[_("p",[t._v("如果你在"),_("code",[t._v("边缘触发模式")]),t._v("下，处理了部分"),_("code",[t._v("socket")]),t._v("上的数据，那么想要处理剩下部分的数据，就只能等到这个"),_("code",[t._v("socket")]),t._v("上再次有网络数据到达。")])]),t._v(" "),_("p",[t._v("在"),_("code",[t._v("Netty")]),t._v("中实现的"),_("code",[t._v("EpollSocketChannel")]),t._v("默认的就是"),_("code",[t._v("边缘触发")]),t._v("模式。"),_("code",[t._v("JDK")]),t._v("的"),_("code",[t._v("NIO")]),t._v("默认是"),_("code",[t._v("水平触发")]),t._v("模式。")]),t._v(" "),_("h3",{attrs:{id:"epoll对select-poll的优化总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#epoll对select-poll的优化总结"}},[t._v("#")]),t._v(" epoll对select，poll的优化总结")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("epoll")]),t._v("在内核中通过"),_("code",[t._v("红黑树")]),t._v("管理海量的连接，所以在调用"),_("code",[t._v("epoll_wait")]),t._v("获取"),_("code",[t._v("IO就绪")]),t._v("的socket时，不需要传入监听的socket文件描述符。从而避免了海量的文件描述符集合在"),_("code",[t._v("用户空间")]),t._v("和"),_("code",[t._v("内核空间")]),t._v("中来回复制。")])]),t._v(" "),_("blockquote",[_("p",[_("code",[t._v("select，poll")]),t._v("每次调用时都需要传递全量的文件描述符集合，导致大量频繁的拷贝操作。")])]),t._v(" "),_("ul",[_("li",[_("code",[t._v("epoll")]),t._v("仅会通知"),_("code",[t._v("IO就绪")]),t._v("的socket。避免了在用户空间遍历的开销。")])]),t._v(" "),_("blockquote",[_("p",[_("code",[t._v("select，poll")]),t._v("只会在"),_("code",[t._v("IO就绪")]),t._v("的socket上打好标记，依然是全量返回，所以在用户空间还需要用户程序在一次遍历全量集合找出具体"),_("code",[t._v("IO就绪")]),t._v("的socket。")])]),t._v(" "),_("ul",[_("li",[_("code",[t._v("epoll")]),t._v("通过在"),_("code",[t._v("socket")]),t._v("的等待队列上注册回调函数"),_("code",[t._v("ep_poll_callback")]),t._v("通知用户程序"),_("code",[t._v("IO就绪")]),t._v("的socket。避免了在内核中轮询的开销。")])]),t._v(" "),_("blockquote",[_("p",[t._v("大部分情况下"),_("code",[t._v("socket")]),t._v("上并不总是"),_("code",[t._v("IO活跃")]),t._v("的，在面对海量连接的情况下，"),_("code",[t._v("select，poll")]),t._v("采用内核轮询的方式获取"),_("code",[t._v("IO活跃")]),t._v("的socket，无疑是性能低下的核心原因。")])]),t._v(" "),_("p",[t._v("根据以上"),_("code",[t._v("epoll")]),t._v("的性能优势，它是目前为止各大主流网络框架，以及反向代理中间件使用到的网络IO模型。")]),t._v(" "),_("p",[t._v("利用"),_("code",[t._v("epoll")]),t._v("多路复用IO模型可以轻松的解决"),_("code",[t._v("C10K")]),t._v("问题。")]),t._v(" "),_("p",[_("code",[t._v("C100k")]),t._v("的解决方案也还是基于"),_("code",[t._v("C10K")]),t._v("的方案，通过"),_("code",[t._v("epoll")]),t._v(" 配合线程池，再加上 CPU、内存和网络接口的性能和容量提升。大部分情况下，"),_("code",[t._v("C100K")]),t._v("很自然就可以达到。")]),t._v(" "),_("p",[t._v("甚至"),_("code",[t._v("C1000K")]),t._v("的解决方法，本质上还是构建在 "),_("code",[t._v("epoll")]),t._v(" 的"),_("code",[t._v("多路复用 I/O 模型")]),t._v("上。只不过，除了 I/O 模型之外，还需要从应用程序到 Linux 内核、再到 CPU、内存和网络等各个层次的深度优化，特别是需要借助硬件，来卸载那些原来通过软件处理的大量功能（"),_("code",[t._v("去掉大量的中断响应开销")]),t._v("，"),_("code",[t._v("以及内核协议栈处理的开销")]),t._v("）。")])])}),[],!1,null,null,null);_.default=s.exports}}]);