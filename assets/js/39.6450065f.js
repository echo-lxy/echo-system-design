(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{376:function(s,t,e){"use strict";e.r(t);var v=e(4),a=Object(v.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),t("p",[s._v("以今天和大家一起学习个底层技术点-"),t("strong",[s._v("零拷贝Zero-Copy")]),s._v("。")]),s._v(" "),t("p",[s._v("Linux系统中一切皆文件，仔细想一下Linux系统的很多活动无外乎"),t("strong",[s._v("读操作")]),s._v("和"),t("strong",[s._v("写操作")]),s._v("，零拷贝就是为了提高读写性能而出现的。")]),s._v(" "),t("p",[s._v("废话不多说，马上开大车，走起！")]),s._v(" "),t("h2",{attrs:{id:"数据拷贝基础过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据拷贝基础过程"}},[s._v("#")]),s._v(" 数据拷贝基础过程")]),s._v(" "),t("p",[s._v("在Linux系统内部缓存和内存容量都是有限的，更多的数据都是存储在磁盘中。对于Web服务器来说，经常需要从磁盘中读取数据到内存，然后再通过网卡传输给用户：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409200228415.webp",alt:"图片"}})]),s._v(" "),t("p",[s._v("上述数据流转只是大框，接下来看看几种模式。")]),s._v(" "),t("h3",{attrs:{id:"仅cpu方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#仅cpu方式"}},[s._v("#")]),s._v(" 仅CPU方式")]),s._v(" "),t("ul",[t("li",[s._v("当应用程序需要读取磁盘数据时，调用read()从用户态陷入内核态，read()这个系统调用最终由CPU来完成；")]),s._v(" "),t("li",[s._v("CPU向磁盘发起I/O请求，磁盘收到之后开始准备数据；")]),s._v(" "),t("li",[s._v("磁盘将数据放到磁盘缓冲区之后，向CPU发起I/O中断，报告CPU数据已经Ready了；")]),s._v(" "),t("li",[s._v("CPU收到磁盘控制器的I/O中断之后，开始拷贝数据，完成之后read()返回，再从内核态切换到用户态；")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409200230510.webp",alt:"图片"}})]),s._v(" "),t("h3",{attrs:{id:"cpu-dma方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cpu-dma方式"}},[s._v("#")]),s._v(" CPU & DMA方式")]),s._v(" "),t("p",[s._v("CPU的时间宝贵，让它做杂活就是浪费资源。")]),s._v(" "),t("p",[s._v("直接内存访问（Direct Memory Access），是一种硬件设备绕开CPU独立直接访问内存的机制。所以DMA在一定程度上解放了CPU，把之前CPU的杂活让硬件直接自己做了，提高了CPU效率。")]),s._v(" "),t("p",[s._v("目前支持DMA的硬件包括：网卡、声卡、显卡、磁盘控制器等。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409200228433.webp",alt:"图片"}})]),s._v(" "),t("p",[s._v("有了DMA的参与之后的流程发生了一些变化：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409200230327.webp",alt:"图片"}})]),s._v(" "),t("p",[s._v("最主要的变化是，CPU不再和磁盘直接交互，而是DMA和磁盘交互并且将数据从磁盘缓冲区拷贝到内核缓冲区，之后的过程类似。")]),s._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),t("p",[s._v("无论从仅 CPU 方式和 DMA&CPU 方式，都存在 多次冗余数据拷贝 和 内核态&用户态 的切换。")])]),s._v(" "),t("p",[s._v("我们继续思考 Web 服务器读取本地磁盘文件数据再通过网络传输给用户的详细过程。")]),s._v(" "),t("h2",{attrs:{id:"普通模式数据交互"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#普通模式数据交互"}},[s._v("#")]),s._v(" 普通模式数据交互")]),s._v(" "),t("p",[s._v("一次完成的数据交互包括几个部分：系统调用syscall、CPU、DMA、网卡、磁盘等。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409200230120.webp",alt:"图片"}})]),s._v(" "),t("p",[s._v("系统调用syscall是应用程序和内核交互的桥梁，每次进行调用/返回就会产生两次切换：")]),s._v(" "),t("ul",[t("li",[s._v("调用syscall 从用户态切换到内核态")]),s._v(" "),t("li",[s._v("syscall返回 从内核态切换到用户态")])]),s._v(" "),t("p",[s._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)")]),s._v(" "),t("p",[s._v("来看下完整的数据拷贝过程简图：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409200229112.webp",alt:"图片"}})]),s._v(" "),t("p",[t("strong",[s._v("读数据过程：")])]),s._v(" "),t("ul",[t("li",[s._v("应用程序要读取磁盘数据，调用read()函数从而实现用户态切换内核态，这是第1次状态切换；")]),s._v(" "),t("li",[s._v("DMA控制器将数据从磁盘拷贝到内核缓冲区，这是第1次DMA拷贝；")]),s._v(" "),t("li",[s._v("CPU将数据从内核缓冲区复制到用户缓冲区，这是第1次CPU拷贝；")]),s._v(" "),t("li",[s._v("CPU完成拷贝之后，read()函数返回实现用户态切换用户态，这是第2次状态切换；")])]),s._v(" "),t("p",[t("strong",[s._v("写数据过程：")])]),s._v(" "),t("ul",[t("li",[s._v("应用程序要向网卡写数据，调用write()函数实现用户态切换内核态，这是第1次切换；")]),s._v(" "),t("li",[s._v("CPU将用户缓冲区数据拷贝到内核缓冲区，这是第1次CPU拷贝；")]),s._v(" "),t("li",[s._v("DMA控制器将数据从内核缓冲区复制到socket缓冲区，这是第1次DMA拷贝；")]),s._v(" "),t("li",[s._v("完成拷贝之后，write()函数返回实现内核态切换用户态，这是第2次切换；")])]),s._v(" "),t("p",[t("strong",[s._v("综上所述：")])]),s._v(" "),t("ul",[t("li",[s._v("读过程涉及2次空间切换、1次DMA拷贝、1次CPU拷贝；")]),s._v(" "),t("li",[s._v("写过程涉及2次空间切换、1次DMA拷贝、1次CPU拷贝；")])]),s._v(" "),t("p",[s._v("可见传统模式下，涉及多次空间切换和数据冗余拷贝，效率并不高，接下来就该零拷贝技术出场了。")]),s._v(" "),t("h2",{attrs:{id:"零拷贝技术"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#零拷贝技术"}},[s._v("#")]),s._v(" 零拷贝技术")]),s._v(" "),t("h3",{attrs:{id:"出现原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#出现原因"}},[s._v("#")]),s._v(" 出现原因")]),s._v(" "),t("p",[s._v("我们可以看到，"),t("strong",[s._v("如果应用程序不对数据做修改")]),s._v("，从内核缓冲区到用户缓冲区，再从用户缓冲区到内核缓冲区。两次数据拷贝都需要CPU的参与，并且涉及用户态与内核态的多次切换，加重了CPU负担。")]),s._v(" "),t("p",[s._v("我们需要降低冗余数据拷贝、解放CPU，这也就是零拷贝Zero-Copy技术。")]),s._v(" "),t("h3",{attrs:{id:"解决思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决思路"}},[s._v("#")]),s._v(" 解决思路")]),s._v(" "),t("p",[s._v("目前来看，零拷贝技术的几个实现手段包括：mmap+write、sendfile、sendfile+DMA收集、splice等。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409200229712.webp",alt:"图片"}})]),s._v(" "),t("h4",{attrs:{id:"mmap方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mmap方式"}},[s._v("#")]),s._v(" mmap方式")]),s._v(" "),t("p",[s._v("mmap是Linux提供的一种内存映射文件的机制，它实现了将内核中读缓冲区地址与用户空间缓冲区地址进行映射，从而实现内核缓冲区与用户缓冲区的共享。")]),s._v(" "),t("p",[s._v("这样就减少了一次用户态和内核态的CPU拷贝，但是在内核空间内仍然有一次CPU拷贝。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409200229234.webp",alt:"图片"}})]),s._v(" "),t("p",[s._v("mmap 对大文件传输有一定优势，但是小文件可能出现碎片，并且在多个进程同时操作文件时可能产生引发coredump的signal。")]),s._v(" "),t("h4",{attrs:{id:"sendfile方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sendfile方式"}},[s._v("#")]),s._v(" sendfile方式")]),s._v(" "),t("p",[s._v("mmap+write方式有一定改进，但是由系统调用引起的状态切换并没有减少。")]),s._v(" "),t("p",[s._v("sendfile系统调用是在 Linux 内核2.1版本中被引入，它建立了两个文件之间的传输通道。")]),s._v(" "),t("p",[s._v("sendfile方式只使用一个函数就可以完成之前的read+write 和 mmap+write的功能，这样就少了2次状态切换，由于数据不经过用户缓冲区，因此该数据无法被修改。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409200229226.webp",alt:"图片"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409200229713.webp",alt:"图片"}})]),s._v(" "),t("p",[s._v("从图中可以看到，应用程序只需要调用sendfile函数即可完成，只有2次状态切换、1次CPU拷贝、2次DMA拷贝。")]),s._v(" "),t("p",[s._v("但是sendfile在内核缓冲区和socket缓冲区仍然存在一次CPU拷贝，或许这个还可以优化。")]),s._v(" "),t("h4",{attrs:{id:"sendfile-dma-收集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sendfile-dma-收集"}},[s._v("#")]),s._v(" sendfile+DMA 收集")]),s._v(" "),t("p",[s._v("Linux 2.4 内核对 sendfile 系统调用进行优化，但是需要硬件DMA控制器的配合。")]),s._v(" "),t("p",[s._v("升级后的sendfile将内核空间缓冲区中对应的数据描述信息（文件描述符、地址偏移量等信息）记录到socket缓冲区中。")]),s._v(" "),t("p",[s._v("DMA控制器根据socket缓冲区中的地址和偏移量将数据从内核缓冲区拷贝到网卡中，从而省去了内核空间中仅剩1次CPU拷贝。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409200229996.webp",alt:"图片"}})]),s._v(" "),t("p",[s._v("这种方式有2次状态切换、0次CPU拷贝、2次DMA拷贝，但是仍然无法对数据进行修改，并且需要硬件层面DMA的支持，并且sendfile只能将文件数据拷贝到socket描述符上，有一定的局限性。")]),s._v(" "),t("h4",{attrs:{id:"splice方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#splice方式"}},[s._v("#")]),s._v(" splice方式")]),s._v(" "),t("p",[s._v("splice系统调用是Linux 在 2.6 版本引入的，其不需要硬件支持，并且不再限定于socket上，实现两个普通文件之间的数据零拷贝。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409200229697.webp",alt:"图片"}})]),s._v(" "),t("p",[s._v("splice 系统调用可以在内核缓冲区和socket缓冲区之间建立管道来传输数据，避免了两者之间的 CPU 拷贝操作。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409200230152.webp",alt:"图片"}})]),s._v(" "),t("p",[s._v("splice也有一些局限，它的两个文件描述符参数中有一个必须是管道设备。")]),s._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("本文通过介绍数据交互的基本过程、传统模式的缺点，进而介绍了零拷贝的一些实现方法。")]),s._v(" "),t("p",[s._v("零拷贝技术是非常底层且重要的读写优化，对于服务并发能力的提升有很大帮助。")]),s._v(" "),t("h2",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s/cudK2dhw4jNr7I34luVKVw",target:"_blank",rel:"noopener noreferrer"}},[s._v("终于有人把零拷贝Zero-Copy讲懂了 (qq.com)"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=a.exports}}]);