(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{388:function(_,v,e){"use strict";e.r(v);var o=e(4),c=Object(o.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"前言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[_._v("#")]),_._v(" 前言")]),_._v(" "),v("p",[_._v("从今天开始我们来聊聊Netty的那些事儿，我们都知道Netty是一个高性能异步事件驱动的网络框架。")]),_._v(" "),v("p",[_._v("它的设计异常优雅简洁，扩展性高，稳定性强。拥有非常详细完整的用户文档。")]),_._v(" "),v("p",[_._v("同时内置了很多非常有用的模块基本上做到了开箱即用，用户只需要编写短短几行代码，就可以快速构建出一个具有"),v("code",[_._v("高吞吐")]),_._v("，"),v("code",[_._v("低延时")]),_._v("，"),v("code",[_._v("更少的资源消耗")]),_._v("，"),v("code",[_._v("高性能（非必要的内存拷贝最小化）")]),_._v("等特征的高并发网络应用程序。")]),_._v(" "),v("p",[_._v("本文我们来探讨下支持Netty具有"),v("code",[_._v("高吞吐")]),_._v("，"),v("code",[_._v("低延时")]),_._v("特征的基石----netty的"),v("code",[_._v("网络IO模型")]),_._v("。")]),_._v(" "),v("p",[_._v("由Netty的"),v("code",[_._v("网络IO模型")]),_._v("开始，我们来正式揭开本系列Netty源码解析的序幕：")]),_._v(" "),v("h2",{attrs:{id:"网络包接收流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#网络包接收流程"}},[_._v("#")]),_._v(" 网络包接收流程")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190852001.png",alt:"image-20240919085201703"}})]),_._v(" "),v("ul",[v("li",[_._v("当"),v("code",[_._v("网络数据帧")]),_._v("通过网络传输到达网卡时，网卡会将网络数据帧通过"),v("code",[_._v("DMA的方式")]),_._v("放到"),v("code",[_._v("环形缓冲区RingBuffer")]),_._v("中")])]),_._v(" "),v("div",{staticClass:"custom-block note"},[v("p",{staticClass:"custom-block-title"},[_._v("笔记")]),_._v(" "),v("p",[v("code",[_._v("RingBuffer")]),_._v("是网卡在启动的时候"),v("code",[_._v("分配和初始化")]),_._v("的"),v("code",[_._v("环形缓冲队列")]),_._v("。当"),v("code",[_._v("RingBuffer满")]),_._v("的时候，新来的数据包就会被"),v("code",[_._v("丢弃")]),_._v("。我们可以通过"),v("code",[_._v("ifconfig")]),_._v("命令查看网卡收发数据包的情况。其中"),v("code",[_._v("overruns")]),_._v("数据项表示当"),v("code",[_._v("RingBuffer满")]),_._v("时，被"),v("code",[_._v("丢弃的数据包")]),_._v("。如果发现出现丢包情况，可以通过"),v("code",[_._v("ethtool命令")]),_._v("来增大RingBuffer长度。")])]),_._v(" "),v("ul",[v("li",[_._v("当"),v("code",[_._v("DMA操作完成")]),_._v("时，网卡会向CPU发起一个"),v("code",[_._v("硬中断")]),_._v("，告诉"),v("code",[_._v("CPU")]),_._v("有网络数据到达。CPU调用网卡驱动注册的"),v("code",[_._v("硬中断响应程序")]),_._v("。网卡硬中断响应程序会为网络数据帧创建内核数据结构"),v("code",[_._v("sk_buffer")]),_._v("，并将网络数据帧"),v("code",[_._v("拷贝")]),_._v("到"),v("code",[_._v("sk_buffer")]),_._v("中。然后发起"),v("code",[_._v("软中断请求")]),_._v("，通知"),v("code",[_._v("内核")]),_._v("有新的网络数据帧到达。")])]),_._v(" "),v("div",{staticClass:"custom-block note"},[v("p",{staticClass:"custom-block-title"},[_._v("笔记")]),_._v(" "),v("p",[v("code",[_._v("sk_buff")]),_._v("缓冲区，是一个维护网络帧结构的"),v("code",[_._v("双向链表")]),_._v("，链表中的每一个元素都是一个"),v("code",[_._v("网络帧")]),_._v("。虽然 TCP/IP 协议栈分了好几层，但上下不同层之间的传递，实际上只需要操作这个数据结构中的指针，而"),v("code",[_._v("无需进行数据复制")]),_._v("。")])]),_._v(" "),v("ul",[v("li",[_._v("内核线程"),v("code",[_._v("ksoftirqd")]),_._v("发现有软中断请求到来，随后调用网卡驱动注册的"),v("code",[_._v("poll函数")]),_._v("，"),v("code",[_._v("poll函数")]),_._v("将"),v("code",[_._v("sk_buffer")]),_._v("中的"),v("code",[_._v("网络数据包")]),_._v("送到内核协议栈中注册的"),v("code",[_._v("ip_rcv函数")]),_._v("中。")])]),_._v(" "),v("div",{staticClass:"custom-block note"},[v("p",{staticClass:"custom-block-title"},[_._v("笔记")]),_._v(" "),v("p",[v("code",[_._v("每个CPU")]),_._v("会绑定"),v("code",[_._v("一个ksoftirqd")]),_._v("内核线程"),v("code",[_._v("专门")]),_._v("用来处理"),v("code",[_._v("软中断响应")]),_._v("。2个 CPU 时，就会有 "),v("code",[_._v("ksoftirqd/0")]),_._v(" 和 "),v("code",[_._v("ksoftirqd/1")]),_._v("这两个内核线程。")])]),_._v(" "),v("div",{staticClass:"custom-block note"},[v("p",{staticClass:"custom-block-title"},[_._v("笔记")]),_._v(" "),v("p",[v("strong",[_._v("这里有个事情需要注意下：")]),_._v(" 网卡接收到数据后，当"),v("code",[_._v("DMA拷贝完成")]),_._v("时，向CPU发出"),v("code",[_._v("硬中断")]),_._v("，这时"),v("code",[_._v("哪个CPU")]),_._v("上响应了这个"),v("code",[_._v("硬中断")]),_._v("，那么在网卡"),v("code",[_._v("硬中断响应程序")]),_._v("中发出的"),v("code",[_._v("软中断请求")]),_._v("也会在"),v("code",[_._v("这个CPU绑定的ksoftirqd线程")]),_._v("中响应。所以如果发现Linux软中断，CPU消耗都"),v("code",[_._v("集中在一个核上")]),_._v("的话，那么就需要调整硬中断的"),v("code",[_._v("CPU亲和性")]),_._v("，来将硬中断"),v("code",[_._v("打散")]),_._v("到"),v("code",[_._v("不通的CPU核")]),_._v("上去。")])]),_._v(" "),v("ul",[v("li",[_._v("在"),v("code",[_._v("ip_rcv函数")]),_._v("中也就是上图中的"),v("code",[_._v("网络层")]),_._v("，"),v("code",[_._v("取出")]),_._v("数据包的"),v("code",[_._v("IP头")]),_._v("，判断该数据包下一跳的走向，如果数据包是发送给本机的，则取出传输层的协议类型（"),v("code",[_._v("TCP")]),_._v("或者"),v("code",[_._v("UDP")]),_._v(")，并"),v("code",[_._v("去掉")]),_._v("数据包的"),v("code",[_._v("IP头")]),_._v("，将数据包交给上图中得"),v("code",[_._v("传输层")]),_._v("处理。")])]),_._v(" "),v("div",{staticClass:"custom-block note"},[v("p",{staticClass:"custom-block-title"},[_._v("笔记")]),_._v(" "),v("p",[_._v("传输层的处理函数："),v("code",[_._v("TCP协议")]),_._v("对应内核协议栈中注册的"),v("code",[_._v("tcp_rcv函数")]),_._v("，"),v("code",[_._v("UDP协议")]),_._v("对应内核协议栈中注册的"),v("code",[_._v("udp_rcv函数")]),_._v("。")])]),_._v(" "),v("ul",[v("li",[_._v("当我们采用的是"),v("code",[_._v("TCP协议")]),_._v("时，数据包到达传输层时，会在内核协议栈中的"),v("code",[_._v("tcp_rcv函数")]),_._v("处理，在tcp_rcv函数中"),v("code",[_._v("去掉")]),_._v("TCP头，根据"),v("code",[_._v("四元组（源IP，源端口，目的IP，目的端口）")]),_._v("查找"),v("code",[_._v("对应的Socket")]),_._v("，如果找到对应的Socket则将网络数据包中的传输数据拷贝到"),v("code",[_._v("Socket")]),_._v("中的"),v("code",[_._v("接收缓冲区")]),_._v("中。如果没有找到，则发送一个"),v("code",[_._v("目标不可达")]),_._v("的"),v("code",[_._v("icmp")]),_._v("包。")])]),_._v(" "),v("p",[_._v("内核在接收网络数据包时所做的工作我们就介绍完了，现在我们把视角放到应用层，当我们程序通过系统调用"),v("code",[_._v("read")]),_._v("读取"),v("code",[_._v("Socket接收缓冲区")]),_._v("中的数据时，如果接收缓冲区中"),v("code",[_._v("没有数据")]),_._v("，那么应用程序就会在系统调用上"),v("code",[_._v("阻塞")]),_._v("，直到Socket接收缓冲区"),v("code",[_._v("有数据")]),_._v("，然后"),v("code",[_._v("CPU")]),_._v("将"),v("code",[_._v("内核空间")]),_._v("（Socket接收缓冲区）的数据"),v("code",[_._v("拷贝")]),_._v("到"),v("code",[_._v("用户空间")]),_._v("，最后系统调用"),v("code",[_._v("read返回")]),_._v("，应用程序"),v("code",[_._v("读取")]),_._v("数据")]),_._v(" "),v("h3",{attrs:{id:"性能开销"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#性能开销"}},[_._v("#")]),_._v(" 性能开销")]),_._v(" "),v("p",[_._v("从内核处理网络数据包接收的整个过程来看，内核帮我们做了非常之多的工作，最终我们的应用程序才能读取到网络数据。")]),_._v(" "),v("p",[_._v("随着而来的也带来了很多的性能开销，结合前面介绍的网络数据包接收过程我们来看下网络数据包接收的过程中都有哪些性能开销：")]),_._v(" "),v("ul",[v("li",[_._v("应用程序通过"),v("code",[_._v("系统调用")]),_._v("从"),v("code",[_._v("用户态")]),_._v("转为"),v("code",[_._v("内核态")]),_._v("的开销以及系统调用"),v("code",[_._v("返回")]),_._v("时从"),v("code",[_._v("内核态")]),_._v("转为"),v("code",[_._v("用户态")]),_._v("的开销。")]),_._v(" "),v("li",[_._v("网络数据从"),v("code",[_._v("内核空间")]),_._v("通过"),v("code",[_._v("CPU拷贝")]),_._v("到"),v("code",[_._v("用户空间")]),_._v("的开销。")]),_._v(" "),v("li",[_._v("内核线程"),v("code",[_._v("ksoftirqd")]),_._v("响应"),v("code",[_._v("软中断")]),_._v("的开销。")]),_._v(" "),v("li",[v("code",[_._v("CPU")]),_._v("响应"),v("code",[_._v("硬中断")]),_._v("的开销。")]),_._v(" "),v("li",[v("code",[_._v("DMA拷贝")]),_._v("网络数据包到"),v("code",[_._v("内存")]),_._v("中的开销。")])]),_._v(" "),v("h2",{attrs:{id:"网络包发送流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#网络包发送流程"}},[_._v("#")]),_._v(" 网络包发送流程")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190856740.png",alt:"图片"}})]),_._v(" "),v("ul",[v("li",[_._v("当我们在应用程序中调用"),v("code",[_._v("send")]),_._v("系统调用发送数据时，由于是系统调用所以线程会发生一次用户态到内核态的转换，在内核中首先根据"),v("code",[_._v("fd")]),_._v("将真正的Socket找出，这个Socket对象中记录着各种协议栈的函数地址，然后构造"),v("code",[_._v("struct msghdr")]),_._v("对象，将用户需要发送的数据全部封装在这个"),v("code",[_._v("struct msghdr")]),_._v("结构体中。")]),_._v(" "),v("li",[_._v("调用内核协议栈函数"),v("code",[_._v("inet_sendmsg")]),_._v("，发送流程进入内核协议栈处理。在进入到内核协议栈之后，内核会找到Socket上的具体协议的发送函数。")])]),_._v(" "),v("blockquote",[v("p",[_._v("比如：我们使用的是"),v("code",[_._v("TCP协议")]),_._v("，对应的"),v("code",[_._v("TCP协议")]),_._v("发送函数是"),v("code",[_._v("tcp_sendmsg")]),_._v("，如果是"),v("code",[_._v("UDP协议")]),_._v("的话，对应的发送函数为"),v("code",[_._v("udp_sendmsg")]),_._v("。")])]),_._v(" "),v("ul",[v("li",[_._v("在"),v("code",[_._v("TCP协议")]),_._v("的发送函数"),v("code",[_._v("tcp_sendmsg")]),_._v("中，创建内核数据结构"),v("code",[_._v("sk_buffer")]),_._v(",将"),v("code",[_._v("struct msghdr")]),_._v("结构体中的发送数据"),v("code",[_._v("拷贝")]),_._v("到"),v("code",[_._v("sk_buffer")]),_._v("中。调用"),v("code",[_._v("tcp_write_queue_tail")]),_._v("函数获取"),v("code",[_._v("Socket")]),_._v("发送队列中的队尾元素，将新创建的"),v("code",[_._v("sk_buffer")]),_._v("添加到"),v("code",[_._v("Socket")]),_._v("发送队列的尾部。")])]),_._v(" "),v("blockquote",[v("p",[v("code",[_._v("Socket")]),_._v("的发送队列是由"),v("code",[_._v("sk_buffer")]),_._v("组成的一个"),v("code",[_._v("双向链表")]),_._v("。")])]),_._v(" "),v("blockquote",[v("p",[_._v("发送流程走到这里，用户要发送的数据总算是从"),v("code",[_._v("用户空间")]),_._v("拷贝到了"),v("code",[_._v("内核")]),_._v("中，这时虽然发送数据已经"),v("code",[_._v("拷贝")]),_._v("到了内核"),v("code",[_._v("Socket")]),_._v("中的"),v("code",[_._v("发送队列")]),_._v("中，但并不代表内核会开始发送，因为"),v("code",[_._v("TCP协议")]),_._v("的"),v("code",[_._v("流量控制")]),_._v("和"),v("code",[_._v("拥塞控制")]),_._v("，用户要发送的数据包"),v("code",[_._v("并不一定")]),_._v("会立马被发送出去，需要符合"),v("code",[_._v("TCP协议")]),_._v("的发送条件。如果"),v("code",[_._v("没有达到发送条件")]),_._v("，那么本次"),v("code",[_._v("send")]),_._v("系统调用就会直接返回。")])]),_._v(" "),v("ul",[v("li",[_._v("如果符合发送条件，则开始调用"),v("code",[_._v("tcp_write_xmit")]),_._v("内核函数。在这个函数中，会循环获取"),v("code",[_._v("Socket")]),_._v("发送队列中待发送的"),v("code",[_._v("sk_buffer")]),_._v("，然后进行"),v("code",[_._v("拥塞控制")]),_._v("以及"),v("code",[_._v("滑动窗口的管理")]),_._v("。")]),_._v(" "),v("li",[_._v("将从"),v("code",[_._v("Socket")]),_._v("发送队列中获取到的"),v("code",[_._v("sk_buffer")]),_._v("重新"),v("code",[_._v("拷贝一份")]),_._v("，设置"),v("code",[_._v("sk_buffer副本")]),_._v("中的"),v("code",[_._v("TCP HEADER")]),_._v("。")])]),_._v(" "),v("blockquote",[v("p",[v("code",[_._v("sk_buffer")]),_._v(" 内部其实包含了网络协议中所有的 "),v("code",[_._v("header")]),_._v("。在设置 "),v("code",[_._v("TCP HEADER")]),_._v("的时候，只是把指针指向 "),v("code",[_._v("sk_buffer")]),_._v("的合适位置。后面再设置 "),v("code",[_._v("IP HEADER")]),_._v("的时候，在把指针移动一下就行，避免频繁的内存申请和拷贝，效率很高。")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190856347.png",alt:"图片"}})]),_._v(" "),v("blockquote",[v("p",[_._v("**为什么不直接使用"),v("code",[_._v("Socket")]),_._v("发送队列中的"),v("code",[_._v("sk_buffer")]),_._v("而是需要拷贝一份呢？**因为"),v("code",[_._v("TCP协议")]),_._v("是支持"),v("code",[_._v("丢包重传")]),_._v("的，在没有收到对端的"),v("code",[_._v("ACK")]),_._v("之前，这个"),v("code",[_._v("sk_buffer")]),_._v("是不能删除的。内核每次调用网卡发送数据的时候，实际上传递的是"),v("code",[_._v("sk_buffer")]),_._v("的"),v("code",[_._v("拷贝副本")]),_._v("，当网卡把数据发送出去后，"),v("code",[_._v("sk_buffer")]),_._v("拷贝副本会被释放。当收到对端的"),v("code",[_._v("ACK")]),_._v("之后，"),v("code",[_._v("Socket")]),_._v("发送队列中的"),v("code",[_._v("sk_buffer")]),_._v("才会被真正删除。")])]),_._v(" "),v("ul",[v("li",[v("p",[_._v("当设置完"),v("code",[_._v("TCP头")]),_._v("后，内核协议栈"),v("code",[_._v("传输层")]),_._v("的事情就做完了，下面通过调用"),v("code",[_._v("ip_queue_xmit")]),_._v("内核函数，正式来到内核协议栈"),v("code",[_._v("网络层")]),_._v("的处理。")]),_._v(" "),v("blockquote",[v("p",[_._v("通过"),v("code",[_._v("route")]),_._v("命令可以查看本机路由配置。")])]),_._v(" "),v("blockquote",[v("p",[_._v("如果你使用 "),v("code",[_._v("iptables")]),_._v("配置了一些规则，那么这里将检测"),v("code",[_._v("是否命中")]),_._v("规则。如果你设置了非常"),v("code",[_._v("复杂的 netfilter 规则")]),_._v("，在这个函数里将会导致你的线程 "),v("code",[_._v("CPU 开销")]),_._v("会"),v("code",[_._v("极大增加")]),_._v("。")])])]),_._v(" "),v("li",[v("ul",[v("li",[_._v("将"),v("code",[_._v("sk_buffer")]),_._v("中的指针移动到"),v("code",[_._v("IP头")]),_._v("位置上，设置"),v("code",[_._v("IP头")]),_._v("。")]),_._v(" "),v("li",[_._v("执行"),v("code",[_._v("netfilters")]),_._v("过滤。过滤通过之后，如果数据大于 "),v("code",[_._v("MTU")]),_._v("的话，则执行分片。")]),_._v(" "),v("li",[_._v("检查"),v("code",[_._v("Socket")]),_._v("中是否有缓存路由表，如果没有的话，则查找路由项，并缓存到"),v("code",[_._v("Socket")]),_._v("中。接着在把路由表设置到"),v("code",[_._v("sk_buffer")]),_._v("中。")])])]),_._v(" "),v("li",[v("p",[_._v("内核协议栈"),v("code",[_._v("网络层")]),_._v("的事情处理完后，现在发送流程进入了到了"),v("code",[_._v("邻居子系统")]),_._v("，"),v("code",[_._v("邻居子系统")]),_._v("位于内核协议栈中的"),v("code",[_._v("网络层")]),_._v("和"),v("code",[_._v("网络接口层")]),_._v("之间，用于发送"),v("code",[_._v("ARP请求")]),_._v("获取"),v("code",[_._v("MAC地址")]),_._v("，然后将"),v("code",[_._v("sk_buffer")]),_._v("中的指针移动到"),v("code",[_._v("MAC头")]),_._v("位置，填充"),v("code",[_._v("MAC头")]),_._v("。")])]),_._v(" "),v("li",[v("p",[_._v("经过"),v("code",[_._v("邻居子系统")]),_._v("的处理，现在"),v("code",[_._v("sk_buffer")]),_._v("中已经封装了一个完整的"),v("code",[_._v("数据帧")]),_._v("，随后内核将"),v("code",[_._v("sk_buffer")]),_._v("交给"),v("code",[_._v("网络设备子系统")]),_._v("进行处理。"),v("code",[_._v("网络设备子系统")]),_._v("主要做以下几项事情：")])]),_._v(" "),v("li",[v("ul",[v("li",[_._v("选择发送队列（"),v("code",[_._v("RingBuffer")]),_._v("）。因为网卡拥有多个发送队列，所以在发送前需要选择一个发送队列。")]),_._v(" "),v("li",[_._v("将"),v("code",[_._v("sk_buffer")]),_._v("添加到发送队列中。")]),_._v(" "),v("li",[_._v("循环从发送队列（"),v("code",[_._v("RingBuffer")]),_._v("）中取出"),v("code",[_._v("sk_buffer")]),_._v("，调用内核函数"),v("code",[_._v("sch_direct_xmit")]),_._v("发送数据，其中会调用"),v("code",[_._v("网卡驱动程序")]),_._v("来发送数据。")])])])]),_._v(" "),v("blockquote",[v("p",[_._v("以上过程全部是用户线程的内核态在执行，占用的CPU时间是系统态时间("),v("code",[_._v("sy")]),_._v(")，当分配给用户线程的"),v("code",[_._v("CPU quota")]),_._v("用完的时候，会触发"),v("code",[_._v("NET_TX_SOFTIRQ")]),_._v("类型的软中断，内核线程"),v("code",[_._v("ksoftirqd")]),_._v("会响应这个软中断，并执行"),v("code",[_._v("NET_TX_SOFTIRQ")]),_._v("类型的软中断注册的回调函数"),v("code",[_._v("net_tx_action")]),_._v("，在回调函数中会执行到驱动程序函数 "),v("code",[_._v("dev_hard_start_xmit")]),_._v("来发送数据。")])]),_._v(" "),v("blockquote",[v("p",[v("strong",[_._v("注意：当触发"),v("code",[_._v("NET_TX_SOFTIRQ")]),_._v("软中断来发送数据时，后边消耗的 CPU 就都显示在 "),v("code",[_._v("si")]),_._v("这里了，不会消耗用户进程的系统态时间（"),v("code",[_._v("sy")]),_._v("）了。")])])]),_._v(" "),v("blockquote",[v("p",[_._v("从这里可以看到网络包的发送过程和接受过程是不同的，在介绍网络包的接受过程时，我们提到是通过触发"),v("code",[_._v("NET_RX_SOFTIRQ")]),_._v("类型的软中断在内核线程"),v("code",[_._v("ksoftirqd")]),_._v("中执行"),v("code",[_._v("内核网络协议栈")]),_._v("接受数据。而在网络数据包的发送过程中是"),v("code",[_._v("用户线程的内核态")]),_._v("在执行"),v("code",[_._v("内核网络协议栈")]),_._v("，只有当线程的"),v("code",[_._v("CPU quota")]),_._v("用尽时，才触发"),v("code",[_._v("NET_TX_SOFTIRQ")]),_._v("软中断来发送数据。")])]),_._v(" "),v("blockquote",[v("p",[_._v("在整个网络包的发送和接受过程中，"),v("code",[_._v("NET_TX_SOFTIRQ")]),_._v("类型的软中断只会在发送网络包时并且当用户线程的"),v("code",[_._v("CPU quota")]),_._v("用尽时，才会触发。剩下的接受过程中触发的软中断类型以及发送完数据触发的软中断类型均为"),v("code",[_._v("NET_RX_SOFTIRQ")]),_._v("。所以这就是你在服务器上查看 "),v("code",[_._v("/proc/softirqs")]),_._v("，一般 "),v("code",[_._v("NET_RX")]),_._v("都要比 "),v("code",[_._v("NET_TX")]),_._v("大很多的的原因")])]),_._v(" "),v("ul",[v("li",[_._v("现在发送流程终于到了网卡真实发送数据的阶段，前边我们讲到无论是用户线程的内核态还是触发"),v("code",[_._v("NET_TX_SOFTIRQ")]),_._v("类型的软中断在发送数据的时候最终会调用到网卡的驱动程序函数"),v("code",[_._v("dev_hard_start_xmit")]),_._v("来发送数据。在网卡驱动程序函数"),v("code",[_._v("dev_hard_start_xmit")]),_._v("中会将"),v("code",[_._v("sk_buffer")]),_._v("映射到网卡可访问的"),v("code",[_._v("内存 DMA 区域")]),_._v("，最终网卡驱动程序通过"),v("code",[_._v("DMA")]),_._v("的方式将"),v("code",[_._v("数据帧")]),_._v("通过物理网卡发送出去。")]),_._v(" "),v("li",[_._v("当数据发送完毕后，还有最后一项重要的工作，就是清理工作。数据发送完毕后，网卡设备会向"),v("code",[_._v("CPU")]),_._v("发送一个硬中断，"),v("code",[_._v("CPU")]),_._v("调用网卡驱动程序注册的"),v("code",[_._v("硬中断响应程序")]),_._v("，在硬中断响应中触发"),v("code",[_._v("NET_RX_SOFTIRQ")]),_._v("类型的软中断，在软中断的回调函数"),v("code",[_._v("igb_poll")]),_._v("中清理释放 "),v("code",[_._v("sk_buffer")]),_._v("，清理"),v("code",[_._v("网卡")]),_._v("发送队列（"),v("code",[_._v("RingBuffer")]),_._v("），解除 DMA 映射。")])]),_._v(" "),v("blockquote",[v("p",[_._v("无论"),v("code",[_._v("硬中断")]),_._v("是因为"),v("code",[_._v("有数据要接收")]),_._v("，还是说"),v("code",[_._v("发送完成通知")]),_._v("，从硬中断触发的软中断都是 "),v("code",[_._v("NET_RX_SOFTIRQ")]),_._v("。")])]),_._v(" "),v("blockquote",[v("p",[_._v("这里释放清理的只是"),v("code",[_._v("sk_buffer")]),_._v("的副本，真正的"),v("code",[_._v("sk_buffer")]),_._v("现在还是存放在"),v("code",[_._v("Socket")]),_._v("的发送队列中。前面在"),v("code",[_._v("传输层")]),_._v("处理的时候我们提到过，因为传输层需要"),v("code",[_._v("保证可靠性")]),_._v("，所以 "),v("code",[_._v("sk_buffer")]),_._v("其实还没有删除。它得等收到对方的 ACK 之后才会真正删除。")])]),_._v(" "),v("h3",{attrs:{id:"性能开销-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#性能开销-2"}},[_._v("#")]),_._v(" 性能开销")]),_._v(" "),v("p",[_._v("前边我们提到了在网络包接收过程中涉及到的性能开销，现在介绍完了网络包的发送过程，我们来看下在数据包发送过程中的性能开销：")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("和接收数据一样，应用程序在调用"),v("code",[_._v("系统调用send")]),_._v("的时候会从"),v("code",[_._v("用户态")]),_._v("转为"),v("code",[_._v("内核态")]),_._v("以及发送完数据后，"),v("code",[_._v("系统调用")]),_._v("返回时从"),v("code",[_._v("内核态")]),_._v("转为"),v("code",[_._v("用户态")]),_._v("的开销。")])]),_._v(" "),v("li",[v("p",[_._v("用户线程内核态"),v("code",[_._v("CPU quota")]),_._v("用尽时触发"),v("code",[_._v("NET_TX_SOFTIRQ")]),_._v("类型软中断，内核响应软中断的开销。")])]),_._v(" "),v("li",[v("p",[_._v("网卡发送完数据，向"),v("code",[_._v("CPU")]),_._v("发送硬中断，"),v("code",[_._v("CPU")]),_._v("响应硬中断的开销。以及在硬中断中发送"),v("code",[_._v("NET_RX_SOFTIRQ")]),_._v("软中断执行具体的内存清理动作。内核响应软中断的开销。")])]),_._v(" "),v("li",[v("p",[_._v("内存拷贝的开销。我们来回顾下在数据包发送的过程中都发生了哪些内存拷贝：")])]),_._v(" "),v("li",[v("ul",[v("li",[_._v("在内核协议栈的传输层中，"),v("code",[_._v("TCP协议")]),_._v("对应的发送函数"),v("code",[_._v("tcp_sendmsg")]),_._v("会申请"),v("code",[_._v("sk_buffer")]),_._v("，将用户要发送的数据"),v("code",[_._v("拷贝")]),_._v("到"),v("code",[_._v("sk_buffer")]),_._v("中。")]),_._v(" "),v("li",[_._v("在发送流程从传输层到网络层的时候，会"),v("code",[_._v("拷贝")]),_._v("一个"),v("code",[_._v("sk_buffer副本")]),_._v("出来，将这个"),v("code",[_._v("sk_buffer副本")]),_._v("向下传递。原始"),v("code",[_._v("sk_buffer")]),_._v("保留在"),v("code",[_._v("Socket")]),_._v("发送队列中，等待网络对端"),v("code",[_._v("ACK")]),_._v("，对端"),v("code",[_._v("ACK")]),_._v("后删除"),v("code",[_._v("Socket")]),_._v("发送队列中的"),v("code",[_._v("sk_buffer")]),_._v("。对端没有发送"),v("code",[_._v("ACK")]),_._v("，则重新从"),v("code",[_._v("Socket")]),_._v("发送队列中发送，实现"),v("code",[_._v("TCP协议")]),_._v("的可靠传输。")]),_._v(" "),v("li",[_._v("在网络层，如果发现要发送的数据大于"),v("code",[_._v("MTU")]),_._v("，则会进行分片操作，申请额外的"),v("code",[_._v("sk_buffer")]),_._v("，并将原来的sk_buffer"),v("code",[_._v("拷贝")]),_._v("到多个小的sk_buffer中。")])])])]),_._v(" "),v("h2",{attrs:{id:"再谈-阻塞-非阻塞-与-同步-异步"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#再谈-阻塞-非阻塞-与-同步-异步"}},[_._v("#")]),_._v(" 再谈(阻塞，非阻塞)与(同步，异步)")]),_._v(" "),v("p",[_._v("在我们聊完网络数据的接收和发送过程后，我们来谈下IO中特别容易混淆的概念："),v("code",[_._v("阻塞与同步")]),_._v("，"),v("code",[_._v("非阻塞与异步")]),_._v("。")]),_._v(" "),v("p",[_._v("网上各种博文还有各种书籍中有大量的关于这两个概念的解释，但是笔者觉得还是不够形象化，只是对概念的生硬解释，如果硬套概念的话，其实感觉"),v("code",[_._v("阻塞与同步")]),_._v("，"),v("code",[_._v("非阻塞与异步")]),_._v("还是没啥区别，时间长了，还是比较模糊容易混淆。")]),_._v(" "),v("p",[_._v("所以笔者在这里尝试换一种更加形象化，更加容易理解记忆的方式来清晰地解释下什么是"),v("code",[_._v("阻塞与非阻塞")]),_._v("，什么是"),v("code",[_._v("同步与异步")]),_._v("。")]),_._v(" "),v("p",[_._v("经过前边对网络数据包接收流程的介绍，在这里我们可以将整个流程总结为两个阶段：")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190903897.png",alt:"图片"}})]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("数据准备阶段：")]),_._v(" 在这个阶段，网络数据包到达网卡，通过"),v("code",[_._v("DMA")]),_._v("的方式将数据包拷贝到内存中，然后经过硬中断，软中断，接着通过内核线程"),v("code",[_._v("ksoftirqd")]),_._v("经过内核协议栈的处理，最终将数据发送到"),v("code",[_._v("内核Socket")]),_._v("的接收缓冲区中。")]),_._v(" "),v("li",[v("strong",[_._v("数据拷贝阶段：")]),_._v(" 当数据到达"),v("code",[_._v("内核Socket")]),_._v("的接收缓冲区中时，此时数据存在于"),v("code",[_._v("内核空间")]),_._v("中，需要将数据"),v("code",[_._v("拷贝")]),_._v("到"),v("code",[_._v("用户空间")]),_._v("中，才能够被应用程序读取。")])]),_._v(" "),v("h3",{attrs:{id:"阻塞与非阻塞"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#阻塞与非阻塞"}},[_._v("#")]),_._v(" 阻塞与非阻塞")]),_._v(" "),v("p",[_._v("阻塞与非阻塞的区别主要发生在第一阶段："),v("code",[_._v("数据准备阶段")]),_._v("。")]),_._v(" "),v("p",[_._v("当应用程序发起"),v("code",[_._v("系统调用read")]),_._v("时，线程从用户态转为内核态，读取内核"),v("code",[_._v("Socket")]),_._v("的接收缓冲区中的网络数据。")]),_._v(" "),v("h4",{attrs:{id:"阻塞"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#阻塞"}},[_._v("#")]),_._v(" 阻塞")]),_._v(" "),v("p",[_._v("如果这时内核"),v("code",[_._v("Socket")]),_._v("的接收缓冲区没有数据，那么线程就会一直"),v("code",[_._v("等待")]),_._v("，直到"),v("code",[_._v("Socket")]),_._v("接收缓冲区有数据为止。随后将数据从内核空间拷贝到用户空间，"),v("code",[_._v("系统调用read")]),_._v("返回。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190906844.png",alt:"图片"}})]),_._v(" "),v("p",[_._v("从图中我们可以看出："),v("strong",[_._v("阻塞")]),_._v("的特点是在第一阶段和第二阶段"),v("code",[_._v("都会等待")]),_._v("。")]),_._v(" "),v("h4",{attrs:{id:"非阻塞"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞"}},[_._v("#")]),_._v(" 非阻塞")]),_._v(" "),v("p",[v("code",[_._v("阻塞")]),_._v("和"),v("code",[_._v("非阻塞")]),_._v("主要的区分是在第一阶段："),v("code",[_._v("数据准备阶段")]),_._v("。")]),_._v(" "),v("ul",[v("li",[_._v("在第一阶段，当"),v("code",[_._v("Socket")]),_._v("的接收缓冲区中没有数据的时候，"),v("code",[_._v("阻塞模式下")]),_._v("应用线程会一直等待。"),v("code",[_._v("非阻塞模式下")]),_._v("应用线程不会等待，"),v("code",[_._v("系统调用")]),_._v("直接返回错误标志"),v("code",[_._v("EWOULDBLOCK")]),_._v("。")]),_._v(" "),v("li",[_._v("当"),v("code",[_._v("Socket")]),_._v("的接收缓冲区中有数据的时候，"),v("code",[_._v("阻塞")]),_._v("和"),v("code",[_._v("非阻塞")]),_._v("的表现是一样的，都会进入第二阶段"),v("code",[_._v("等待")]),_._v("数据从"),v("code",[_._v("内核空间")]),_._v("拷贝到"),v("code",[_._v("用户空间")]),_._v("，然后"),v("code",[_._v("系统调用返回")]),_._v("。")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190906040.png",alt:"图片"}})]),_._v(" "),v("p",[_._v("从上图中，我们可以看出："),v("strong",[_._v("非阻塞")]),_._v("的特点是第一阶段"),v("code",[_._v("不会等待")]),_._v("，"),v("strong",[_._v("但是在第二阶段还是会"),v("code",[_._v("等待")]),_._v("。")])]),_._v(" "),v("h3",{attrs:{id:"同步与异步"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#同步与异步"}},[_._v("#")]),_._v(" 同步与异步")]),_._v(" "),v("p",[v("code",[_._v("同步")]),_._v("与"),v("code",[_._v("异步")]),_._v("主要的区别发生在第二阶段："),v("code",[_._v("数据拷贝阶段")]),_._v("。")]),_._v(" "),v("p",[_._v("前边我们提到在"),v("code",[_._v("数据拷贝阶段")]),_._v("主要是将数据从"),v("code",[_._v("内核空间")]),_._v("拷贝到"),v("code",[_._v("用户空间")]),_._v("。然后应用程序才可以读取数据。")]),_._v(" "),v("p",[_._v("当内核"),v("code",[_._v("Socket")]),_._v("的接收缓冲区有数据到达时，进入第二阶段。")]),_._v(" "),v("h4",{attrs:{id:"同步"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#同步"}},[_._v("#")]),_._v(" 同步")]),_._v(" "),v("p",[v("code",[_._v("同步模式")]),_._v("在数据准备好后，是由"),v("code",[_._v("用户线程")]),_._v("的"),v("code",[_._v("内核态")]),_._v("来执行"),v("code",[_._v("第二阶段")]),_._v("。所以应用程序会在第二阶段发生"),v("code",[_._v("阻塞")]),_._v("，直到数据从"),v("code",[_._v("内核空间")]),_._v("拷贝到"),v("code",[_._v("用户空间")]),_._v("，系统调用才会返回。")]),_._v(" "),v("p",[_._v("Linux下的 "),v("code",[_._v("epoll")]),_._v("和Mac 下的 "),v("code",[_._v("kqueue")]),_._v("都属于"),v("code",[_._v("同步 IO")]),_._v("。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190907790.png",alt:"图片"}})]),_._v(" "),v("h4",{attrs:{id:"异步"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#异步"}},[_._v("#")]),_._v(" 异步")]),_._v(" "),v("p",[v("code",[_._v("异步模式")]),_._v("下是由"),v("code",[_._v("内核")]),_._v("来执行第二阶段的数据拷贝操作，当"),v("code",[_._v("内核")]),_._v("执行完第二阶段，会通知用户线程IO操作已经完成，并将数据回调给用户线程。所以在"),v("code",[_._v("异步模式")]),_._v("下 "),v("code",[_._v("数据准备阶段")]),_._v("和"),v("code",[_._v("数据拷贝阶段")]),_._v("均是由"),v("code",[_._v("内核")]),_._v("来完成，不会对应用程序造成任何阻塞。")]),_._v(" "),v("p",[_._v("基于以上特征，我们可以看到"),v("code",[_._v("异步模式")]),_._v("需要内核的支持，比较依赖操作系统底层的支持。")]),_._v(" "),v("p",[_._v("在目前流行的操作系统中，只有Windows 中的 "),v("code",[_._v("IOCP")]),_._v("才真正属于异步 IO，实现的也非常成熟。但Windows很少用来作为服务器使用。")]),_._v(" "),v("p",[_._v("而常用来作为服务器使用的Linux，"),v("code",[_._v("异步IO机制")]),_._v("实现的不够成熟，与NIO相比性能提升的也不够明显。")]),_._v(" "),v("p",[_._v("但Linux kernel 在5.1版本由Facebook的大神Jens Axboe引入了新的异步IO库"),v("code",[_._v("io_uring")]),_._v(" 改善了原来Linux native AIO的一些性能问题。性能相比"),v("code",[_._v("Epoll")]),_._v("以及之前原生的"),v("code",[_._v("AIO")]),_._v("提高了不少，值得关注。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190908945.png",alt:""}})]),_._v(" "),v("h2",{attrs:{id:"io模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#io模型"}},[_._v("#")]),_._v(" IO模型")]),_._v(" "),v("p",[_._v("在进行网络IO操作时，用什么样的IO模型来读写数据将在很大程度上决定了网络框架的IO性能。所以IO模型的选择是构建一个高性能网络框架的基础。")]),_._v(" "),v("p",[_._v("在《UNIX 网络编程》一书中介绍了五种IO模型："),v("code",[_._v("阻塞IO")]),_._v(","),v("code",[_._v("非阻塞IO")]),_._v(","),v("code",[_._v("IO多路复用")]),_._v(","),v("code",[_._v("信号驱动IO")]),_._v(","),v("code",[_._v("异步IO")]),_._v("，每一种IO模型的出现都是对前一种的升级优化。")]),_._v(" "),v("p",[_._v("下面我们就来分别介绍下这五种IO模型各自都解决了什么问题，适用于哪些场景，各自的优缺点是什么？")]),_._v(" "),v("h3",{attrs:{id:"阻塞io-bio"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#阻塞io-bio"}},[_._v("#")]),_._v(" 阻塞IO（BIO）")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190908331.png",alt:"图片"}})]),_._v(" "),v("p",[_._v("经过前一小节对"),v("code",[_._v("阻塞")]),_._v("这个概念的介绍，相信大家可以很容易理解"),v("code",[_._v("阻塞IO")]),_._v("的概念和过程。")]),_._v(" "),v("p",[_._v("既然这小节我们谈的是"),v("code",[_._v("IO")]),_._v("，那么下边我们来看下在"),v("code",[_._v("阻塞IO")]),_._v("模型下，网络数据的读写过程。")]),_._v(" "),v("h4",{attrs:{id:"阻塞读"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#阻塞读"}},[_._v("#")]),_._v(" 阻塞读")]),_._v(" "),v("p",[_._v("当用户线程发起"),v("code",[_._v("read")]),_._v("系统调用，用户线程从用户态切换到内核态，在内核中去查看"),v("code",[_._v("Socket")]),_._v("接收缓冲区是否有数据到来。")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("Socket")]),_._v("接收缓冲区中"),v("code",[_._v("有数据")]),_._v("，则用户线程在内核态将内核空间中的数据拷贝到用户空间，系统IO调用返回。")]),_._v(" "),v("li",[v("code",[_._v("Socket")]),_._v("接收缓冲区中"),v("code",[_._v("无数据")]),_._v("，则用户线程让出CPU，进入"),v("code",[_._v("阻塞状态")]),_._v("。当数据到达"),v("code",[_._v("Socket")]),_._v("接收缓冲区后，内核唤醒"),v("code",[_._v("阻塞状态")]),_._v("中的用户线程进入"),v("code",[_._v("就绪状态")]),_._v("，随后经过CPU的调度获取到"),v("code",[_._v("CPU quota")]),_._v("进入"),v("code",[_._v("运行状态")]),_._v("，将内核空间的数据拷贝到用户空间，随后系统调用返回。")])]),_._v(" "),v("h4",{attrs:{id:"阻塞写"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#阻塞写"}},[_._v("#")]),_._v(" 阻塞写")]),_._v(" "),v("p",[_._v("当用户线程发起"),v("code",[_._v("send")]),_._v("系统调用时，用户线程从用户态切换到内核态，将发送数据从用户空间拷贝到内核空间中的"),v("code",[_._v("Socket")]),_._v("发送缓冲区中。")]),_._v(" "),v("ul",[v("li",[_._v("当"),v("code",[_._v("Socket")]),_._v("发送缓冲区能够容纳下发送数据时，用户线程会将全部的发送数据写入"),v("code",[_._v("Socket")]),_._v("缓冲区，然后执行在《网络包发送流程》这小节介绍的后续流程，然后返回。")]),_._v(" "),v("li",[_._v("当"),v("code",[_._v("Socket")]),_._v("发送缓冲区空间不够，无法容纳下全部发送数据时，用户线程让出CPU,进入"),v("code",[_._v("阻塞状态")]),_._v("，直到"),v("code",[_._v("Socket")]),_._v("发送缓冲区能够容纳下全部发送数据时，内核唤醒用户线程，执行后续发送流程。")])]),_._v(" "),v("p",[v("code",[_._v("阻塞IO")]),_._v("模型下的写操作做事风格比较硬刚，非得要把全部的发送数据写入发送缓冲区才肯善罢甘休。")]),_._v(" "),v("h4",{attrs:{id:"阻塞io模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#阻塞io模型"}},[_._v("#")]),_._v(" 阻塞IO模型")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190910768.png",alt:"图片"}})]),_._v(" "),v("p",[_._v("由于"),v("code",[_._v("阻塞IO")]),_._v("的读写特点，所以导致在"),v("code",[_._v("阻塞IO")]),_._v("模型下，每个请求都需要被一个独立的线程处理。一个线程在同一时刻只能与一个连接绑定。来一个请求，服务端就需要创建一个线程用来处理请求。")]),_._v(" "),v("p",[_._v("当客户端请求的并发量突然增大时，服务端在一瞬间就会创建出大量的线程，而创建线程是需要系统资源开销的，这样一来就会一瞬间占用大量的系统资源。")]),_._v(" "),v("p",[_._v("如果客户端创建好连接后，但是一直不发数据，通常大部分情况下，网络连接也"),v("code",[_._v("并不")]),_._v("总是有数据可读，那么在空闲的这段时间内，服务端线程就会一直处于"),v("code",[_._v("阻塞状态")]),_._v("，无法干其他的事情。CPU也"),v("code",[_._v("无法得到充分的发挥")]),_._v("，同时还会"),v("code",[_._v("导致大量线程切换的开销")]),_._v("。")]),_._v(" "),v("h4",{attrs:{id:"适用场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#适用场景"}},[_._v("#")]),_._v(" 适用场景")]),_._v(" "),v("p",[_._v("基于以上"),v("code",[_._v("阻塞IO模型")]),_._v("的特点，该模型只适用于"),v("code",[_._v("连接数少")]),_._v("，"),v("code",[_._v("并发度低")]),_._v("的业务场景。")]),_._v(" "),v("p",[_._v("比如公司内部的一些管理系统，通常请求数在100个左右，使用"),v("code",[_._v("阻塞IO模型")]),_._v("还是非常适合的。而且性能还不输NIO。")]),_._v(" "),v("p",[_._v("该模型在C10K之前，是普遍被采用的一种IO模型。")]),_._v(" "),v("h3",{attrs:{id:"非阻塞io-nio"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞io-nio"}},[_._v("#")]),_._v(" 非阻塞IO（NIO）")]),_._v(" "),v("p",[v("code",[_._v("阻塞IO模型")]),_._v("最大的问题就是一个线程只能处理一个连接，如果这个连接上没有数据的话，那么这个线程就只能阻塞在系统IO调用上，不能干其他的事情。这对系统资源来说，是一种极大的浪费。同时大量的线程上下文切换，也是一个巨大的系统开销。")]),_._v(" "),v("p",[_._v("所以为了解决这个问题，"),v("strong",[_._v("我们就需要用尽可能少的线程去处理更多的连接。")]),_._v("，"),v("code",[_._v("网络IO模型的演变")]),_._v("也是根据这个需求来一步一步演进的。")]),_._v(" "),v("p",[_._v("基于这个需求，第一种解决方案"),v("code",[_._v("非阻塞IO")]),_._v("就出现了。我们在上一小节中介绍了"),v("code",[_._v("非阻塞")]),_._v("的概念，现在我们来看下网络读写操作在"),v("code",[_._v("非阻塞IO")]),_._v("下的特点：")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190911259.png",alt:"图片"}})]),_._v(" "),v("h4",{attrs:{id:"非阻塞读"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞读"}},[_._v("#")]),_._v(" 非阻塞读")]),_._v(" "),v("p",[_._v("当用户线程发起非阻塞"),v("code",[_._v("read")]),_._v("系统调用时，用户线程从"),v("code",[_._v("用户态")]),_._v("转为"),v("code",[_._v("内核态")]),_._v("，在内核中去查看"),v("code",[_._v("Socket")]),_._v("接收缓冲区是否有数据到来。")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("Socket")]),_._v("接收缓冲区中"),v("code",[_._v("无数据")]),_._v("，系统调用立马返回，并带有一个 "),v("code",[_._v("EWOULDBLOCK")]),_._v(" 或 "),v("code",[_._v("EAGAIN")]),_._v("错误，这个阶段用户线程"),v("code",[_._v("不会阻塞")]),_._v("，也"),v("code",[_._v("不会让出CPU")]),_._v("，而是会继续"),v("code",[_._v("轮训")]),_._v("直到"),v("code",[_._v("Socket")]),_._v("接收缓冲区中有数据为止。")]),_._v(" "),v("li",[v("code",[_._v("Socket")]),_._v("接收缓冲区中"),v("code",[_._v("有数据")]),_._v("，用户线程在"),v("code",[_._v("内核态")]),_._v("会将"),v("code",[_._v("内核空间")]),_._v("中的数据拷贝到"),v("code",[_._v("用户空间")]),_._v("，"),v("strong",[_._v("注意")]),_._v("这个数据拷贝阶段，应用程序是"),v("code",[_._v("阻塞的")]),_._v("，当数据拷贝完成，系统调用返回。")])]),_._v(" "),v("h4",{attrs:{id:"非阻塞写"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞写"}},[_._v("#")]),_._v(" 非阻塞写")]),_._v(" "),v("p",[_._v("前边我们在介绍"),v("code",[_._v("阻塞写")]),_._v("的时候提到"),v("code",[_._v("阻塞写")]),_._v("的风格特别的硬朗，头比较铁非要把全部发送数据一次性都写到"),v("code",[_._v("Socket")]),_._v("的发送缓冲区中才返回，如果发送缓冲区中没有足够的空间容纳，那么就一直阻塞死等，特别的刚。")]),_._v(" "),v("p",[_._v("相比较而言"),v("code",[_._v("非阻塞写")]),_._v("的特点就比较佛系，当发送缓冲区中没有足够的空间容纳全部发送数据时，"),v("code",[_._v("非阻塞写")]),_._v("的特点是"),v("code",[_._v("能写多少写多少")]),_._v("，写不下了，就立即返回。并将写入到发送缓冲区的字节数返回给应用程序，方便用户线程不断的"),v("code",[_._v("轮训")]),_._v("尝试将"),v("code",[_._v("剩下的数据")]),_._v("写入发送缓冲区中。")]),_._v(" "),v("h4",{attrs:{id:"非阻塞io模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞io模型"}},[_._v("#")]),_._v(" 非阻塞IO模型")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190912819.png",alt:"图片"}})]),_._v(" "),v("p",[_._v("基于以上"),v("code",[_._v("非阻塞IO")]),_._v("的特点，我们就不必像"),v("code",[_._v("阻塞IO")]),_._v("那样为每个请求分配一个线程去处理连接上的读写了。")]),_._v(" "),v("p",[_._v("我们可以利用"),v("strong",[_._v("一个线程或者很少的线程")]),_._v("，去"),v("code",[_._v("不断地轮询")]),_._v("每个"),v("code",[_._v("Socket")]),_._v("的接收缓冲区是否有数据到达，如果没有数据，"),v("code",[_._v("不必阻塞")]),_._v("线程，而是接着去"),v("code",[_._v("轮询")]),_._v("下一个"),v("code",[_._v("Socket")]),_._v("接收缓冲区，直到轮询到数据后，处理连接上的读写，或者交给业务线程池去处理，轮询线程则"),v("code",[_._v("继续轮询")]),_._v("其他的"),v("code",[_._v("Socket")]),_._v("接收缓冲区。")]),_._v(" "),v("p",[_._v("这样一个"),v("code",[_._v("非阻塞IO模型")]),_._v("就实现了我们在本小节开始提出的需求："),v("strong",[_._v("我们需要用尽可能少的线程去处理更多的连接")])]),_._v(" "),v("h4",{attrs:{id:"适用场景-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#适用场景-2"}},[_._v("#")]),_._v(" 适用场景")]),_._v(" "),v("p",[_._v("虽然"),v("code",[_._v("非阻塞IO模型")]),_._v("与"),v("code",[_._v("阻塞IO模型")]),_._v("相比，减少了很大一部分的资源消耗和系统开销。")]),_._v(" "),v("p",[_._v("但是它仍然有很大的性能问题，因为在"),v("code",[_._v("非阻塞IO模型")]),_._v("下，需要用户线程去"),v("code",[_._v("不断地")]),_._v("发起"),v("code",[_._v("系统调用")]),_._v("去轮训"),v("code",[_._v("Socket")]),_._v("接收缓冲区，这就需要用户线程不断地从"),v("code",[_._v("用户态")]),_._v("切换到"),v("code",[_._v("内核态")]),_._v("，"),v("code",[_._v("内核态")]),_._v("切换到"),v("code",[_._v("用户态")]),_._v("。随着并发量的增大，这个上下文切换的开销也是巨大的。")]),_._v(" "),v("p",[_._v("所以单纯的"),v("code",[_._v("非阻塞IO")]),_._v("模型还是无法适用于高并发的场景。只能适用于"),v("code",[_._v("C10K")]),_._v("以下的场景。")]),_._v(" "),v("h3",{attrs:{id:"io-多路复用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#io-多路复用"}},[_._v("#")]),_._v(" IO 多路复用")]),_._v(" "),v("h3",{attrs:{id:"信号驱动io"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#信号驱动io"}},[_._v("#")]),_._v(" 信号驱动IO")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190942510.png",alt:"图片"}}),_._v("信号驱动IO.png")]),_._v(" "),v("p",[_._v("大家对这个装备肯定不会陌生，当我们去一些美食城吃饭的时候，点完餐付了钱，老板会给我们一个信号器。然后我们带着这个信号器可以去找餐桌，或者干些其他的事情。当信号器亮了的时候，这时代表饭餐已经做好，我们可以去窗口取餐了。")]),_._v(" "),v("p",[_._v("这个典型的生活场景和我们要介绍的"),v("code",[_._v("信号驱动IO模型")]),_._v("就很像。")]),_._v(" "),v("p",[_._v("在"),v("code",[_._v("信号驱动IO模型")]),_._v("下，用户进程操作通过"),v("code",[_._v("系统调用 sigaction 函数")]),_._v("发起一个 IO 请求，在对应的"),v("code",[_._v("socket")]),_._v("注册一个"),v("code",[_._v("信号回调")]),_._v("，此时"),v("code",[_._v("不阻塞")]),_._v("用户进程，进程会继续工作。当内核数据就绪时，内核就为该进程生成一个 "),v("code",[_._v("SIGIO 信号")]),_._v("，通过信号回调通知进程进行相关 IO 操作。")]),_._v(" "),v("blockquote",[v("p",[_._v("这里需要注意的是："),v("code",[_._v("信号驱动式 IO 模型")]),_._v("依然是"),v("code",[_._v("同步IO")]),_._v("，因为它虽然可以在等待数据的时候不被阻塞，也不会频繁的轮询，但是当数据就绪，内核信号通知后，用户进程依然要自己去读取数据，在"),v("code",[_._v("数据拷贝阶段")]),_._v("发生阻塞。")])]),_._v(" "),v("blockquote",[v("p",[_._v("信号驱动 IO模型 相比于前三种 IO 模型，实现了在等待数据就绪时，进程不被阻塞，主循环可以继续工作，所以"),v("code",[_._v("理论上")]),_._v("性能更佳。")])]),_._v(" "),v("p",[_._v("但是实际上，使用"),v("code",[_._v("TCP协议")]),_._v("通信时，"),v("code",[_._v("信号驱动IO模型")]),_._v("几乎"),v("code",[_._v("不会被采用")]),_._v("。原因如下：")]),_._v(" "),v("ul",[v("li",[_._v("信号IO 在大量 IO 操作时可能会因为信号队列溢出导致没法通知")]),_._v(" "),v("li",[v("code",[_._v("SIGIO 信号")]),_._v("是一种 Unix 信号，信号没有附加信息，如果一个信号源有多种产生信号的原因，信号接收者就无法确定究竟发生了什么。而 TCP socket 生产的信号事件有七种之多，这样应用程序收到 SIGIO，根本无从区分处理。")])]),_._v(" "),v("p",[_._v("但"),v("code",[_._v("信号驱动IO模型")]),_._v("可以用在 "),v("code",[_._v("UDP")]),_._v("通信上，因为UDP 只有"),v("code",[_._v("一个数据请求事件")]),_._v("，这也就意味着在正常情况下 UDP 进程只要捕获 SIGIO 信号，就调用 "),v("code",[_._v("read 系统调用")]),_._v("读取到达的数据。如果出现异常，就返回一个异常错误。")]),_._v(" "),v("hr"),_._v(" "),v("p",[_._v("这里插句题外话，大家觉不觉得"),v("code",[_._v("阻塞IO模型")]),_._v("在生活中的例子就像是我们在食堂排队打饭。你自己需要排队去打饭同时打饭师傅在配菜的过程中你需要等待。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190942411.png",alt:"图片"}}),_._v("阻塞IO.png")]),_._v(" "),v("p",[v("code",[_._v("IO多路复用模型")]),_._v("就像是我们在饭店门口排队等待叫号。叫号器就好比"),v("code",[_._v("select,poll,epoll")]),_._v("可以统一管理全部顾客的"),v("code",[_._v("吃饭就绪")]),_._v("事件，客户好比是"),v("code",[_._v("socket")]),_._v("连接，谁可以去吃饭了，叫号器就通知谁。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190942444.png",alt:"图片"}}),_._v("IO多路复用.png")]),_._v(" "),v("h3",{attrs:{id:"异步io-aio"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#异步io-aio"}},[_._v("#")]),_._v(" 异步IO（AIO）")]),_._v(" "),v("p",[_._v("以上介绍的四种"),v("code",[_._v("IO模型")]),_._v("均为"),v("code",[_._v("同步IO")]),_._v("，它们都会阻塞在第二阶段"),v("code",[_._v("数据拷贝阶段")]),_._v("。")]),_._v(" "),v("p",[_._v("通过在前边小节《同步与异步》中的介绍，相信大家很容易就会理解"),v("code",[_._v("异步IO模型")]),_._v("，在"),v("code",[_._v("异步IO模型")]),_._v("下，IO操作在"),v("code",[_._v("数据准备阶段")]),_._v("和"),v("code",[_._v("数据拷贝阶段")]),_._v("均是由内核来完成，不会对应用程序造成任何阻塞。应用进程只需要在"),v("code",[_._v("指定的数组")]),_._v("中引用数据即可。")]),_._v(" "),v("p",[v("code",[_._v("异步 IO")]),_._v(" 与"),v("code",[_._v("信号驱动 IO")]),_._v(" 的主要区别在于："),v("code",[_._v("信号驱动 IO")]),_._v(" 由内核通知何时可以"),v("code",[_._v("开始一个 IO 操作")]),_._v("，而"),v("code",[_._v("异步 IO")]),_._v("由内核通知 "),v("code",[_._v("IO 操作何时已经完成")]),_._v("。")]),_._v(" "),v("p",[_._v("举个生活中的例子："),v("code",[_._v("异步IO模型")]),_._v("就像我们去一个高档饭店里的包间吃饭，我们只需要坐在包间里面，点完餐（"),v("code",[_._v("类比异步IO调用")]),_._v("）之后，我们就什么也不需要管，该喝酒喝酒，该聊天聊天，饭餐做好后服务员（"),v("code",[_._v("类比内核")]),_._v("）会自己给我们送到包间（"),v("code",[_._v("类比用户空间")]),_._v("）来。整个过程没有任何阻塞。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190942662.png",alt:"图片"}}),_._v("异步IO.png")]),_._v(" "),v("p",[v("code",[_._v("异步IO")]),_._v("的系统调用需要操作系统内核来支持，目前只有"),v("code",[_._v("Window")]),_._v("中的"),v("code",[_._v("IOCP")]),_._v("实现了非常成熟的"),v("code",[_._v("异步IO机制")]),_._v("。")]),_._v(" "),v("p",[_._v("而"),v("code",[_._v("Linux")]),_._v("系统对"),v("code",[_._v("异步IO机制")]),_._v("实现的不够成熟，且与"),v("code",[_._v("NIO")]),_._v("的性能相比提升也不明显。")]),_._v(" "),v("blockquote",[v("p",[_._v("但Linux kernel 在5.1版本由Facebook的大神Jens Axboe引入了新的异步IO库"),v("code",[_._v("io_uring")]),_._v(" 改善了原来Linux native AIO的一些性能问题。性能相比"),v("code",[_._v("Epoll")]),_._v("以及之前原生的"),v("code",[_._v("AIO")]),_._v("提高了不少，值得关注。")])]),_._v(" "),v("p",[_._v("再加上"),v("code",[_._v("信号驱动IO模型")]),_._v("不适用"),v("code",[_._v("TCP协议")]),_._v("，所以目前大部分采用的还是"),v("code",[_._v("IO多路复用模型")]),_._v("。")]),_._v(" "),v("h2",{attrs:{id:"io-线程模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#io-线程模型"}},[_._v("#")]),_._v(" IO 线程模型")]),_._v(" "),v("p",[_._v("在前边内容的介绍中，我们详述了网络数据包的接收和发送过程，并通过介绍5种"),v("code",[_._v("IO模型")]),_._v("了解了内核是如何读取网络数据并通知给用户线程的。")]),_._v(" "),v("p",[_._v("前边的内容都是以"),v("code",[_._v("内核空间")]),_._v("的视角来剖析网络数据的收发模型，本小节我们站在"),v("code",[_._v("用户空间")]),_._v("的视角来看下如果对网络数据进行收发。")]),_._v(" "),v("p",[_._v("相对"),v("code",[_._v("内核")]),_._v("来讲，"),v("code",[_._v("用户空间的IO线程模型")]),_._v("相对就简单一些。这些"),v("code",[_._v("用户空间")]),_._v("的"),v("code",[_._v("IO线程模型")]),_._v("都是在讨论当多线程一起配合工作时谁负责接收连接，谁负责响应IO 读写、谁负责计算、谁负责发送和接收，仅仅是用户IO线程的不同分工模式罢了。")]),_._v(" "),v("h3",{attrs:{id:"reactor"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#reactor"}},[_._v("#")]),_._v(" Reactor")]),_._v(" "),v("p",[v("code",[_._v("Reactor")]),_._v("是利用"),v("code",[_._v("NIO")]),_._v("对"),v("code",[_._v("IO线程")]),_._v("进行不同的分工：")]),_._v(" "),v("ul",[v("li",[_._v("使用前边我们提到的"),v("code",[_._v("IO多路复用模型")]),_._v("比如"),v("code",[_._v("select,poll,epoll,kqueue")]),_._v(",进行IO事件的注册和监听。")]),_._v(" "),v("li",[_._v("将监听到"),v("code",[_._v("就绪的IO事件")]),_._v("分发"),v("code",[_._v("dispatch")]),_._v("到各个具体的处理"),v("code",[_._v("Handler")]),_._v("中进行相应的"),v("code",[_._v("IO事件处理")]),_._v("。")])]),_._v(" "),v("p",[_._v("通过"),v("code",[_._v("IO多路复用技术")]),_._v("就可以不断的监听"),v("code",[_._v("IO事件")]),_._v("，不断的分发"),v("code",[_._v("dispatch")]),_._v("，就像一个"),v("code",[_._v("反应堆")]),_._v("一样，看起来像不断的产生"),v("code",[_._v("IO事件")]),_._v("，因此我们称这种模式为"),v("code",[_._v("Reactor")]),_._v("模型。")]),_._v(" "),v("p",[_._v("下面我们来看下"),v("code",[_._v("Reactor模型")]),_._v("的三种分类：")]),_._v(" "),v("h4",{attrs:{id:"单reactor单线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#单reactor单线程"}},[_._v("#")]),_._v(" 单Reactor单线程")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190944960.png",alt:"图片"}}),_._v("单Reactor单线程")]),_._v(" "),v("p",[v("code",[_._v("Reactor模型")]),_._v("是依赖"),v("code",[_._v("IO多路复用技术")]),_._v("实现监听"),v("code",[_._v("IO事件")]),_._v("，从而源源不断的产生"),v("code",[_._v("IO就绪事件")]),_._v("，在Linux系统下我们使用"),v("code",[_._v("epoll")]),_._v("来进行"),v("code",[_._v("IO多路复用")]),_._v("，我们以Linux系统为例：")]),_._v(" "),v("ul",[v("li",[_._v("单"),v("code",[_._v("Reactor")]),_._v("意味着只有一个"),v("code",[_._v("epoll")]),_._v("对象，用来监听所有的事件，比如"),v("code",[_._v("连接事件")]),_._v("，"),v("code",[_._v("读写事件")]),_._v("。")]),_._v(" "),v("li",[v("code",[_._v("单线程")]),_._v("意味着只有一个线程来执行"),v("code",[_._v("epoll_wait")]),_._v("获取"),v("code",[_._v("IO就绪")]),_._v("的"),v("code",[_._v("Socket")]),_._v("，然后对这些就绪的"),v("code",[_._v("Socket")]),_._v("执行读写，以及后边的业务处理也依然是这个线程。")])]),_._v(" "),v("p",[v("code",[_._v("单Reactor单线程")]),_._v("模型就好比我们开了一个很小很小的小饭馆，作为老板的我们需要一个人干所有的事情，包括：迎接顾客（"),v("code",[_._v("accept事件")]),_._v("），为顾客介绍菜单等待顾客点菜("),v("code",[_._v("IO请求")]),_._v(")，做菜（"),v("code",[_._v("业务处理")]),_._v("），上菜（"),v("code",[_._v("IO响应")]),_._v("），送客（"),v("code",[_._v("断开连接")]),_._v("）。")]),_._v(" "),v("h4",{attrs:{id:"单reactor多线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#单reactor多线程"}},[_._v("#")]),_._v(" 单Reactor多线程")]),_._v(" "),v("p",[_._v("随着客人的增多（"),v("code",[_._v("并发请求")]),_._v("），显然饭馆里的事情只有我们一个人干（"),v("code",[_._v("单线程")]),_._v("）肯定是忙不过来的，这时候我们就需要多招聘一些员工（"),v("code",[_._v("多线程")]),_._v("）来帮着一起干上述的事情。")]),_._v(" "),v("p",[_._v("于是就有了"),v("code",[_._v("单Reactor多线程")]),_._v("模型：")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190944074.png",alt:"图片"}}),_._v("单Reactor多线程")]),_._v(" "),v("ul",[v("li",[_._v("这种模式下，也是只有一个"),v("code",[_._v("epoll")]),_._v("对象来监听所有的"),v("code",[_._v("IO事件")]),_._v("，一个线程来调用"),v("code",[_._v("epoll_wait")]),_._v("获取"),v("code",[_._v("IO就绪")]),_._v("的"),v("code",[_._v("Socket")]),_._v("。")]),_._v(" "),v("li",[_._v("但是当"),v("code",[_._v("IO就绪事件")]),_._v("产生时，这些"),v("code",[_._v("IO事件")]),_._v("对应处理的业务"),v("code",[_._v("Handler")]),_._v("，我们是通过线程池来执行。这样相比"),v("code",[_._v("单Reactor单线程")]),_._v("模型提高了执行效率，充分发挥了多核CPU的优势。")])]),_._v(" "),v("h4",{attrs:{id:"主从reactor多线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#主从reactor多线程"}},[_._v("#")]),_._v(" 主从Reactor多线程")]),_._v(" "),v("p",[_._v("做任何事情都要区分"),v("code",[_._v("事情的优先级")]),_._v("，我们应该"),v("code",[_._v("优先高效")]),_._v("的去做"),v("code",[_._v("优先级更高")]),_._v("的事情，而不是一股脑不分优先级的全部去做。")]),_._v(" "),v("p",[_._v("当我们的小饭馆客人越来越多（"),v("code",[_._v("并发量越来越大")]),_._v("），我们就需要扩大饭店的规模，在这个过程中我们发现，"),v("code",[_._v("迎接客人")]),_._v("是饭店最重要的工作，我们要先把客人迎接进来，不能让客人一看人多就走掉，只要客人进来了，哪怕菜做的慢一点也没关系。")]),_._v(" "),v("p",[_._v("于是，"),v("code",[_._v("主从Reactor多线程")]),_._v("模型就产生了：")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190944188.png",alt:"图片"}}),_._v("主从Reactor多线程")]),_._v(" "),v("ul",[v("li",[_._v("我们由原来的"),v("code",[_._v("单Reactor")]),_._v("变为了"),v("code",[_._v("多Reactor")]),_._v("。"),v("code",[_._v("主Reactor")]),_._v("用来优先"),v("code",[_._v("专门")]),_._v("做优先级最高的事情，也就是迎接客人（"),v("code",[_._v("处理连接事件")]),_._v("），对应的处理"),v("code",[_._v("Handler")]),_._v("就是图中的"),v("code",[_._v("acceptor")]),_._v("。")]),_._v(" "),v("li",[_._v("当创建好连接，建立好对应的"),v("code",[_._v("socket")]),_._v("后，在"),v("code",[_._v("acceptor")]),_._v("中将要监听的"),v("code",[_._v("read事件")]),_._v("注册到"),v("code",[_._v("从Reactor")]),_._v("中，由"),v("code",[_._v("从Reactor")]),_._v("来监听"),v("code",[_._v("socket")]),_._v("上的"),v("code",[_._v("读写")]),_._v("事件。")]),_._v(" "),v("li",[_._v("最终将读写的业务逻辑处理交给线程池处理。")])]),_._v(" "),v("blockquote",[v("p",[v("strong",[_._v("注意")]),_._v("：这里向"),v("code",[_._v("从Reactor")]),_._v("注册的只是"),v("code",[_._v("read事件")]),_._v("，并没有注册"),v("code",[_._v("write事件")]),_._v("，因为"),v("code",[_._v("read事件")]),_._v("是由"),v("code",[_._v("epoll内核")]),_._v("触发的，而"),v("code",[_._v("write事件")]),_._v("则是由用户业务线程触发的（"),v("code",[_._v("什么时候发送数据是由具体业务线程决定的")]),_._v("），所以"),v("code",[_._v("write事件")]),_._v("理应是由"),v("code",[_._v("用户业务线程")]),_._v("去注册。")])]),_._v(" "),v("blockquote",[v("p",[_._v("用户线程注册"),v("code",[_._v("write事件")]),_._v("的时机是只有当用户发送的数据"),v("code",[_._v("无法一次性")]),_._v("全部写入"),v("code",[_._v("buffer")]),_._v("时，才会去注册"),v("code",[_._v("write事件")]),_._v("，等待"),v("code",[_._v("buffer重新可写")]),_._v("时，继续写入剩下的发送数据、如果用户线程可以一股脑的将发送数据全部写入"),v("code",[_._v("buffer")]),_._v("，那么也就无需注册"),v("code",[_._v("write事件")]),_._v("到"),v("code",[_._v("从Reactor")]),_._v("中。")])]),_._v(" "),v("p",[v("code",[_._v("主从Reactor多线程")]),_._v("模型是现在大部分主流网络框架中采用的一种"),v("code",[_._v("IO线程模型")]),_._v("。我们本系列的主题"),v("code",[_._v("Netty")]),_._v("就是用的这种模型。")]),_._v(" "),v("h3",{attrs:{id:"proactor"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#proactor"}},[_._v("#")]),_._v(" Proactor")]),_._v(" "),v("p",[v("code",[_._v("Proactor")]),_._v("是基于"),v("code",[_._v("AIO")]),_._v("对"),v("code",[_._v("IO线程")]),_._v("进行分工的一种模型。前边我们介绍了"),v("code",[_._v("异步IO模型")]),_._v("，它是操作系统内核支持的一种全异步编程模型，在"),v("code",[_._v("数据准备阶段")]),_._v("和"),v("code",[_._v("数据拷贝阶段")]),_._v("全程无阻塞。")]),_._v(" "),v("p",[v("code",[_._v("ProactorIO线程模型")]),_._v("将"),v("code",[_._v("IO事件的监听")]),_._v("，"),v("code",[_._v("IO操作的执行")]),_._v("，"),v("code",[_._v("IO结果的dispatch")]),_._v("统统交给"),v("code",[_._v("内核")]),_._v("来做。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409190944822.png",alt:"图片"}}),_._v("proactor.png")]),_._v(" "),v("p",[v("strong",[v("code",[_._v("Proactor模型")]),_._v("组件介绍：")])]),_._v(" "),v("ul",[v("li",[v("code",[_._v("completion handler")]),_._v(" 为用户程序定义的异步IO操作回调函数，在异步IO操作完成时会被内核回调并通知IO结果。")]),_._v(" "),v("li",[v("code",[_._v("Completion Event Queue")]),_._v(" 异步IO操作完成后，会产生对应的"),v("code",[_._v("IO完成事件")]),_._v("，将"),v("code",[_._v("IO完成事件")]),_._v("放入该队列中。")]),_._v(" "),v("li",[v("code",[_._v("Asynchronous Operation Processor")]),_._v(" 负责"),v("code",[_._v("异步IO")]),_._v("的执行。执行完成后产生"),v("code",[_._v("IO完成事件")]),_._v("放入"),v("code",[_._v("Completion Event Queue")]),_._v(" 队列中。")]),_._v(" "),v("li",[v("code",[_._v("Proactor")]),_._v(" 是一个事件循环派发器，负责从"),v("code",[_._v("Completion Event Queue")]),_._v("中获取"),v("code",[_._v("IO完成事件")]),_._v("，并回调与"),v("code",[_._v("IO完成事件")]),_._v("关联的"),v("code",[_._v("completion handler")]),_._v("。")]),_._v(" "),v("li",[v("code",[_._v("Initiator")]),_._v(" 初始化异步操作（"),v("code",[_._v("asynchronous operation")]),_._v("）并通过"),v("code",[_._v("Asynchronous Operation Processor")]),_._v("将"),v("code",[_._v("completion handler")]),_._v("和"),v("code",[_._v("proactor")]),_._v("注册到内核。")])]),_._v(" "),v("p",[v("strong",[v("code",[_._v("Proactor模型")]),_._v("执行过程：")])]),_._v(" "),v("ul",[v("li",[_._v("用户线程发起"),v("code",[_._v("aio_read")]),_._v("，并告诉"),v("code",[_._v("内核")]),_._v("用户空间中的读缓冲区地址，以便"),v("code",[_._v("内核")]),_._v("完成"),v("code",[_._v("IO操作")]),_._v("将结果放入"),v("code",[_._v("用户空间")]),_._v("的读缓冲区，用户线程直接可以读取结果（"),v("code",[_._v("无任何阻塞")]),_._v("）。")]),_._v(" "),v("li",[v("code",[_._v("Initiator")]),_._v(" 初始化"),v("code",[_._v("aio_read")]),_._v("异步读取操作（"),v("code",[_._v("asynchronous operation")]),_._v("）,并将"),v("code",[_._v("completion handler")]),_._v("注册到内核。")])]),_._v(" "),v("blockquote",[v("p",[_._v("在"),v("code",[_._v("Proactor")]),_._v("中我们关心的"),v("code",[_._v("IO完成事件")]),_._v("：内核已经帮我们读好数据并放入我们指定的读缓冲区，用户线程可以直接读取。在"),v("code",[_._v("Reactor")]),_._v("中我们关心的是"),v("code",[_._v("IO就绪事件")]),_._v("：数据已经到来，但是需要用户线程自己去读取。")])]),_._v(" "),v("ul",[v("li",[_._v("此时用户线程就可以做其他事情了，无需等待IO结果。而内核与此同时开始异步执行IO操作。当"),v("code",[_._v("IO操作")]),_._v("完成时会产生一个"),v("code",[_._v("completion event")]),_._v("事件，将这个"),v("code",[_._v("IO完成事件")]),_._v("放入"),v("code",[_._v("completion event queue")]),_._v("中。")]),_._v(" "),v("li",[v("code",[_._v("Proactor")]),_._v("从"),v("code",[_._v("completion event queue")]),_._v("中取出"),v("code",[_._v("completion event")]),_._v("，并回调与"),v("code",[_._v("IO完成事件")]),_._v("关联的"),v("code",[_._v("completion handler")]),_._v("。")]),_._v(" "),v("li",[_._v("在"),v("code",[_._v("completion handler")]),_._v("中完成业务逻辑处理。")])]),_._v(" "),v("h3",{attrs:{id:"reactor与proactor对比"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#reactor与proactor对比"}},[_._v("#")]),_._v(" Reactor与Proactor对比")]),_._v(" "),v("p",[v("code",[_._v("Reactor")]),_._v("是基于"),v("code",[_._v("NIO")]),_._v("实现的一种"),v("code",[_._v("IO线程模型")]),_._v("，"),v("code",[_._v("Proactor")]),_._v("是基于"),v("code",[_._v("AIO")]),_._v("实现的"),v("code",[_._v("IO线程模型")]),_._v("。")]),_._v(" "),v("p",[v("code",[_._v("Reactor")]),_._v("关心的是"),v("code",[_._v("IO就绪事件")]),_._v("，"),v("code",[_._v("Proactor")]),_._v("关心的是"),v("code",[_._v("IO完成事件")]),_._v("。")]),_._v(" "),v("p",[_._v("在"),v("code",[_._v("Proactor")]),_._v("中，用户程序需要向内核传递"),v("code",[_._v("用户空间的读缓冲区地址")]),_._v("。"),v("code",[_._v("Reactor")]),_._v("则不需要。这也就导致了在"),v("code",[_._v("Proactor")]),_._v("中每个并发操作都要求有独立的缓存区，在内存上有一定的开销。")]),_._v(" "),v("p",[v("code",[_._v("Proactor")]),_._v(" 的实现逻辑复杂，编码成本较 "),v("code",[_._v("Reactor")]),_._v("要高很多。")]),_._v(" "),v("p",[v("code",[_._v("Proactor")]),_._v(" 在处理"),v("code",[_._v("高耗时 IO")]),_._v("时的性能要高于 "),v("code",[_._v("Reactor")]),_._v("，但对于"),v("code",[_._v("低耗时 IO")]),_._v("的执行效率提升"),v("code",[_._v("并不明显")]),_._v("。")]),_._v(" "),v("h2",{attrs:{id:"netty的io模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#netty的io模型"}},[_._v("#")]),_._v(" Netty的IO模型")]),_._v(" "),v("p",[_._v("在我们介绍完"),v("code",[_._v("网络数据包在内核中的收发过程")]),_._v("以及五种"),v("code",[_._v("IO模型")]),_._v("和两种"),v("code",[_._v("IO线程模型")]),_._v("后，现在我们来看下"),v("code",[_._v("netty")]),_._v("中的IO模型是什么样的。")]),_._v(" "),v("p",[_._v("在我们介绍"),v("code",[_._v("Reactor IO线程模型")]),_._v("的时候提到有三种"),v("code",[_._v("Reactor模型")]),_._v("："),v("code",[_._v("单Reactor单线程")]),_._v("，"),v("code",[_._v("单Reactor多线程")]),_._v("，"),v("code",[_._v("主从Reactor多线程")]),_._v("。")]),_._v(" "),v("p",[_._v("这三种"),v("code",[_._v("Reactor模型")]),_._v("在"),v("code",[_._v("netty")]),_._v("中都是支持的，但是我们常用的是"),v("code",[_._v("主从Reactor多线程模型")]),_._v("。")]),_._v(" "),v("p",[_._v("而我们之前介绍的三种"),v("code",[_._v("Reactor")]),_._v("只是一种模型，是一种设计思想。实际上各种网络框架在实现中并不是严格按照模型来实现的，会有一些小的不同，但大体设计思想上是一样的。")]),_._v(" "),v("p",[_._v("下面我们来看下"),v("code",[_._v("netty")]),_._v("中的"),v("code",[_._v("主从Reactor多线程模型")]),_._v("是什么样子的？")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUY4ypDTgZibnVV3K2XJZVLcEqBHAhkKJCkVgiaazsXibAeyzHXtCy8fB3JPwWlq0LL8kWQG6OVwFYDgA/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),_._v(" "),v("ul",[v("li",[v("code",[_._v("Reactor")]),_._v("在"),v("code",[_._v("netty")]),_._v("中是以"),v("code",[_._v("group")]),_._v("的形式出现的，"),v("code",[_._v("netty")]),_._v("中将"),v("code",[_._v("Reactor")]),_._v("分为两组，一组是"),v("code",[_._v("MainReactorGroup")]),_._v("也就是我们在编码中常常看到的"),v("code",[_._v("EventLoopGroup bossGroup")]),_._v(",另一组是"),v("code",[_._v("SubReactorGroup")]),_._v("也就是我们在编码中常常看到的"),v("code",[_._v("EventLoopGroup workerGroup")]),_._v("。")]),_._v(" "),v("li",[v("code",[_._v("MainReactorGroup")]),_._v("中通常只有一个"),v("code",[_._v("Reactor")]),_._v("，专门负责做最重要的事情，也就是监听连接"),v("code",[_._v("accept")]),_._v("事件。当有连接事件产生时，在对应的处理"),v("code",[_._v("handler acceptor")]),_._v("中创建初始化相应的"),v("code",[_._v("NioSocketChannel")]),_._v("（代表一个"),v("code",[_._v("Socket连接")]),_._v("）。然后以"),v("code",[_._v("负载均衡")]),_._v("的方式在"),v("code",[_._v("SubReactorGroup")]),_._v("中选取一个"),v("code",[_._v("Reactor")]),_._v("，注册上去，监听"),v("code",[_._v("Read事件")]),_._v("。")])]),_._v(" "),v("blockquote",[v("p",[v("code",[_._v("MainReactorGroup")]),_._v("中只有一个"),v("code",[_._v("Reactor")]),_._v("的原因是，通常我们服务端程序只会"),v("code",[_._v("绑定监听")]),_._v("一个端口，如果要"),v("code",[_._v("绑定监听")]),_._v("多个端口，就会配置多个"),v("code",[_._v("Reactor")]),_._v("。")])]),_._v(" "),v("ul",[v("li",[v("code",[_._v("SubReactorGroup")]),_._v("中有多个"),v("code",[_._v("Reactor")]),_._v("，具体"),v("code",[_._v("Reactor")]),_._v("的个数可以由系统参数 "),v("code",[_._v("-D io.netty.eventLoopThreads")]),_._v("指定。默认的"),v("code",[_._v("Reactor")]),_._v("的个数为"),v("code",[_._v("CPU核数 * 2")]),_._v("。"),v("code",[_._v("SubReactorGroup")]),_._v("中的"),v("code",[_._v("Reactor")]),_._v("主要负责监听"),v("code",[_._v("读写事件")]),_._v("，每一个"),v("code",[_._v("Reactor")]),_._v("负责监听一组"),v("code",[_._v("socket连接")]),_._v("。将全量的连接"),v("code",[_._v("分摊")]),_._v("在多个"),v("code",[_._v("Reactor")]),_._v("中。")]),_._v(" "),v("li",[_._v("一个"),v("code",[_._v("Reactor")]),_._v("分配一个"),v("code",[_._v("IO线程")]),_._v("，这个"),v("code",[_._v("IO线程")]),_._v("负责从"),v("code",[_._v("Reactor")]),_._v("中获取"),v("code",[_._v("IO就绪事件")]),_._v("，执行"),v("code",[_._v("IO调用获取IO数据")]),_._v("，执行"),v("code",[_._v("PipeLine")]),_._v("。")])]),_._v(" "),v("blockquote",[v("p",[v("code",[_._v("Socket连接")]),_._v("在创建后就被"),v("code",[_._v("固定的分配")]),_._v("给一个"),v("code",[_._v("Reactor")]),_._v("，所以一个"),v("code",[_._v("Socket连接")]),_._v("也只会被一个固定的"),v("code",[_._v("IO线程")]),_._v("执行，每个"),v("code",[_._v("Socket连接")]),_._v("分配一个独立的"),v("code",[_._v("PipeLine")]),_._v("实例，用来编排这个"),v("code",[_._v("Socket连接")]),_._v("上的"),v("code",[_._v("IO处理逻辑")]),_._v("。这种"),v("code",[_._v("无锁串行化")]),_._v("的设计的目的是为了防止多线程并发执行同一个socket连接上的"),v("code",[_._v("IO逻辑处理")]),_._v("，防止出现"),v("code",[_._v("线程安全问题")]),_._v("。同时使系统吞吐量达到最大化")])]),_._v(" "),v("blockquote",[v("p",[_._v("由于每个"),v("code",[_._v("Reactor")]),_._v("中只有一个"),v("code",[_._v("IO线程")]),_._v("，这个"),v("code",[_._v("IO线程")]),_._v("既要执行"),v("code",[_._v("IO活跃Socket连接")]),_._v("对应的"),v("code",[_._v("PipeLine")]),_._v("中的"),v("code",[_._v("ChannelHandler")]),_._v("，又要从"),v("code",[_._v("Reactor")]),_._v("中获取"),v("code",[_._v("IO就绪事件")]),_._v("，执行"),v("code",[_._v("IO调用")]),_._v("。所以"),v("code",[_._v("PipeLine")]),_._v("中"),v("code",[_._v("ChannelHandler")]),_._v("中执行的逻辑不能耗时太长，尽量将耗时的业务逻辑处理放入单独的业务线程池中处理，否则会影响其他连接的"),v("code",[_._v("IO读写")]),_._v("，从而近一步影响整个服务程序的"),v("code",[_._v("IO吞吐")]),_._v("。")])]),_._v(" "),v("ul",[v("li",[_._v("当"),v("code",[_._v("IO请求")]),_._v("在业务线程中完成相应的业务逻辑处理后，在业务线程中利用持有的"),v("code",[_._v("ChannelHandlerContext")]),_._v("引用将响应数据在"),v("code",[_._v("PipeLine")]),_._v("中反向传播，最终写回给客户端。")])]),_._v(" "),v("p",[v("code",[_._v("netty")]),_._v("中的"),v("code",[_._v("IO模型")]),_._v("我们介绍完了，下面我们来简单介绍下在"),v("code",[_._v("netty")]),_._v("中是如何支持前边提到的三种"),v("code",[_._v("Reactor模型")]),_._v("的。")]),_._v(" "),v("h3",{attrs:{id:"配置单reactor单线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#配置单reactor单线程"}},[_._v("#")]),_._v(" 配置单Reactor单线程")]),_._v(" "),v("div",{staticClass:"language-Java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("EventLoopGroup")]),_._v(" eventGroup "),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("new")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("NioEventLoopGroup")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),v("span",{pre:!0,attrs:{class:"token number"}},[_._v("1")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n"),v("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("ServerBootstrap")]),_._v(" serverBootstrap "),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("new")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("ServerBootstrap")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v(" \nserverBootstrap"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[_._v("group")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),_._v("eventGroup"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n")])])]),v("h3",{attrs:{id:"配置多reactor线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#配置多reactor线程"}},[_._v("#")]),_._v(" 配置多Reactor线程")]),_._v(" "),v("div",{staticClass:"language-Java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("EventLoopGroup")]),_._v(" eventGroup "),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("new")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("NioEventLoopGroup")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n"),v("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("ServerBootstrap")]),_._v(" serverBootstrap "),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("new")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("ServerBootstrap")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v(" \nserverBootstrap"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[_._v("group")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),_._v("eventGroup"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n")])])]),v("h3",{attrs:{id:"配置主从reactor多线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#配置主从reactor多线程"}},[_._v("#")]),_._v(" 配置主从Reactor多线程")]),_._v(" "),v("div",{staticClass:"language-Java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("EventLoopGroup")]),_._v(" bossGroup "),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("new")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("NioEventLoopGroup")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),v("span",{pre:!0,attrs:{class:"token number"}},[_._v("1")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v(" \n"),v("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("EventLoopGroup")]),_._v(" workerGroup "),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("new")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("NioEventLoopGroup")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n"),v("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("ServerBootstrap")]),_._v(" serverBootstrap "),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("new")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("ServerBootstrap")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v(" \nserverBootstrap"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[_._v("group")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),_._v("bossGroup"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v(" workerGroup"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n")])])]),v("h2",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[_._v("#")]),_._v(" 总结")]),_._v(" "),v("p",[_._v("本文是一篇信息量比较大的文章，用了"),v("code",[_._v("25")]),_._v("张图，"),v("code",[_._v("22336")]),_._v("个字从内核如何处理网络数据包的收发过程开始展开，随后又在"),v("code",[_._v("内核角度")]),_._v("介绍了经常容易混淆的"),v("code",[_._v("阻塞与非阻塞")]),_._v("，"),v("code",[_._v("同步与异步")]),_._v("的概念。以这个作为铺垫，我们通过一个"),v("code",[_._v("C10K")]),_._v("的问题，引出了五种"),v("code",[_._v("IO模型")]),_._v("，随后在"),v("code",[_._v("IO多路复用")]),_._v("中以技术演进的形式介绍了"),v("code",[_._v("select,poll,epoll")]),_._v("的原理和它们综合的对比。最后我们介绍了两种"),v("code",[_._v("IO线程模型")]),_._v("以及"),v("code",[_._v("netty")]),_._v("中的"),v("code",[_._v("Reactor模型")]),_._v("。")]),_._v(" "),v("p",[_._v("感谢大家听我唠叨到这里，哈哈，现在大家可以揉揉眼，伸个懒腰，好好休息一下了。")]),_._v(" "),v("h2",{attrs:{id:"参考资料"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[_._v("#")]),_._v(" 参考资料")]),_._v(" "),v("ul",[v("li",[_._v("https://mp.weixin.qq.com/s/zAh1yD5IfwuoYdrZ1tGf5Q")])])])}),[],!1,null,null,null);v.default=c.exports}}]);