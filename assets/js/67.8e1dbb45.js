(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{408:function(t,s,a){"use strict";a.r(s);var e=a(4),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("提出问题是一切智慧的开端")]),t._v(" "),s("ul",[s("li",[t._v("Reactor 模型中有哪些组件？")]),t._v(" "),s("li",[t._v("Reactor 模型中有哪些事件类型？")]),t._v(" "),s("li",[t._v("Reactor 模型中有哪些关键角色？每个角色的作用？")]),t._v(" "),s("li",[t._v("代码整体控制逻辑有哪些重要部分？")]),t._v(" "),s("li",[t._v("Redis 如何实现 Reactor 模型？")]),t._v(" "),s("li",[t._v("如何注册事件？如何循环监听事件？")])])]),t._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[s("strong",[t._v("Redis的网络框架是实现了Reactor模型吗？")])]),t._v(" "),s("p",[t._v("建议分为两部分来思考：")]),t._v(" "),s("ul",[s("li",[t._v("Reactor 模型是什么")]),t._v(" "),s("li",[t._v("Redis 代码实现是如何与 Reactor 模型相对应的")])]),t._v(" "),s("p",[t._v("Reactor 模型是高性能网络系统实现高并发请求处理的一个重要技术方案。掌握Reactor模型的设计思想与实现方法，可以指导你设计和实现自己的高并发系统。当你要处理成千上万的网络连接时，就不会一筹莫展了。")]),t._v(" "),s("h2",{attrs:{id:"reactor-模型的工作机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reactor-模型的工作机制"}},[t._v("#")]),t._v(" Reactor 模型的工作机制")]),t._v(" "),s("p",[t._v("实际上，"),s("strong",[t._v("Reactor 模型就是网络服务器端用来处理高并发网络IO请求的一种编程模型")]),t._v("。我把这个模型的特征用两个「三」来总结，也就是：")]),t._v(" "),s("ul",[s("li",[t._v("三类处理事件，连接事件、写事件、读事件；")]),t._v(" "),s("li",[t._v("三个关键角色，即 reactor、acceptor、handler。")])]),t._v(" "),s("p",[t._v("那么，Reactor 模型是如何基于这三类事件和三个角色来处理高并发请求的呢？下面我们就来具体了解下。")]),t._v(" "),s("h3",{attrs:{id:"事件类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件类型"}},[t._v("#")]),t._v(" 事件类型")]),t._v(" "),s("p",[t._v("我们先来看看这三类事件和 Reactor 模型的关系。")]),t._v(" "),s("p",[t._v("其实，Reactor 模型处理的是客户端和服务器端的 "),s("strong",[t._v("交互过程")]),t._v("，而这三类事件正好对应了客户端和服务器端交互过程中，不同类请求在服务器端引发的待处理事件：")]),t._v(" "),s("ul",[s("li",[t._v("连接事件\n"),s("ul",[s("li",[t._v("当一个客户端要和服务器端进行交互时，客户端会向服务器端发送连接请求，以建立连接，这就对应了服务器端的一个"),s("strong",[t._v("连接事件")])])])]),t._v(" "),s("li",[t._v("写事件\n"),s("ul",[s("li",[t._v("一旦连接建立后，客户端会给服务器端发送读请求，以便读取数据。服务器端在处理读请求时，需要向客户端写回数据，这对应了服务器端的"),s("strong",[t._v("写事件")])])])]),t._v(" "),s("li",[t._v("读事件\n"),s("ul",[s("li",[t._v("无论客户端给服务器端发送读或写请求，服务器端都需要从客户端读取请求内容，所以在这里，读或写请求的读取就对应了服务器端的"),s("strong",[t._v("读事件")])])])])]),t._v(" "),s("p",[t._v("如下所示的图例中，就展示了客户端和服务器端在交互过程中，不同类请求和Reactor模型事件的对应关系，你可以看下。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409151209488.png",alt:"image-20240915120925427"}})]),t._v(" "),s("p",[t._v("好，在了解了 Reactor 模型的三类事件后，你现在可能还有一个疑问：这三类事件是由谁来处理的呢？")]),t._v(" "),s("h3",{attrs:{id:"关键角色"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关键角色"}},[t._v("#")]),t._v(" 关键角色")]),t._v(" "),s("p",[t._v("这其实就是模型中 "),s("strong",[t._v("三个关键角色")]),t._v(" 的作用了：")]),t._v(" "),s("ul",[s("li",[t._v("acceptor ：连接事件由 acceptor 来处理，负责接收连接；acceptor 在接收连接后，会创建 handler，用于网络连接上对后续读写事件的处理；")]),t._v(" "),s("li",[t._v("handler：读写事件由 handler 处理；")]),t._v(" "),s("li",[t._v("reactor：在高并发场景中，连接事件、读写事件会同时发生，所以，我们需要有一个角色专门监听和分配事件，这就是 reactor 角色。当有连接请求时，reactor 将产生的连接事件交由 acceptor 处理；当有读写请求时，reactor 将读写事件交由 handler 处理。")])]),t._v(" "),s("p",[t._v("下图就展示了这三个角色之间的关系，以及它们和事件的关系，你可以看下")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409151209413.png",alt:"image-20240915120823439"}})]),t._v(" "),s("p",[t._v("事实上，这三个角色都是Reactor模型中要实现的功能的抽象。")]),t._v(" "),s("p",[s("strong",[t._v("当我们遵循Reactor模型开发服务器端的网络框架时，就需要在编程的时候，在代码功能模块中实现reactor、acceptor和handler 的逻辑")])]),t._v(" "),s("p",[t._v("那么，现在我们已经知道，这三个角色是围绕事件的监听、转发和处理来进行交互的，那么在编程时，我们又该如何实现这三者的"),s("strong",[t._v("交互")]),t._v("呢？这就离不开 "),s("strong",[t._v("事件驱动框架")]),t._v("了")]),t._v(" "),s("h3",{attrs:{id:"事件驱动框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件驱动框架"}},[t._v("#")]),t._v(" 事件驱动框架")]),t._v(" "),s("p",[t._v("所谓的事件驱动框架，就是在实现 Reactor 模型时，需要实现的代码整体控制逻辑。")]),t._v(" "),s("p",[t._v("简单来说，事件驱动框架包括了两部分")]),t._v(" "),s("ul",[s("li",[t._v("一是 "),s("strong",[t._v("事件初始化")])]),t._v(" "),s("li",[t._v("二是 "),s("strong",[t._v("事件捕获、分发和处理主循环")])])]),t._v(" "),s("p",[t._v("事件初始化是在服务器程序启动时就执行的，它的作用主要是 "),s("strong",[t._v("创建需要监听的事件类型，以及该类事件对应的handler")]),t._v("。")]),t._v(" "),s("p",[t._v("而一旦服务器完成初始化后，事件初始化也就相应完成了，服务器程序就需要进入到事件捕获、分发和处理的主循环中。")]),t._v(" "),s("p",[t._v("在开发代码时，我们通常会用一个 "),s("strong",[t._v("while循环")]),t._v(" 来作为这个主循环。")]),t._v(" "),s("p",[t._v("然后在这个主循环中，我们需要")]),t._v(" "),s("ol",[s("li",[t._v("捕获发生的事件")]),t._v(" "),s("li",[t._v("判断事件类型")]),t._v(" "),s("li",[t._v("根据事件类型，调用在初始化时创建好的事件handler来实际处理事件")])]),t._v(" "),s("p",[t._v("比如说，当有连接事件发生时，服务器程序需要调用acceptor处理函数，创建和客户端的连接。而当有读事件发生时，就表明有读或写请求发送到了服务器端，服务器程序就要调用具体的请求处理函数，从客户端连接中读取请求内容，进而就完成了读事件的处理。这里你可以参考下面给出的图例，其中显示了事件驱动框架的基本执行过程：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409151210395.png",alt:"image-20240915121009334"}})]),t._v(" "),s("p",[t._v("那么到这里，你应该就已经了解了"),s("strong",[t._v("Reactor模型的基本工作机制")]),t._v("：客户端的不同类请求会在服务器端触发连接、读、写三类事件，这三类事件的监听、分发和处理又是由reactor、acceptor、handler三类角色来完成的，然后这三类角色会通过事件驱动框架来实现交互和事件处理。")]),t._v(" "),s("p",[t._v("所以可见，实现一个Reactor模型的"),s("strong",[t._v("关键")]),t._v("，就是要实现事件驱动框架。那么，如何开发实现一个事件驱动框架呢？")]),t._v(" "),s("p",[t._v("Redis 提供了一个简洁但有效的参考实现，非常值得我们学习，而且也可以用于自己的网络系统开发。下面，我们就一起来学习下Redis中对 Reactor 模型的实现。")]),t._v(" "),s("h2",{attrs:{id:"redis-对-reactor-模型的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-对-reactor-模型的实现"}},[t._v("#")]),t._v(" Redis 对 Reactor 模型的实现")]),t._v(" "),s("p",[t._v("首先我们要知道的是，Redis 的网络框架实现了 Reactor 模型，并且自行开发实现了一个事件驱动框架。这个框架对应的Redis代码实现文件是"),s("a",{attrs:{href:"https://github.com/redis/redis/blob/5.0/src/ae.c",target:"_blank",rel:"noopener noreferrer"}},[t._v("ae.c"),s("OutboundLink")],1),t._v("，对应的头文件是"),s("a",{attrs:{href:"https://github.com/redis/redis/blob/5.0/src/ae.h",target:"_blank",rel:"noopener noreferrer"}},[t._v("ae.h"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[t._v("前面我们已经知道，事件驱动框架的实现离不开事件的定义，以及事件注册、捕获、分发和处理等一系列操作。当然，对于整个框架来说，还需要能一直运行，持续地响应发生的事件。")]),t._v(" "),s("p",[t._v("那么由此，我们从ae.h头文件中就可以看到，Redis为了实现事件驱动框架，相应地定义了")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("事件的数据结构")])]),t._v(" "),s("li",[s("strong",[t._v("框架主循环函数")])]),t._v(" "),s("li",[s("strong",[t._v("事件捕获分发函数")])]),t._v(" "),s("li",[s("strong",[t._v("事件")])]),t._v(" "),s("li",[s("strong",[t._v("handler注册函数")])])]),t._v(" "),s("p",[t._v("所以接下来，我们就依次来了解学习下")]),t._v(" "),s("h3",{attrs:{id:"事件的数据结构定义-以-aefileevent-为例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件的数据结构定义-以-aefileevent-为例"}},[t._v("#")]),t._v(" 事件的数据结构定义：以 aeFileEvent 为例")]),t._v(" "),s("p",[t._v("在 Redis 事件驱动框架的实现当中，"),s("strong",[t._v("事件的数据结构是关联事件类型和事件处理函数的关键要素")]),t._v("。而Redis的事件驱动框架定义了两类事件：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("IO事件")]),t._v("：对应 客户端发送的 网络请求")]),t._v(" "),s("li",[s("strong",[t._v("时间事件")]),t._v("：对应 Redis 自身的周期性操作")])]),t._v(" "),s("p",[t._v("注意："),s("strong",[t._v("不同类型事件的数据结构定义是不一样的")])]),t._v(" "),s("p",[t._v("为了让你能够理解事件数据结构对框架的作用，我就以 IO 事件 aeFileEvent 为例，给你介绍下它的数据结构定义")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("aeFileEvent")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" mask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* one of AE_(READABLE|WRITABLE|BARRIER) */")]),t._v("\n    aeFileProc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rfileProc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    aeFileProc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("wfileProc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("clientData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" aeFileEvent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("**mask **是用来 "),s("strong",[t._v("表示事件类型")]),t._v(" 的掩码。对于 IO事件 来说，主要有 AE_READABLE、AE_WRITABLE 和 AE_BARRIER 三种类型事件。框架在分发事件时，依赖的就是结构体中的事件类型")]),t._v(" "),s("li",[s("strong",[t._v("rfileProc 和 wfileProce")]),t._v(" 分别是指向 AE_READABLE 和 AE_WRITABLE 这两类事件的"),s("strong",[t._v("处理函数")]),t._v("，也就是 Reactor 模型中的 handler。框架在分发事件后，就需要调用结构体中定义的函数进行事件处理")]),t._v(" "),s("li",[t._v("最后一个成员变量 "),s("strong",[t._v("clientData")]),t._v(" 是用来指向客户端私有数据的指针")])]),t._v(" "),s("p",[t._v("除了事件的数据结构以外，前面我还提到 Redis 在 ae.h 文件中，定义了支撑框架运行的主要函数")]),t._v(" "),s("ul",[s("li",[t._v("负责框架主循环的 "),s("code",[t._v("aeMain")]),t._v(" 函数")]),t._v(" "),s("li",[t._v("负责事件捕获与分发的 "),s("code",[t._v("aeProcessEvents")]),t._v(" 函数")]),t._v(" "),s("li",[t._v("负责事件和 handler 注册的 "),s("code",[t._v("aeCreateFileEvent")]),t._v(" 函数")])]),t._v(" "),s("p",[t._v("它们的原型定义如下")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("aeMain")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aeEventLoop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("eventLoop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("aeCreateFileEvent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aeEventLoop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("eventLoop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" mask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" aeFileProc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("proc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("clientData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("aeProcessEvents")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aeEventLoop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("eventLoop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("而这三个函数的实现，都是在对应的 ae.c 文件中，那么接下来，我就给你具体介绍下这三个函数的主体逻辑和关键流程")]),t._v(" "),s("h3",{attrs:{id:"主循环-aemain-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主循环-aemain-函数"}},[t._v("#")]),t._v(" 主循环：aeMain 函数")]),t._v(" "),s("p",[t._v("我们先来看下 aeMain 函数")]),t._v(" "),s("p",[t._v("aeMain 函数的逻辑很简单，就是 "),s("strong",[t._v("用一个循环不停地判断事件循环的停止标记")]),t._v("。如果事件循环的停止标记被设置为 true，那么针对事件捕获、分发和处理的整个主循环就停止了；否则，主循环会一直执行。aeMain 函数的主体代码如下所示：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("aeMain")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aeEventLoop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("eventLoop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    eventLoop"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("stop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("eventLoop"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("stop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eventLoop"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("beforesleep "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            eventLoop"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("beforesleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eventLoop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("aeProcessEvents")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eventLoop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" AE_ALL_EVENTS"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("AE_CALL_AFTER_SLEEP"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("那么这里你可能要问了，"),s("strong",[t._v("aeMain 函数是在哪里被调用的呢？")])]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t···\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("aeSetBeforeSleepProc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("beforeSleep"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("aeSetAfterSleepProc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("afterSleep"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("aeMain")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("aeDeleteEventLoop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("按照事件驱动框架的编程规范来说，"),s("strong",[t._v("框架主循环是在服务器程序初始化完成后，就会开始执行")]),t._v("。因此，如果我们把目光转向 Redis 服务器初始化的函数，就会发现服务器程序的 "),s("code",[t._v("main")]),t._v(" 函数在完成 Redis server 的初始化后，会调用 "),s("code",[t._v("aeMain")]),t._v(" 函数开始执行事件驱动框架。如果你想具体查看"),s("code",[t._v("main")]),t._v("函数，"),s("code",[t._v("main")]),t._v("函数在"),s("a",{attrs:{href:"https://github.com/redis/redis/blob/5.0/src/server.c",target:"_blank",rel:"noopener noreferrer"}},[t._v("server.c"),s("OutboundLink")],1),t._v("文件中，server.c主要用于初始化服务器和执行服务器整体控制流程，你可以回顾下。")]),t._v(" "),s("p",[t._v("不过，既然aeMain函数包含了事件框架的主循环，**那么在主循环中，事件又是如何被捕获、分发和处理呢？**这就是由 "),s("code",[t._v("aeProcessEvents")]),t._v(" 函数来完成的了")]),t._v(" "),s("h3",{attrs:{id:"事件捕获与分发-aeprocessevents-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件捕获与分发-aeprocessevents-函数"}},[t._v("#")]),t._v(" 事件捕获与分发：aeProcessEvents 函数")]),t._v(" "),s("p",[s("code",[t._v("aeProcessEvents")]),t._v(" 函数实现的主要功能，包括")]),t._v(" "),s("ul",[s("li",[t._v("捕获事件")]),t._v(" "),s("li",[t._v("判断事件类型")]),t._v(" "),s("li",[t._v("调用具体的事件处理函数，从而实现事件的处理")])]),t._v(" "),s("p",[t._v("从 aeProcessEvents 函数的主体结构中，我们可以看到主要有三个 if 条件分支，如下所示：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("aeProcessEvents")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aeEventLoop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("eventLoop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" processed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" numevents"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 若没有事件处理，则立刻返回 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" AE_TIME_EVENTS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" AE_FILE_EVENTS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*如果有IO事件发生，或者紧急的时间事件发生，则开始处理*/")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eventLoop"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("maxfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" AE_TIME_EVENTS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" AE_DONT_WAIT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       …\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 检查是否有时间事件，若有，则调用processTimeEvents函数处理 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" AE_TIME_EVENTS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        processed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("processTimeEvents")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eventLoop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 返回已经处理的文件或时间*/")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" processed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这三个分支分别对应了以下三种情况：")]),t._v(" "),s("ul",[s("li",[t._v("情况一：既没有时间事件，也没有网络事件")]),t._v(" "),s("li",[t._v("情况二：有 IO 事件或者有需要紧急处理的时间事件")]),t._v(" "),s("li",[t._v("情况三：只有普通的时间事件")])]),t._v(" "),s("p",[t._v("那么对于第一种情况来说，因为没有任何事件需要处理，aeProcessEvents 函数就会直接返回到 aeMain 的主循环，开始下一轮的循环；而对于第三种情况来说，该情况发生时只有普通时间事件发生，所以 aeMain 函数会调用专门处理时间事件的函数 processTimeEvents，对时间事件进行处理")]),t._v(" "),s("p",[t._v("现在，我们再来看看第二种情况")]),t._v(" "),s("p",[t._v("首先，当该情况发生时，Redis需要捕获发生的网络事件，并进行相应的处理。那么从Redis源码中我们可以分析得到，在这种情况下，"),s("strong",[t._v("aeApiPoll 函数会被调用，用来捕获事件")]),t._v("，如下所示：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("aeProcessEvents")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aeEventLoop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("eventLoop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eventLoop"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("maxfd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" AE_TIME_EVENTS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" AE_DONT_WAIT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//调用 aeApiPoll 函数捕获事件")]),t._v("\n       numevents "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("aeApiPoll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eventLoop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tvp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n」\n")])])]),s("p",[s("strong",[t._v("那么，aeApiPoll是如何捕获事件呢？")])]),t._v(" "),s("p",[t._v("实际上，Redis是依赖于操作系统底层提供的 "),s("strong",[t._v("IO多路复用机制")]),t._v("，来实现事件捕获，检查是否有新的连接、读写事件发生。为了适配不同的操作系统，Redis对不同操作系统实现的网络IO多路复用函数，都进行了统一的封装，封装后的代码分别通过以下四个文件中实现：")]),t._v(" "),s("ul",[s("li",[t._v("ae_epoll.c，对应Linux上的IO复用函数epoll；")]),t._v(" "),s("li",[t._v("ae_evport.c，对应Solaris上的IO复用函数evport；")]),t._v(" "),s("li",[t._v("ae_kqueue.c，对应macOS或FreeBSD上的IO复用函数kqueue；")]),t._v(" "),s("li",[t._v("ae_select.c，对应Linux（或Windows）的IO复用函数select。")])]),t._v(" "),s("p",[t._v("这样，在有了这些封装代码后，Redis 在不同的操作系统上调用 IO 多路复用 API 时，就可以通过统一的接口来进行调用了。")]),t._v(" "),s("p",[t._v("不过看到这里，你可能还是不太明白 Redis 封装的具体操作，所以这里，我就以在服务器端最常用的 Linux 操作系统为例，给你介绍下Redis 是如何封装 Linux 上提供的 IO 复用 API 的。")]),t._v(" "),s("p",[t._v("首先，Linux 上提供了"),s("strong",[t._v("epoll_wait API")]),t._v("，用于检测内核中发生的网络IO事件。在"),s("a",{attrs:{href:"https://github.com/redis/redis/blob/5.0/src/ae_epoll.c",target:"_blank",rel:"noopener noreferrer"}},[t._v("ae_epoll.c"),s("OutboundLink")],1),t._v("文件中，"),s("strong",[t._v("aeApiPoll函数")]),t._v("就是封装了对epoll_wait的调用。")]),t._v(" "),s("p",[t._v("这个封装程序如下所示，其中你可以看到，在 aeApiPoll 函数中直接调用了 epoll_wait 函数，并将 epoll 返回的事件信息保存起来的逻辑：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("aeApiPoll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aeEventLoop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("eventLoop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("timeval")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("tvp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    …\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//调用 epoll_wait 获取监听到的事件")]),t._v("\n    retval "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("epoll_wait")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("epfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("events"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("eventLoop"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("setsize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            tvp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tvp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("tv_sec"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" tvp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("tv_usec"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("retval "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获得监听到的事件数量")]),t._v("\n        numevents "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" retval"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//针对每一个事件，进行处理")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" numevents"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//保存事件信息")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" numevents"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("为了让你更加清晰地理解，事件驱动框架是如何实现最终对epoll_wait的调用，这里我也放了一张示意图，你可以看看整个调用链是如何工作和实现的。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409151446771.png",alt:"image-20240915144649696"}})]),t._v(" "),s("p",[t._v("OK，现在我们就已经在 aeMain 函数中，看到了 aeProcessEvents 函数被调用，并用于捕获和分发事件的基本处理逻辑。")]),t._v(" "),s("p",[t._v("**那么，事件具体是由哪个函数来处理的呢？**这就和框架中的 aeCreateFileEvents 函数有关了。")]),t._v(" "),s("h3",{attrs:{id:"事件注册-aecreatefileevent-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件注册-aecreatefileevent-函数"}},[t._v("#")]),t._v(" 事件注册：aeCreateFileEvent 函数")]),t._v(" "),s("p",[t._v("我们知道，当Redis启动后，服务器程序的 main 函数会调用 initSever 函数来进行初始化，而在初始化的过程中，aeCreateFileEvent 就会被 initServer 函数调用，用于注册要监听的事件，以及相应的事件处理函数。")]),t._v(" "),s("p",[t._v("具体来说，在 initServer 函数的执行过程中，initServer 函数会根据启用的 IP 端口个数，为每个 IP 端口上的网络事件，调用aeCreateFileEvent，创建对 AE_READABLE 事件的监听，并且注册 AE_READABLE 事件的处理 handler，也就是 acceptTcpHandler 函数。这一过程如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409151448913.png",alt:"image-20240915144801833"}})]),t._v(" "),s("p",[t._v("所以这里我们可以看到，"),s("strong",[t._v("AE_READABLE 事件就是客户端的网络连接事件，而对应的处理函数就是接收 TCP 连接请求")]),t._v("。下面的示例代码中，显示了 initServer 中调用 aeCreateFileEvent 的部分片段，你可以看下：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("initServer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    …\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ipfd_count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("aeCreateFileEvent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ipfd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" AE_READABLE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            acceptTcpHandler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" AE_ERR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("serverPanic")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Unrecoverable error creating server.ipfd file event."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t…\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("**那么，aeCreateFileEvent 如何实现事件和处理函数的注册呢？ **这就和刚才我介绍的 Redis 对底层 IO 多路复用函数封装有关了，下面我仍然以Linux系统为例，来给你说明一下。")]),t._v(" "),s("p",[t._v("首先，Linux提供了"),s("strong",[t._v("epoll_ctl API")]),t._v("，用于增加新的观察事件。而 Redis 在此基础上，封装了 aeApiAddEvent 函数，对 epoll_ctl 进行调用。")]),t._v(" "),s("p",[t._v("所以这样一来，aeCreateFileEvent 就会调用 aeApiAddEvent，然后 aeApiAddEvent 再通过调用 epoll_ctl，来注册希望监听的事件和相应的处理函数。等到 aeProceeEvents 函数捕获到实际事件时，它就会调用注册的函数对事件进行处理了。")]),t._v(" "),s("p",[t._v("好了，到这里，我们就已经全部了解了Redis中实现事件驱动框架的三个关键函数：aeMain、aeProcessEvents，以及aeCreateFileEvent。当你要去实现一个事件驱动框架时，Redis的设计思想就具有很好的参考意义。")]),t._v(" "),s("p",[t._v("最后我再带你来简单地回顾下，在实现事件驱动框架的时候，你需要先实现一个主循环函数（对应aeMain），负责一直运行框架。其次，你需要编写事件注册函数（对应aeCreateFileEvent），用来注册监听的事件和事件对应的处理函数。"),s("strong",[t._v("只有对事件和处理函数进行了注册，才能在事件发生时调用相应的函数进行处理。")])]),t._v(" "),s("p",[t._v("最后，你需要编写事件监听、分发函数（对应aeProcessEvents），负责调用操作系统底层函数来捕获网络连接、读、写事件，并分发给不同处理函数进一步处理。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("Redis 一直被称为单线程架构，按照我们通常的理解，单个线程只能处理单个客户端的请求，但是在实际使用时，我们会看到Redis能同时和成百上千个客户端进行交互，这就是因为Redis基于Reactor模型，实现了高性能的网络框架，"),s("strong",[t._v("通过事件驱动框架，Redis可以使用一个循环来不断捕获、分发和处理客户端产生的网络连接、数据读写事件。")])]),t._v(" "),s("p",[t._v("为了方便你从代码层面掌握Redis事件驱动框架的实现，我总结了一个表格，其中列出了Redis事件驱动框架的主要函数和功能、它们所属的C文件，以及这些函数本身是在Redis代码结构中的哪里被调用。你可以使用这张表格，来巩固今天这节课学习的事件驱动框架。")]),t._v(" "),s("p",[t._v("我也再强调下，这节课我们主要关注的是，事件驱动框架的基本运行流程，并以客户端连接事件为例，将框架主循环、事件捕获分发和事件注册的关键步骤串起来，给你做了介绍。Redis事件驱动框架监听处理的事件，还包括客户端请求、服务器端写数据以及周期性操作等，这也是我下一节课要和你一起学习的主要内容。")]),t._v(" "),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("ul",[s("li",[s("p",[s("a",{attrs:{href:"https://time.geekbang.org/column/intro/100084301?utm_campaign=geektime_search&utm_content=geektime_search&utm_medium=geektime_search&utm_source=geektime_search&utm_term=geektime_search",target:"_blank",rel:"noopener noreferrer"}},[t._v("极客时间：Redis源码剖析与实战"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://book.douban.com/subject/25900156/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis设计与实现 "),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://github.com/redis/redis/blob/5.0/src/ae.c",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github：redis 源码"),s("OutboundLink")],1)])])])])}),[],!1,null,null,null);s.default=n.exports}}]);