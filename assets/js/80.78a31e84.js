(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{417:function(s,t,e){"use strict";e.r(t);var a=e(4),n=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),t("p",[s._v("Redis 集群是 Redis 提供的分布式数据库方案，集群通过分片（sharding）来进行数据共享，并提供复制和故障转移功能。")]),s._v(" "),t("p",[s._v("本节将对集群的节点、槽指派、命令执行、重新分片、转向、故障转移、消息等各个方面进行介绍")]),s._v(" "),t("h2",{attrs:{id:"节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#节点"}},[s._v("#")]),s._v(" 节点")]),s._v(" "),t("p",[s._v("一个 Redis 集群通常由多个节点（node）组成， 在刚开始的时候， 每个节点都是相互独立的， 它们都处于一个只包含自己的集群当中， 要组建一个真正可工作的集群， 我们必须将各个独立的节点连接起来， 构成一个包含多个节点的集群。")]),s._v(" "),t("p",[s._v("连接各个节点的工作可以使用 CLUSTER MEET 命令来完成， 该命令的格式如下：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("CLUSTER MEET "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("ip"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("port"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])])]),t("p",[s._v("向一个节点 "),t("code",[s._v("node")]),s._v(" 发送 CLUSTER MEET 命令， 可以让 "),t("code",[s._v("node")]),s._v(" 节点与 "),t("code",[s._v("ip")]),s._v(" 和 "),t("code",[s._v("port")]),s._v(" 所指定的节点进行握手（handshake）， 当握手成功时， "),t("code",[s._v("node")]),s._v(" 节点就会将 "),t("code",[s._v("ip")]),s._v(" 和 "),t("code",[s._v("port")]),s._v(" 所指定的节点添加到 "),t("code",[s._v("node")]),s._v(" 节点当前所在的集群中。")]),s._v(" "),t("p",[s._v("举个例子， 假设现在有三个独立的节点 "),t("code",[s._v("127.0.0.1:7000")]),s._v(" 、 "),t("code",[s._v("127.0.0.1:7001")]),s._v(" 、 "),t("code",[s._v("127.0.0.1:7002")]),s._v(" （下文省略 IP 地址，直接使用端口号来区分各个节点）， 我们首先使用客户端连上节点 7000 ， 通过发送 CLUSTER NODE 命令可以看到， 集群目前只包含 7000 自己一个节点：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("$ redis-cli -c -p 7000\n127.0.0.1:7000> CLUSTER NODES\n51549e625cfda318ad27423a31e7476fe3cd2939 :0 myself,master - 0 0 0 connected\n")])])]),t("p",[s._v("通过向节点 7000 发送以下命令， 我们可以将节点 7001 添加到节点 7000 所在的集群里面：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("127.0.0.1:7000> CLUSTER MEET 127.0.0.1 7001\nOK\n\n127.0.0.1:7000> CLUSTER NODES\n68eef66df23420a5862208ef5b1a7005b806f2ff 127.0.0.1:7001 master - 0 1388204746210 0 connected\n51549e625cfda318ad27423a31e7476fe3cd2939 :0 myself,master - 0 0 0 connected\n")])])]),t("p",[s._v("继续向节点 7000 发送以下命令， 我们可以将节点 7002 也添加到节点 7000 和节点 7001 所在的集群里面：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("127.0.0.1:7000> CLUSTER MEET 127.0.0.1 7002\nOK\n\n127.0.0.1:7000> CLUSTER NODES\n68eef66df23420a5862208ef5b1a7005b806f2ff 127.0.0.1:7001 master - 0 1388204848376 0 connected\n9dfb4c4e016e627d9769e4c9bb0d4fa208e65c26 127.0.0.1:7002 master - 0 1388204847977 0 connected\n51549e625cfda318ad27423a31e7476fe3cd2939 :0 myself,master - 0 0 0 connected\n")])])]),t("p",[s._v("现在， 这个集群里面包含了 7000 、 7001 和 7002 三个节点， 图 IMAGE_CONNECT_NODES_1 至 IMAGE_CONNECT_NODES_5 展示了这三个节点进行握手的整个过程。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409172354043.png",alt:""}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/graphviz-0dd5d540b9b878363345957a4d670ec68b8f6d2e.png",alt:""}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/graphviz-ba1a1fe21698beb1c8f1e2b8a7d4b8613f3d6762.png",alt:""}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/graphviz-82978b9d481d760ccbb0be601b833b971e03f712.png",alt:""}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/graphviz-ec041e1da87d6bfcc318c57b4af697fc6db4d500.png",alt:""}})]),s._v(" "),t("p",[s._v("本节接下来的内容将介绍启动节点的方法， 和集群有关的数据结构， 以及 CLUSTER MEET 命令的实现原理。")]),s._v(" "),t("h3",{attrs:{id:"启动节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动节点"}},[s._v("#")]),s._v(" 启动节点")]),s._v(" "),t("p",[s._v("一个节点就是一个运行在集群模式下的 Redis 服务器， Redis 服务器在启动时会根据 "),t("code",[s._v("cluster-enabled")]),s._v(" 配置选项的是否为 "),t("code",[s._v("yes")]),s._v(" 来决定是否开启服务器的集群模式， 如图 IMAGE_NODE_OR_SERVER 所示。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/graphviz-c2f64cc37f45e64ee79ac42a4f33e5ec23ad6bff.png",alt:""}})]),s._v(" "),t("p",[s._v("节点（运行在集群模式下的 Redis 服务器）会继续使用所有在单机模式中使用的服务器组件， 比如说：")]),s._v(" "),t("ul",[t("li",[s._v("节点会继续使用文件事件处理器来处理命令请求和返回命令回复。")]),s._v(" "),t("li",[s._v("节点会继续使用时间事件处理器来执行 "),t("code",[s._v("serverCron")]),s._v(" 函数， 而 "),t("code",[s._v("serverCron")]),s._v(" 函数又会调用集群模式特有的 "),t("code",[s._v("clusterCron")]),s._v(" 函数： "),t("code",[s._v("clusterCron")]),s._v(" 函数负责执行在集群模式下需要执行的常规操作， 比如向集群中的其他节点发送 Gossip 消息， 检查节点是否断线； 又或者检查是否需要对下线节点进行自动故障转移， 等等。")]),s._v(" "),t("li",[s._v("节点会继续使用数据库来保存键值对数据，键值对依然会是各种不同类型的对象。")]),s._v(" "),t("li",[s._v("节点会继续使用 RDB 持久化模块和 AOF 持久化模块来执行持久化工作。")]),s._v(" "),t("li",[s._v("节点会继续使用发布与订阅模块来执行 PUBLISH 、 SUBSCRIBE 等命令。")]),s._v(" "),t("li",[s._v("节点会继续使用复制模块来进行节点的复制工作。")]),s._v(" "),t("li",[s._v("节点会继续使用 Lua 脚本环境来执行客户端输入的 Lua 脚本。")])]),s._v(" "),t("p",[s._v("诸如此类。")]),s._v(" "),t("p",[t("strong",[s._v("除此之外")]),s._v("， 节点会继续使用 "),t("code",[s._v("redisServer")]),s._v(" 结构来保存服务器的状态， 使用 "),t("code",[s._v("redisClient")]),s._v(" 结构来保存客户端的状态， 至于那些只有在集群模式下才会用到的数据， 节点将它们保存到了 "),t("code",[s._v("cluster.h/clusterNode")]),s._v(" 结构， "),t("code",[s._v("cluster.h/clusterLink")]),s._v(" 结构， 以及 "),t("code",[s._v("cluster.h/clusterState")]),s._v(" 结构里面， 接下来的一节将对这三种数据结构进行介绍")]),s._v(" "),t("h3",{attrs:{id:"集群数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集群数据结构"}},[s._v("#")]),s._v(" 集群数据结构")]),s._v(" "),t("p",[t("code",[s._v("clusterNode")]),s._v(" 结构保存了一个节点的当前状态， 比如节点的创建时间， 节点的名字， 节点当前的配置纪元， 节点的 IP 和地址， 等等。")]),s._v(" "),t("p",[s._v("每个节点都会使用一个 "),t("code",[s._v("clusterNode")]),s._v(" 结构来记录自己的状态， 并为集群中的所有其他节点（包括主节点和从节点）都创建一个相应的 "),t("code",[s._v("clusterNode")]),s._v(" 结构， 以此来记录其他节点的状态：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("clusterNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建节点的时间")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("mstime_t")]),s._v(" ctime"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 节点的名字，由 40 个十六进制字符组成")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 例如 68eef66df23420a5862208ef5b1a7005b806f2ff")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("REDIS_CLUSTER_NAMELEN"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 节点标识")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用各种不同的标识值记录节点的角色（比如主节点或者从节点），")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 以及节点目前所处的状态（比如在线或者下线）。")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" flags"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 节点当前的配置纪元，用于实现故障转移")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint64_t")]),s._v(" configEpoch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 节点的 IP 地址")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" ip"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("REDIS_IP_STR_LEN"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 节点的端口号")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" port"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 保存连接节点所需的有关信息")]),s._v("\n    clusterLink "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("link"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[t("code",[s._v("clusterNode")]),s._v(" 结构的 "),t("code",[s._v("link")]),s._v(" 属性是一个 "),t("code",[s._v("clusterLink")]),s._v(" 结构， 该结构保存了连接节点所需的有关信息， 比如套接字描述符， 输入缓冲区和输出缓冲区：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("clusterLink")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 连接的创建时间")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("mstime_t")]),s._v(" ctime"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// TCP 套接字描述符")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" fd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出缓冲区，保存着等待发送给其他节点的消息（message）。")]),s._v("\n    sds sndbuf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输入缓冲区，保存着从其他节点接收到的消息。")]),s._v("\n    sds rcvbuf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 与这个连接相关联的节点，如果没有的话就为 NULL")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("clusterNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" clusterLink"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[t("code",[s._v("redisClient")]),s._v(" 结构和 "),t("code",[s._v("clusterLink")]),s._v(" 结构的相同和不同之处")]),s._v(" "),t("p",[t("code",[s._v("redisClient")]),s._v(" 结构和 "),t("code",[s._v("clusterLink")]),s._v(" 结构都有自己的套接字描述符和输入、输出缓冲区， 这两个结构的区别在于， "),t("code",[s._v("redisClient")]),s._v(" 结构中的套接字和缓冲区是用于连接客户端的， 而 "),t("code",[s._v("clusterLink")]),s._v(" 结构中的套接字和缓冲区则是用于连接节点的。")]),s._v(" "),t("p",[s._v("最后， 每个节点都保存着一个 "),t("code",[s._v("clusterState")]),s._v(" 结构， 这个结构记录了在当前节点的视角下， 集群目前所处的状态 —— 比如集群是在线还是下线， 集群包含多少个节点， 集群当前的配置纪元， 诸如此类：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("clusterState")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指向当前节点的指针")]),s._v("\n    clusterNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("myself"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 集群当前的配置纪元，用于实现故障转移")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint64_t")]),s._v(" currentEpoch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 集群当前的状态：是在线还是下线")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" state"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 集群中至少处理着一个槽的节点的数量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 集群节点名单（包括 myself 节点）")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 字典的键为节点的名字，字典的值为节点对应的 clusterNode 结构")]),s._v("\n    dict "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("nodes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" clusterState"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("以前面介绍的 7000 、 7001 、 7002 三个节点为例， 图 IMAGE_CLUSTER_STATE_OF_7000 展示了节点 7000 创建的 "),t("code",[s._v("clusterState")]),s._v(" 结构， 这个结构从节点 7000 的角度记录了集群、以及集群包含的三个节点的当前状态 （为了空间考虑，图中省略了 "),t("code",[s._v("clusterNode")]),s._v(" 结构的一部分属性）：")]),s._v(" "),t("ul",[t("li",[s._v("结构的 "),t("code",[s._v("currentEpoch")]),s._v(" 属性的值为 "),t("code",[s._v("0")]),s._v(" ， 表示集群当前的配置纪元为 "),t("code",[s._v("0")]),s._v(" 。")]),s._v(" "),t("li",[s._v("结构的 "),t("code",[s._v("size")]),s._v(" 属性的值为 "),t("code",[s._v("0")]),s._v(" ， 表示集群目前没有任何节点在处理槽： 因此结构的 "),t("code",[s._v("state")]),s._v(" 属性的值为 "),t("code",[s._v("REDIS_CLUSTER_FAIL")]),s._v(" —— 这表示集群目前处于下线状态。")]),s._v(" "),t("li",[s._v("结构的 "),t("code",[s._v("nodes")]),s._v(" 字典记录了集群目前包含的三个节点， 这三个节点分别由三个 "),t("code",[s._v("clusterNode")]),s._v(" 结构表示： 其中 "),t("code",[s._v("myself")]),s._v(" 指针指向代表节点 7000 的 "),t("code",[s._v("clusterNode")]),s._v(" 结构， 而字典中的另外两个指针则分别指向代表节点 7001 和代表节点 7002 的 "),t("code",[s._v("clusterNode")]),s._v(" 结构， 这两个节点是节点 7000 已知的在集群中的其他节点。")]),s._v(" "),t("li",[s._v("三个节点的 "),t("code",[s._v("clusterNode")]),s._v(" 结构的 "),t("code",[s._v("flags")]),s._v(" 属性都是 "),t("code",[s._v("REDIS_NODE_MASTER")]),s._v(" ，说明三个节点都是主节点。")])]),s._v(" "),t("p",[s._v("节点 7001 和节点 7002 也会创建类似的 "),t("code",[s._v("clusterState")]),s._v(" 结构：")]),s._v(" "),t("ul",[t("li",[s._v("不过在节点 7001 创建的 "),t("code",[s._v("clusterState")]),s._v(" 结构中， "),t("code",[s._v("myself")]),s._v(" 指针将指向代表节点 7001 的 "),t("code",[s._v("clusterNode")]),s._v(" 结构， 而节点 7000 和节点 7002 则是集群中的其他节点。")]),s._v(" "),t("li",[s._v("而在节点 7002 创建的 "),t("code",[s._v("clusterState")]),s._v(" 结构中， "),t("code",[s._v("myself")]),s._v(" 指针将指向代表节点 7002 的 "),t("code",[s._v("clusterNode")]),s._v(" 结构， 而节点 7000 和节点 7001 则是集群中的其他节点。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/graphviz-18b061357fdce60bd7df193ff4a95265bbda38b4.png",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"cluster-meet-命令的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cluster-meet-命令的实现"}},[s._v("#")]),s._v(" CLUSTER MEET 命令的实现")]),s._v(" "),t("p",[s._v("通过向节点 A 发送 CLUSTER MEET 命令， 客户端可以让接收命令的节点 A 将另一个节点 B 添加到节点 A 当前所在的集群里面：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("CLUSTER MEET "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("ip"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("port"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])])]),t("p",[s._v("收到命令的节点 A 将与节点 B 进行握手（handshake）， 以此来确认彼此的存在， 并为将来的进一步通信打好基础：")]),s._v(" "),t("ol",[t("li",[s._v("节点 A 会为节点 B 创建一个 "),t("code",[s._v("clusterNode")]),s._v(" 结构， 并将该结构添加到自己的 "),t("code",[s._v("clusterState.nodes")]),s._v(" 字典里面。")]),s._v(" "),t("li",[s._v("之后， 节点 A 将根据 CLUSTER MEET 命令给定的 IP 地址和端口号， 向节点 B 发送一条 "),t("code",[s._v("MEET")]),s._v(" 消息（message）。")]),s._v(" "),t("li",[s._v("如果一切顺利， 节点 B 将接收到节点 A 发送的 "),t("code",[s._v("MEET")]),s._v(" 消息， 节点 B 会为节点 A 创建一个 "),t("code",[s._v("clusterNode")]),s._v(" 结构， 并将该结构添加到自己的 "),t("code",[s._v("clusterState.nodes")]),s._v(" 字典里面。")]),s._v(" "),t("li",[s._v("之后， 节点 B 将向节点 A 返回一条 "),t("code",[s._v("PONG")]),s._v(" 消息。")]),s._v(" "),t("li",[s._v("如果一切顺利， 节点 A 将接收到节点 B 返回的 "),t("code",[s._v("PONG")]),s._v(" 消息， 通过这条 "),t("code",[s._v("PONG")]),s._v(" 消息节点 A 可以知道节点 B 已经成功地接收到了自己发送的 "),t("code",[s._v("MEET")]),s._v(" 消息。")]),s._v(" "),t("li",[s._v("之后， 节点 A 将向节点 B 返回一条 "),t("code",[s._v("PING")]),s._v(" 消息。")]),s._v(" "),t("li",[s._v("如果一切顺利， 节点 B 将接收到节点 A 返回的 "),t("code",[s._v("PING")]),s._v(" 消息， 通过这条 "),t("code",[s._v("PING")]),s._v(" 消息节点 B 可以知道节点 A 已经成功地接收到了自己返回的 "),t("code",[s._v("PONG")]),s._v(" 消息， 握手完成。")])]),s._v(" "),t("p",[s._v("图 IMAGE_HANDSHAKE 展示了以上步骤描述的握手过程。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/graphviz-76550f578052d5f52e35414facb5ac680d38c7f5.png",alt:""}})]),s._v(" "),t("p",[s._v("之后， 节点 A 会将节点 B 的信息通过 Gossip 协议传播给集群中的其他节点， 让其他节点也与节点 B 进行握手， 最终， 经过一段时间之后， 节点 B 会被集群中的所有节点认识")]),s._v(" "),t("h2",{attrs:{id:"槽指派"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#槽指派"}},[s._v("#")]),s._v(" 槽指派")]),s._v(" "),t("p",[s._v("Redis 集群通过分片的方式来保存数据库中的键值对：集群的整个数据库被分为 16384 个槽（slot），数据库中的每个键都属于这 16384个槽的其中一个，集群中的每个节点可以处理 0 个或最多 16384 个槽。")]),s._v(" "),t("ul",[t("li",[s._v("当数据库中的 16384 个槽都有节点在处理时，集群处于上线状态（ok）")]),s._v(" "),t("li",[s._v("如果数据库中有任何一个槽没有得到处理，那么集群处于下线状态（fail）")])]),s._v(" "),t("p",[s._v("在上一节，我们使用 CLUSTER MEET 命令将 7000、7001、7002 三个节点连接到了同一个集群里面，不过这个集群目前仍然处于下线状态，因为集群中的三个节点都没有在处理任何槽：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("127.0.0.1:7000> CLUSTER INFO\ncluster_state:fail\ncluster_slots_assigned:0\ncluster_slots_ok:0\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:3\ncluster_size:0\ncluster_current_epoch:0\ncluster_stats_messages_sent:110\ncluster_stats_messages_received:28\n")])])]),t("p",[s._v("通过向节点发送 CLUSTER ADDSLOTS 命令，我们可以将一个或多个槽指派（assign）给节点负责：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("CLUSTER ADDSLOTS <slot> [slot]\n")])])]),t("p",[s._v("举个例子，执行以下命令可以将槽0至槽5000指派给节点7000负责：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("127.0.0.1:7000> CLUSTER ADDSLOTS 0 1 2 3 4  5000\nOK\n127.0.0.1:7000> CLUSTER NODES\n9dfb4c4e016e627d9769e4c9bb0d4fa208e65c26 127.0.0.1:7002 master - 0 1388316664849 0 connected\n68eef66df23420a5862208ef5b1a7005b806f2ff 127.0.0.1:7001 master - 0 1388316665850 0 connected\n51549e625cfda318ad27423a31e7476fe3cd2939 :0 myself,master - 0 0 0 connected 0-5000\n")])])]),t("p",[s._v("为了让 7000、7001、7002 三个节点所在的集群进入上线状态，我们继续执行以下命令，将槽 5001 至槽 10000 指派给节点 7001 负责：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("127.0.0.1:7001> CLUSTER ADDSLOTS 5001 5002 5003 5004 10000\nOK\n")])])]),t("p",[s._v("然后将槽 10001 至槽 16383 指派给7002负责：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("127.0.0.1:7002> CLUSTER ADDSLOTS 10001 10002 10003 10004 16383\nOK\n")])])]),t("p",[s._v("当以上三个CLUSTER ADDSLOTS命令都执行完毕之后，数据库中的16384个槽都已经被指派给了相应的节点，集群进入上线状态：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("127.0.0.1:7000> CLUSTER INFO\ncluster_state:ok\ncluster_slots_assigned:16384\ncluster_slots_ok:16384\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:3\ncluster_size:3\ncluster_current_epoch:0\ncluster_stats_messages_sent:2699\ncluster_stats_messages_received:2617\n127.0.0.1:7000> CLUSTER NODES\n9dfb4c4e016e627d9769e4c9bb0d4fa208e65c26 127.0.0.1:7002 master - 0 1388317426165 0 connected 10001-16383\n68eef66df23420a5862208ef5b1a7005b806f2ff 127.0.0.1:7001 master - 0 1388317427167 0 connected 5001-10000\n51549e625cfda318ad27423a31e7476fe3cd2939 :0 myself,master - 0 0 0 connected 0-5000\n")])])]),t("p",[s._v("本节接下来的内容将首先介绍节点保存槽指派信息的方法，以及节点之间传播槽指派信息的方法，之后再介绍CLUSTER ADDSLOTS命令的实现。")]),s._v(" "),t("h3",{attrs:{id:"记录节点的槽指派信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#记录节点的槽指派信息"}},[s._v("#")]),s._v(" 记录节点的槽指派信息")]),s._v(" "),t("p",[s._v("clusterNode结构的slots属性和numslot属性记录了节点负责处理哪些槽：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("clusterNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16384")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" numslots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("slots属性是一个二进制位数组（bit array），这个数组的长度为16384/8=2048个字节，共包含16384个二进制位。")]),s._v(" "),t("p",[s._v("Redis以0为起始索引，16383为终止索引，对slots数组中的16384个二进制位进行编号，并根据索引i上的二进制位的值来判断节点是否负责处理槽i：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("如果slots数组在索引i上的二进制位的值为1，那么表示节点负责处理槽i。")])]),s._v(" "),t("li",[t("p",[s._v("如果slots数组在索引i上的二进制位的值为0，那么表示节点不负责处理槽i。")])])]),s._v(" "),t("p",[s._v("图17-9展示了一个slots数组示例：这个数组索引0至索引7上的二进制位的值都为1，其余所有二进制位的值都为0，这表示节点负责处理槽0至槽7。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000159.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-9　一个slots数组示例")]),s._v(" "),t("p",[s._v("图17-10 展示了另一个slots数组示例：这个数组索引1、3、5、8、9、10上的二进制位的值都为1，而其余所有二进制位的值都为0，这表示节点负责处理槽1、3、5、8、9、10。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000302.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-10　另一个slots数组示例")]),s._v(" "),t("p",[s._v("因为取出和设置slots数组中的任意一个二进制位的值的复杂度仅为O（1），所以对于一个给定节点的slots数组来说，程序检查节点是否负责处理某个槽，又或者将某个槽指派给节点负责，这两个动作的复杂度都是O（1）。")]),s._v(" "),t("p",[s._v("至于numslots属性则记录节点负责处理的槽的数量，也即是slots数组中值为1的二进制位的数量。")]),s._v(" "),t("p",[s._v("比如说，对于图17-9所示的slots数组来说，节点处理的槽数量为8，而对于图17-10所示的slots数组来说，节点处理的槽数量为6。")]),s._v(" "),t("h3",{attrs:{id:"传播节点的槽指派信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#传播节点的槽指派信息"}},[s._v("#")]),s._v(" 传播节点的槽指派信息")]),s._v(" "),t("p",[s._v("一个节点除了会将自己负责处理的槽记录在 clusterNode 结构的 slots 属性和 numslots 属性之外，它还会将自己的 slots 数组通过消息发送给集群中的其他节点，以此来告知其他节点自己目前负责处理哪些槽。")]),s._v(" "),t("p",[s._v("举个例子，对于前面展示的包含7000、7001、7002三个节点的集群来说：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("节点7000会通过消息向节点7001和节点7002发送自己的slots数组，以此来告知这两个节点，自己负责处理槽0至槽5000，如图17-11所示。")])]),s._v(" "),t("li",[t("p",[s._v("节点7001会通过消息向节点7000和节点7002发送自己的slots数组，以此来告知这两个节点，自己负责处理槽5001至槽10000，如图17-12所示。")])]),s._v(" "),t("li",[t("p",[s._v("节点7002会通过消息向节点7000和节点7001发送自己的slots数组，以此来告知这两个节点，自己负责处理槽10001至槽16383，如图17-13所示。")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000273.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-11　7000告知7001和7002自己负责处理的槽")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000058.jpg",alt:"img"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000146.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-13　7002告知7000和7001自己负责处理的槽")]),s._v(" "),t("p",[s._v("当节点A通过消息从节点B那里接收到节点B的slots数组时，节点A会在自己的 clusterState.nodes 字典中查找节点B对应的 clusterNode 结构，并对结构中的 slots 数组进行保存或者更新。")]),s._v(" "),t("p",[s._v("因为集群中的每个节点都会将自己的 slots 数组通过消息发送给集群中的其他节点，并且每个接收到 slots 数组的节点都会将数组保存到相应节点的 clusterNode 结构里面，因此，集群中的每个节点都会知道数据库中的 16384 个槽分别被指派给了集群中的哪些节点。")]),s._v(" "),t("h3",{attrs:{id:"记录集群所有槽的指派信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#记录集群所有槽的指派信息"}},[s._v("#")]),s._v(" 记录集群所有槽的指派信息")]),s._v(" "),t("p",[s._v("clusterState 结构中的 slots 数组记录了集群中所有 16384 个槽的指派信息：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("clusterState")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n \n  clusterNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16384")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" clusterState"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("slots数组包含16384个项，每个数组项都是一个指向clusterNode结构的指针：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("如果slots[i]指针指向NULL，那么表示槽i尚未指派给任何节点。")])]),s._v(" "),t("li",[t("p",[s._v("如果slots[i]指针指向一个clusterNode结构，那么表示槽i已经指派给了clusterNode结构所代表的节点。")])])]),s._v(" "),t("p",[s._v("举个例子，对于7000、7001、7002三个节点来说，它们的clusterState结构的slots数组将会是图17-14所示的样子：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("数组项slots[0]至slots[5000]的指针都指向代表节点7000的clusterNode结构，表示槽0至5000都指派给了节点7000。")])]),s._v(" "),t("li",[t("p",[s._v("数组项slots[5001]至slots[10000]的指针都指向代表节点7001的clusterNode结构，表示槽5001至10000都指派给了节点7001。")])]),s._v(" "),t("li",[t("p",[s._v("数组项slots[10001]至slots[16383]的指针都指向代表节点7002的clusterNode结构，表示槽10001至16383都指派给了节点7002。")])])]),s._v(" "),t("p",[s._v("如果只将槽指派信息保存在各个节点的clusterNode.slots数组里，会出现一些无法高效地解决的问题，而clusterState.slots数组的存在解决了这些问题：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("如果节点只使用clusterNode.slots数组来记录槽的指派信息，那么为了知道槽i是否已经被指派，或者槽i被指派给了哪个节点，程序需要遍历clusterState.nodes字典中的所有clusterNode结构，检查这些结构的slots数组，直到找到负责处理槽i的节点为止，这个过程的复杂度为O（N），其中N为clusterState.nodes字典保存的clusterNode结构的数量。")])]),s._v(" "),t("li",[t("p",[s._v("而通过将所有槽的指派信息保存在clusterState.slots数组里面，程序要检查槽i是否已经被指派，又或者取得负责处理槽i的节点，只需要访问clusterState.slots[i]的值即可，这个操作的复杂度仅为"),t("code",[s._v("O(1)")]),s._v("。")])])]),s._v(" "),t("p",[s._v("举个例子，对于图17-14所示的slots数组来说，如果程序需要知道槽10002被指派给了哪个节点，那么只要访问数组项slots[10002]，就可以马上知道槽10002被指派给了节点7002，如图17-15所示。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000070.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-15　访问slots[10002]的值")]),s._v(" "),t("p",[s._v("要说明的一点是，虽然clusterState.slots数组记录了集群中所有槽的指派信息，"),t("strong",[s._v("但使用clusterNode结构的slots数组来记录单个节点的槽指派信息仍然是有必要的")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("因为当程序需要将某个节点的槽指派信息通过消息发送给其他节点时，程序只需要将相应节点的clusterNode.slots数组整个发送出去就可以了。")])]),s._v(" "),t("li",[t("p",[s._v("另一方面，如果Redis不使用clusterNode.slots数组，而单独使用clusterState.slots数组的话，那么每次要将节点A的槽指派信息传播给其他节点时，程序必须先遍历整个clusterState.slots数组，记录节点A负责处理哪些槽，然后才能发送节点A的槽指派信息，这比直接发送clusterNode.slots数组要麻烦和低效得多。")])])]),s._v(" "),t("p",[s._v("clusterState.slots数组记录了集群中所有槽的指派信息，而clusterNode.slots数组只记录了clusterNode结构所代表的节点的槽指派信息，这是两个slots数组的关键区别所在。")]),s._v(" "),t("h3",{attrs:{id:"cluster-addslots-命令的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cluster-addslots-命令的实现"}},[s._v("#")]),s._v(" CLUSTER ADDSLOTS 命令的实现")]),s._v(" "),t("p",[s._v("CLUSTER ADDSLOTS 命令接受一个或多个槽作为参数，并将所有输入的槽指派给接收该命令的节点负责：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("CLUSTER ADDSLOTS "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("slot"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("slot"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),t("p",[s._v("CLUSTER ADDSLOTS 命令的实现可以用以下伪代码来表示：")]),s._v(" "),t("div",{staticClass:"language-python extra-class"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("CLUSTER_ADDSLOTS")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("all_input_slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 遍历所有输入槽，检查它们是否都是未指派槽")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" all_input_slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果有哪怕一个槽已经被指派给了某个节点")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 那么向客户端返回错误，并终止命令执行")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" clusterState"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" NULL"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            reply_error"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果所有输入槽都是未指派槽")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 那么再次遍历所有输入槽，将这些槽指派给当前节点")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" all_input_slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置clusterState结构的slots数组")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将slots[i]的指针指向代表当前节点的clusterNode结构")]),s._v("\n        clusterState"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" clusterState"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("myself\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 访问代表当前节点的clusterNode结构的slots数组")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将数组在索引i上的二进制位设置为1")]),s._v("\n        setSlotBit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("clusterState"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("myself"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("slots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("举个例子，图17-16展示了一个节点的clusterState结构，clusterState.slots数组中的所有指针都指向NULL，并且clusterNode.slots数组中的所有二进制位的值都是0，这说明当前节点没有被指派任何槽，并且集群中的所有槽都是未指派的。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000258.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-16　节点的clusterState结构")]),s._v(" "),t("p",[s._v("当客户端对17-16所示的节点执行命令：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("CLUSTER ADDSLOTS 1 2\n")])])]),t("p",[s._v("将槽1和槽2指派给节点之后，节点的clusterState结构将被更新成图17-17所示的样子：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("clusterState.slots数组在索引1和索引2上的指针指向了代表当前节点的clusterNode结构。")])]),s._v(" "),t("li",[t("p",[s._v("并且clusterNode.slots数组在索引1和索引2上的位被设置成了1。")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000322.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-17　执行 CLUSTER ADDSLOTS 命令之后的 clusterState 结构")]),s._v(" "),t("p",[s._v("最后，在 CLUSTER ADDSLOTS 命令执行完毕之后，节点会通过发送消息告知集群中的其他节点，自己目前正在负责处理哪些槽。")]),s._v(" "),t("h2",{attrs:{id:"在集群中执行命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在集群中执行命令"}},[s._v("#")]),s._v(" 在集群中执行命令")]),s._v(" "),t("p",[s._v("在对数据库中的16384个槽都进行了指派之后，集群就会进入上线状态，这时客户端就可以向集群中的节点发送数据命令了。")]),s._v(" "),t("p",[s._v("当客户端向节点发送与数据库键有关的命令时，接收命令的节点会计算出命令要处理的数据库键属于哪个槽，并检查这个槽是否指派给了自己：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("如果键所在的槽正好就指派给了当前节点，那么节点直接执行这个命令。")])]),s._v(" "),t("li",[t("p",[s._v("如果键所在的槽并没有指派给当前节点，那么节点会向客户端返回一个MOVED错误，指引客户端转向（redirect）至正确的节点，并再次发送之前想要执行的命令。")])])]),s._v(" "),t("p",[s._v("图17-18展示了这两种情况的判断流程。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000362.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-18　判断客户端是否需要转向的流程")]),s._v(" "),t("p",[s._v("举个例子，如果我们在之前提到的，由7000、7001、7002三个节点组成的集群中，用客户端连上节点7000，并发送以下命令，那么命令会直接被节点7000执行：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('127.0.0.1:7000> SET date "2013-12-31"\nOK\n')])])]),t("p",[s._v("因为键date所在的槽2022正是由节点7000负责处理的。")]),s._v(" "),t("p",[s._v("但是，如果我们执行以下命令，那么客户端会先被转向至节点7001，然后再执行命令：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('127.0.0.1:7000> SET msg "happy new year!"\n-> Redirected to slot [6257] located at 127.0.0.1:7001\nOK\n127.0.0.1:7001> GET msg\n"happy new year!"\n')])])]),t("p",[s._v("这是因为键msg所在的槽6257是由节点7001负责处理的，而不是由最初接收命令的节点7000负责处理：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("当客户端第一次向节点7000发送SET命令的时候，节点7000会向客户端返回MOVED错误，指引客户端转向至节点7001。")])]),s._v(" "),t("li",[t("p",[s._v("当客户端转向到节点7001之后，客户端重新向节点7001发送SET命令，这个命令会被节点7001成功执行。")])])]),s._v(" "),t("p",[s._v("本节接下来的内容将介绍计算键所属槽的方法，节点判断某个槽是否由自己负责的方法，以及MOVED错误的实现方法，最后，本节还会介绍节点和单机Redis服务器保存键值对数据的相同和不同之处。")]),s._v(" "),t("h3",{attrs:{id:"计算键属于哪个槽"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计算键属于哪个槽"}},[s._v("#")]),s._v(" 计算键属于哪个槽")]),s._v(" "),t("p",[s._v("节点使用以下算法来计算给定键key属于哪个槽：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("def "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("slot_number")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("CRC16")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16383")]),s._v("\n")])])]),t("p",[s._v("其中CRC16（key）语句用于计算键key的CRC-16校验和，而&16383语句则用于计算出一个介于0至16383之间的整数作为键key的槽号。")]),s._v(" "),t("p",[s._v("使用CLUSTER KEYSLOT"),t("key",[s._v("命令可以查看一个给定键属于哪个槽：")])],1),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('127.0.0.1:7000> CLUSTER KEYSLOT "date"\n(integer) 2022\n127.0.0.1:7000> CLUSTER KEYSLOT "msg"\n(integer) 6257\n127.0.0.1:7000> CLUSTER KEYSLOT "name"\n(integer) 5798\n127.0.0.1:7000> CLUSTER KEYSLOT "fruits"\n(integer) 14943\n')])])]),t("p",[s._v("CLUSTER KEYSLOT命令就是通过调用上面给出的槽分配算法来实现的，以下是该命令的伪代码实现：")]),s._v(" "),t("div",{staticClass:"language-python extra-class"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("CLUSTER_KEYSLOT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 计算槽号")]),s._v("\n    slot "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" slot_number"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将槽号返回给客户端")]),s._v("\n    reply_client"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("slot"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("h3",{attrs:{id:"判断槽是否由当前节点负责处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#判断槽是否由当前节点负责处理"}},[s._v("#")]),s._v(" 判断槽是否由当前节点负责处理")]),s._v(" "),t("p",[s._v("当节点计算出键所属的槽i之后，节点就会检查自己在clusterState.slots数组中的项i，判断键所在的槽是否由自己负责：")]),s._v(" "),t("p",[s._v("1）如果clusterState.slots[i]等于clusterState.myself，那么说明槽i由当前节点负责，节点可以执行客户端发送的命令。")]),s._v(" "),t("p",[s._v("2）如果clusterState.slots[i]不等于clusterState.myself，那么说明槽i并非由当前节点负责，节点会根据clusterState.slots[i]指向的clusterNode结构所记录的节点IP和端口号，向客户端返回MOVED错误，指引客户端转向至正在处理槽i的节点。")]),s._v(" "),t("p",[s._v("举个例子，假设图17-19为节点7000的clusterState结构：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v('当客户端向节点7000发送命令SET date"2013-12-31"的时候，节点首先计算出键date属于槽2022，然后检查得出clusterState.slots[2022]等于clusterState.myself，这说明槽2022正是由节点7000负责，于是节点7000直接执行这个SET命令，并将结果返回给发送命令的客户端。')])]),s._v(" "),t("li",[t("p",[s._v('当客户端向节点7000发送命令SET msg"happy new year！"的时候，节点首先计算出键msg属于槽6257，然后检查clusterState.slots[6257]是否等于clusterState.myself，结果发现两者并不相等：这说明槽6257并非由节点7000负责处理，于是节点7000访问clusterState.slots[6257]所指向的clusterNode结构，并根据结构中记录的IP地址127.0.0.1和端口号7001，向客户端返回错误MOVED 6257 127.0.0.1:7001，指引节点转向至正在负责处理槽6257的节点7001。')])])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000357.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-19　节点7000的clusterState结构")]),s._v(" "),t("h3",{attrs:{id:"moved-错误"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#moved-错误"}},[s._v("#")]),s._v(" MOVED 错误")]),s._v(" "),t("p",[s._v("当节点发现键所在的槽并非由自己负责处理的时候，节点就会向客户端返回一个 MOVED 错误，指引客户端转向至正在负责槽的节点。")]),s._v(" "),t("p",[s._v("MOVED错误的格式为：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("MOVED <slot> <ip>:<port>\n")])])]),t("p",[s._v("其中slot为键所在的槽，而ip和port则是负责处理槽slot的节点的IP地址和端口号。例如错误：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("OVED 10086 127.0.0.1:7002\n")])])]),t("p",[s._v("表示槽10086正由IP地址为127.0.0.1，端口号为7002的节点负责。")]),s._v(" "),t("p",[s._v("又例如错误：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("MOVED 789 127.0.0.1:7000\n")])])]),t("p",[s._v("表示槽789正由IP地址为127.0.0.1，端口号为7000的节点负责。")]),s._v(" "),t("p",[s._v("当客户端接收到节点返回的MOVED错误时，客户端会根据MOVED错误中提供的IP地址和端口号，转向至负责处理槽slot的节点，并向该节点重新发送之前想要执行的命令。以前面的客户端从节点7000转向至7001的情况作为例子：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('127.0.0.1:7000> SET msg "happy new year!"\n-> Redirected to slot [6257] located at 127.0.0.1:7001\nOK\n127.0.0.1:7001>\n')])])]),t("p",[s._v("图17-20展示了客户端向节点7000发送SET命令，并获得MOVED错误的过程。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000245.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-20　节点7000向客户端返回MOVED错误")]),s._v(" "),t("p",[s._v("而图17-21则展示了客户端根据MOVED错误，转向至节点7001，并重新发送SET命令的过程。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000234.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-21　客户端根据MOVED错误的指示转向至节点7001")]),s._v(" "),t("p",[s._v("一个集群客户端通常会与集群中的多个节点创建套接字连接，而所谓的节点转向实际上就是换一个套接字来发送命令。")]),s._v(" "),t("p",[s._v("如果客户端尚未与想要转向的节点创建套接字连接，那么客户端会先根据MOVED错误提供的IP地址和端口号来连接节点，然后再进行转向。")]),s._v(" "),t("blockquote",[t("p",[s._v("被隐藏的MOVED错误")]),s._v(" "),t("p",[s._v("集群模式的redis-cli客户端在接收到MOVED错误时，并不会打印出MOVED错误，而是根据MOVED错误自动进行节点转向，并打印出转向信息，所以我们是看不见节点返回的MOVED错误的：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("$ redis"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("cli "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7000")]),s._v(" # \n集群模式\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7000")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" SET msg "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"happy new year!"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" Redirected to slot "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6257")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" located at "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7001")]),s._v("\nOK\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7001")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])])]),t("p",[s._v("但是，如果我们使用单机（stand alone）模式的redis-cli客户端，再次向节点7000发送相同的命令，那么MOVED错误就会被客户端打印出来：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[s._v("$ redis"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("cli "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7000")]),s._v(" # \n单机模式\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7000")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" SET msg "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"happy new year!"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("error"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" MOVED "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6257")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7001")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7000")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])])]),t("p",[s._v("这是因为单机模式的redis-cli客户端不清楚MOVED错误的作用，所以它只会直接将MOVED错误直接打印出来，而不会进行自动转向。")])]),s._v(" "),t("h3",{attrs:{id:"节点数据库的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#节点数据库的实现"}},[s._v("#")]),s._v(" 节点数据库的实现")]),s._v(" "),t("p",[s._v("集群节点保存键值对以及键值对过期时间的方式，与第9章里面介绍的单机Redis服务器保存键值对以及键值对过期时间的方式完全相同。")]),s._v(" "),t("p",[s._v("节点和单机服务器在数据库方面的一个区别是，节点只能使用0号数据库，而单机Redis服务器则没有这一限制。")]),s._v(" "),t("p",[s._v('举个例子，图17-22展示了节点7000的数据库状态，数据库中包含列表键"lst"，哈希键"book"，以及字符串键"date"，其中键"lst"和键"book"带有过期时间。')]),s._v(" "),t("p",[s._v("另外，除了将键值对保存在数据库里面之外，节点还会用clusterState结构中的slots_to_keys跳跃表来保存槽和键之间的关系：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("clusterState")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n  zskiplist "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("slots_to_keys"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" clusterState"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000257.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-22　节点7000的数据库")]),s._v(" "),t("p",[s._v("slots_to_keys跳跃表每个节点的分值（score）都是一个槽号，而每个节点的成员（member）都是一个数据库键：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("每当节点往数据库中添加一个新的键值对时，节点就会将这个键以及键的槽号关联到slots_to_keys跳跃表。")])]),s._v(" "),t("li",[t("p",[s._v("当节点删除数据库中的某个键值对时，节点就会在slots_to_keys跳跃表解除被删除键与槽号的关联。")])])]),s._v(" "),t("p",[s._v("举个例子，对于图17-22所示的数据库，节点7000将创建类似图17-23所示的slots_to_keys跳跃表：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v('键"book"所在跳跃表节点的分值为1337.0，这表示键"book"所在的槽为1337。')])]),s._v(" "),t("li",[t("p",[s._v('键"date"所在跳跃表节点的分值为2022.0，这表示键"date"所在的槽为2022。')])]),s._v(" "),t("li",[t("p",[s._v('键"lst"所在跳跃表节点的分值为3347.0，这表示键"lst"所在的槽为3347。')])])]),s._v(" "),t("p",[s._v("通过在slots_to_keys跳跃表中记录各个数据库键所属的槽，节点可以很方便地对属于某个或某些槽的所有数据库键进行批量操作，例如命令CLUSTER GETKEYSINSLOT"),s._t("default",(function(){return[t("count",[s._v("命令可以返回最多count个属于槽slot的数据库键，而这个命令就是通过遍历slots_to_keys跳跃表来实现的。")])]}))],2),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000083.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-23　节点7000的slots_to_keys跳跃表")]),s._v(" "),t("h2",{attrs:{id:"重新分片"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重新分片"}},[s._v("#")]),s._v(" 重新分片")]),s._v(" "),t("p",[s._v("Redis集群的重新分片操作可以将任意数量已经指派给某个节点（源节点）的槽改为指派给另一个节点（目标节点），并且相关槽所属的键值对也会从源节点被移动到目标节点。")]),s._v(" "),t("p",[s._v("重新分片操作可以在线（online）进行，在重新分片的过程中，集群不需要下线，并且源节点和目标节点都可以继续处理命令请求。")]),s._v(" "),t("p",[s._v("举个例子，对于之前提到的，包含7000、7001、7002三个节点的集群来说，我们可以向这个集群添加一个IP为127.0.0.1，端口号为7003的节点（后面简称节点7003）：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("$ redis-cli -c -p 7000\n127.0.0.1:7000> CLUSTER MEET 127.0.0.1 7003\nOK\n127.0.0.1:7000> cluster nodes\n51549e625cfda318ad27423a31e7476fe3cd2939 :0 myself,master - 0 0 0 connected 0-5000\n68eef66df23420a5862208ef5b1a7005b806f2ff 127.0.0.1:7001 master - 0 1388635782831 0 connected 5001-10000\n9dfb4c4e016e627d9769e4c9bb0d4fa208e65c26 127.0.0.1:7002 master - 0 1388635782831 0 connected 10001-16383\n04579925484ce537d3410d7ce97bd2e260c459a2 127.0.0.1:7003 master - 0 1388635782330 0 connected\n")])])]),t("p",[s._v("然后通过重新分片操作，将原本指派给节点7002的槽15001至16383改为指派给节点7003。")]),s._v(" "),t("p",[s._v("以下是重新分片操作执行之后，节点的槽分配状态：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("127.0.0.1:7000> cluster nodes\n51549e625cfda318ad27423a31e7476fe3cd2939 :0 myself,master -0 0 0 connected 0-5000\n68eef66df23420a5862208ef5b1a7005b806f2ff 127.0.0.1:7001 master -0 1388635782831 0 connected 5001-10000\n9dfb4c4e016e627d9769e4c9bb0d4fa208e65c26 127.0.0.1:7002 master -0 1388635782831 0 connected 10001-15000\n04579925484ce537d3410d7ce97bd2e260c459a2 127.0.0.1:7003 master -0 1388635782330 0 connected 15001-16383\n")])])]),t("p",[t("strong",[s._v("重新分片的实现原理")])]),s._v(" "),t("p",[s._v("Redis集群的重新分片操作是由Redis的集群管理软件redis-trib负责执行的，Redis提供了进行重新分片所需的所有命令，而redis-trib则通过向源节点和目标节点发送命令来进行重新分片操作。")]),s._v(" "),t("p",[s._v("redis-trib对集群的单个槽slot进行重新分片的步骤如下：")]),s._v(" "),t("p",[s._v("1）redis-trib对目标节点发送"),t("code",[s._v("CLUSTER SETSLOT <slot> IMPORTING <source_id>")]),s._v(" 命令，让目标节点准备好从源节点导入（import）属于槽slot的键值对。")]),s._v(" "),t("p",[s._v("2）redis-trib对源节点发送"),t("code",[s._v("CLUSTER SETSLOT <slot> MIGRATING <target_id>")]),s._v("命令，让源节点准备好将属于槽slot的键值对迁移（migrate）至目标节点。")]),s._v(" "),t("p",[s._v("3）redis-trib向源节点发送"),t("code",[s._v("CLUSTER GETKEYSINSLOT <slot> <count>")]),s._v(" 命令，获得最多count个属于槽slot的键值对的键名（key name）。")]),s._v(" "),t("p",[s._v("4）对于步骤3获得的每个键名，redis-trib都向源节点发送一个"),t("code",[s._v("MIGRATE <target_ip ><target_port> <key_name> 0 <timeout>")]),s._v("命令，将被选中的键原子地从源节点迁移至目标节点。")]),s._v(" "),t("p",[s._v("5）重复执行步骤3和步骤4，直到源节点保存的所有属于槽slot的键值对都被迁移至目标节点为止。每次迁移键的过程如图17-24所示。")]),s._v(" "),t("p",[s._v("6）redis-trib向集群中的任意一个节点发送"),t("code",[s._v("CLUSTER SETSLOT <slot> NODE <target_id>")]),s._v("命令，将槽slot指派给目标节点，这一指派信息会通过消息发送至整个集群，最终集群中的所有节点都会知道槽slot已经指派给了目标节点。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000287.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-24　迁移键的过程")]),s._v(" "),t("p",[s._v("图17-25 展示了对槽slot进行重新分片的整个过程。")]),s._v(" "),t("p",[s._v("如果重新分片涉及多个槽，那么redis-trib将对每个给定的槽分别执行上面给出的步骤。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000283.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-25　对槽slot进行重新分片的过程")]),s._v(" "),t("h2",{attrs:{id:"ask-错误"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ask-错误"}},[s._v("#")]),s._v(" ASK 错误")]),s._v(" "),t("p",[s._v("在进行重新分片期间，源节点向目标节点迁移一个槽的过程中，可能会出现这样一种情况：属于被迁移槽的一部分键值对保存在源节点里面，而另一部分键值对则保存在目标节点里面。")]),s._v(" "),t("p",[s._v("当客户端向源节点发送一个与数据库键有关的命令，并且命令要处理的数据库键恰好就属于正在被迁移的槽时：")]),s._v(" "),t("ul",[t("li",[s._v("源节点会先在自己的数据库里面查找指定的键，如果找到的话，就直接执行客户端发送的命令。")]),s._v(" "),t("li",[s._v("相反地，如果源节点没能在自己的数据库里面找到指定的键，那么这个键有可能已经被迁移到了目标节点，源节点将向客户端返回一个ASK错误，指引客户端转向正在导入槽的目标节点，并再次发送之前想要执行的命令。")])]),s._v(" "),t("p",[s._v("图17-26展示了源节点判断是否需要向客户端发送ASK错误的整个过程。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000210.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-26　判断是否发送ASK错误的过程")]),s._v(" "),t("p",[s._v('举个例子，假设节点7002正在向节点7003迁移槽16198，这个槽包含"is"和"love"两个键，其中键"is"还留在节点7002，而键"love"已经被迁移到了节点7003。')]),s._v(" "),t("p",[s._v('如果我们向节点7002发送关于键"is"的命令，那么这个命令会直接被节点7002执行：')]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('127.0.0.1:7002> GET "is"\n"you get the key \'is\'"\n')])])]),t("p",[s._v('而如果我们向节点7002发送关于键"love"的命令，那么客户端会先被转向至节点7003，然后再次执行命令：')]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('127.0.0.1:7002> GET "love"\n-> Redirected to slot [16198] located at 127.0.0.1:7003\n"you get the key \'love\'"\n127.0.0.1:7003>\n')])])]),t("blockquote",[t("p",[s._v("被隐藏的ASK错误")]),s._v(" "),t("p",[s._v("和接到MOVED错误时的情况类似，集群模式的redis-cli在接到ASK错误时也不会打印错误，而是自动根据错误提供的IP地址和端口进行转向动作。如果想看到节点发送的ASK错误的话，可以使用单机模式的redis-cli客户端：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('$ redis-cli -p 7002\n127.0.0.1:7002> GET "love"\n(error) ASK 16198 127.0.0.1:7003\n')])])])]),s._v(" "),t("p",[t("strong",[s._v("注意")])]),s._v(" "),t("p",[s._v("在写这篇文章的时候，集群模式的redis-cli并未支持ASK自动转向，上面展示的ASK自动转向行为实际上是根据MOVED自动转向行为虚构出来的。因此，当集群模式的redis-cli真正支持ASK自动转向时，它的行为和上面展示的行为可能会有所不同。")]),s._v(" "),t("p",[s._v("本节将对ASK错误的实现原理进行说明，并对比ASK错误和MOVED错误的区别。")]),s._v(" "),t("h3",{attrs:{id:"cluster-setslot-importing命令的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cluster-setslot-importing命令的实现"}},[s._v("#")]),s._v(" CLUSTER SETSLOT IMPORTING命令的实现")]),s._v(" "),t("p",[s._v("clusterState结构的importing_slots_from数组记录了当前节点正在从其他节点导入的槽：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("clusterState")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n  clusterNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("importing_slots_from"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16384")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" clusterState"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("如果importing_slots_from[i]的值不为NULL，而是指向一个clusterNode结构，那么表示当前节点正在从clusterNode所代表的节点导入槽i。")]),s._v(" "),t("p",[s._v("在对集群进行重新分片的时候，向目标节点发送命令：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("CLUSTER SETSLOT <i> IMPORTING <source_id>\n")])])]),t("p",[s._v("可以将目标节点clusterState.importing_slots_from[i]的值设置为source_id所代表节点的clusterNode结构。")]),s._v(" "),t("p",[s._v("举个例子，如果客户端向节点7003发送以下命令：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("# 9dfb 是节点7002 的ID \n127.0.0.1:7003> CLUSTER SETSLOT 16198 IMPORTING 9dfb4c4e016e627d9769e4c9bb0d4fa208e65c26\nOK\n")])])]),t("p",[s._v("那么节点7003的clusterState.importing_slots_from数组将变成图17-27所示的样子。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000300.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-27　节点7003的importing_slots_from数组")]),s._v(" "),t("h3",{attrs:{id:"cluster-setslot-migrating-命令的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cluster-setslot-migrating-命令的实现"}},[s._v("#")]),s._v(" CLUSTER SETSLOT MIGRATING 命令的实现")]),s._v(" "),t("p",[s._v("clusterState结构的migrating_slots_to数组记录了当前节点正在迁移至其他节点的槽：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("clusterState")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   \n   clusterNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("migrating_slots_to"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16384")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" clusterState"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("如果migrating_slots_to[i]的值不为NULL，而是指向一个 clusterNode 结构，那么表示当前节点正在将槽i迁移至clusterNode所代表的节点。")]),s._v(" "),t("p",[s._v("在对集群进行重新分片的时候，向源节点发送命令：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("CLUSTER SETSLOT <i> MIGRATING <target_id>\n")])])]),t("p",[s._v("可以将源节点clusterState.migrating_slots_to[i]的值设置为target_id所代表节点的clusterNode结构。")]),s._v(" "),t("p",[s._v("举个例子，如果客户端向节点7002发送以下命令：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("# 0457\n是节点7003 \n的ID \n127.0.0.1:7002> CLUSTER SETSLOT 16198 MIGRATING 04579925484ce537d3410d7ce97bd2e260c459a2\nOK\n")])])]),t("p",[s._v("那么节点7002的clusterState.migrating_slots_to数组将变成图17-28所示的样子。")]),s._v(" "),t("p",[s._v("图17-28　节点7002的migrating_slots_to数组")]),s._v(" "),t("h3",{attrs:{id:"ask-错误-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ask-错误-2"}},[s._v("#")]),s._v(" ASK 错误")]),s._v(" "),t("p",[s._v("如果节点收到一个关于键key的命令请求，并且键key所属的槽i正好就指派给了这个节点，那么节点会尝试在自己的数据库里查找键key，如果找到了的话，节点就直接执行客户端发送的命令。")]),s._v(" "),t("p",[s._v("与此相反，如果节点没有在自己的数据库里找到键key，那么节点会检查自己的clusterState.migrating_slots_to[i]，看键key所属的槽i是否正在进行迁移，如果槽i的确在进行迁移的话，那么节点会向客户端发送一个ASK错误，引导客户端到正在导入槽i的节点去查找键key。")]),s._v(" "),t("p",[s._v("举个例子，假设在节点7002向节点7003迁移槽16198期间，有一个客户端向节点7002发送命令：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("GET \n“love”\n")])])]),t("p",[s._v('因为键"love"正好属于槽16198，所以节点7002会首先在自己的数据库中查找键"love"，但并没有找到，通过检查自己的clusterState.migrating_slots_to[16198]，节点7002发现自己正在将槽16198迁移至节点7003，于是它向客户端返回错误：')]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("ASK 16198 127.0.0.1:7003\n")])])]),t("p",[s._v("这个错误表示客户端可以尝试到IP为127.0.0.1，端口号为7003的节点去执行和槽16198有关的操作，如图17-29所示。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000224.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-29　客户端接收到节点7002返回的ASK错误")]),s._v(" "),t("p",[s._v("接到ASK错误的客户端会根据错误提供的IP地址和端口号，转向至正在导入槽的目标节点，然后首先向目标节点发送一个ASKING命令，之后再重新发送原本想要执行的命令。")]),s._v(" "),t("p",[s._v("以前面的例子来说，当客户端接收到节点7002返回的以下错误时：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("ASK 16198 127.0.0.1:7003\n")])])]),t("p",[s._v("客户端会转向至节点7003，首先发送命令：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("ASKING\n")])])]),t("p",[s._v("然后再次发送命令：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('GET "love"\n')])])]),t("p",[s._v("并获得回复：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("\"you get the key 'love'\"\n")])])]),t("p",[s._v("整个过程如图17-30所示。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000005.jpeg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-30　客户端转向至节点7003")]),s._v(" "),t("h3",{attrs:{id:"asking命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#asking命令"}},[s._v("#")]),s._v(" ASKING命令")]),s._v(" "),t("p",[s._v("ASKING命令唯一要做的就是打开发送该命令的客户端的REDIS_ASKING标识，以下是该命令的伪代码实现：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('def ASKING():\n    # \n打开标识\n    client.flags |= REDIS_ASKING\n    # \n向客户端返回OK \n回复\n    reply("OK")\n')])])]),t("p",[s._v("在一般情况下，如果客户端向节点发送一个关于槽i的命令，而槽i又没有指派给这个节点的话，那么节点将向客户端返回一个MOVED错误；但是，如果节点的clusterState.importing_slots_from[i]显示节点正在导入槽i，并且发送命令的客户端带有REDIS_ASKING标识，那么节点将破例执行这个关于槽i的命令一次，图17-31展示了这个判断过程。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000190.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-31　节点判断是否执行客户端命令的过程")]),s._v(" "),t("p",[s._v("当客户端接收到ASK错误并转向至正在导入槽的节点时，客户端会先向节点发送一个ASKING命令，然后才重新发送想要执行的命令，这是因为如果客户端不发送ASKING命令，而直接发送想要执行的命令的话，那么客户端发送的命令将被节点拒绝执行，并返回MOVED错误。")]),s._v(" "),t("p",[s._v("举个例子，我们可以使用普通模式的redis-cli客户端，向正在导入槽16198的节点7003发送以下命令：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('$ ./redis-cli -p 7003\n127.0.0.1:7003> GET "love"\n(error) MOVED 16198 127.0.0.1:7002\n')])])]),t("p",[s._v("虽然节点7003正在导入槽16198，但槽16198目前仍然是指派给了节点7002，所以节点7003会向客户端返回MOVED错误，指引客户端转向至节点7002。")]),s._v(" "),t("p",[s._v("但是，如果我们在发送GET命令之前，先向节点发送一个ASKING命令，那么这个GET命令就会被节点7003执行：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('127.0.0.1:7003> ASKING\nOK\n127.0.0.1:7003> GET "love"\n"you get the key \'love\'"\n')])])]),t("p",[s._v("另外要注意的是，客户端的REDIS_ASKING标识是一个一次性标识，当节点执行了一个带有REDIS_ASKING标识的客户端发送的命令之后，客户端的REDIS_ASKING标识就会被移除。")]),s._v(" "),t("p",[s._v("举个例子，如果我们在成功执行GET命令之后，再次向节点7003发送GET命令，那么第二次发送的GET命令将执行失败，因为这时客户端的REDIS_ASKING标识已经被移除：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('127.0.0.1:7003> ASKING                 #\n打开REDIS_ASKING\n标识\nOK\n127.0.0.1:7003> GET "love"   #\n移除REDIS_ASKING\n标识\n"you get the key \'love\'"\n127.0.0.1:7003> GET "love"   # REDIS_ASKING\n标识未打开，执行失败\n(error) MOVED 16198 127.0.0.1:7002\n')])])]),t("h3",{attrs:{id:"ask错误和moved错误的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ask错误和moved错误的区别"}},[s._v("#")]),s._v(" ASK错误和MOVED错误的区别")]),s._v(" "),t("p",[s._v("ASK错误和MOVED错误都会导致客户端转向，它们的区别在于：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("MOVED错误代表槽的负责权已经从一个节点转移到了另一个节点：在客户端收到关于槽i的MOVED错误之后，客户端每次遇到关于槽i的命令请求时，都可以直接将命令请求发送至MOVED错误所指向的节点，因为该节点就是目前负责槽i的节点。")])]),s._v(" "),t("li",[t("p",[s._v("与此相反，ASK错误只是两个节点在迁移槽的过程中使用的一种临时措施：在客户端收到关于槽i的ASK错误之后，客户端只会在接下来的一次命令请求中将关于槽i的命令请求发送至ASK错误所指示的节点，但这种转向不会对客户端今后发送关于槽i的命令请求产生任何影响，客户端仍然会将关于槽i的命令请求发送至目前负责处理槽i的节点，除非ASK错误再次出现。")])])]),s._v(" "),t("h2",{attrs:{id:"复制与故障转移"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#复制与故障转移"}},[s._v("#")]),s._v(" 复制与故障转移")]),s._v(" "),t("p",[s._v("Redis集群中的节点分为主节点（master）和从节点（slave），其中主节点用于处理槽，而从节点则用于复制某个主节点，并在被复制的主节点下线时，代替下线主节点继续处理命令请求。")]),s._v(" "),t("p",[s._v("举个例子，对于包含7000、7001、7002、7003四个主节点的集群来说，我们可以将7004、7005两个节点添加到集群里面，并将这两个节点设定为节点7000的从节点，如图17-32所示（图中以双圆形表示主节点，单圆形表示从节点）。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000010.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-32　设置节点7004和节点7005成为节点7000的从节点")]),s._v(" "),t("p",[s._v("表17-1记录了集群各个节点的当前状态，以及它们正在做的工作。")]),s._v(" "),t("p",[s._v("表17-1　集群各个节点的当前状态")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000032.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("如果这时，节点7000进入下线状态，那么集群中仍在正常运作的几个主节点将在节点7000的两个从节点——节点7004和节点7005中选出一个节点作为新的主节点，这个新的主节点将接管原来节点7000负责处理的槽，并继续处理客户端发送的命令请求。")]),s._v(" "),t("p",[s._v("例如，如果节点7004被选中为新的主节点，那么节点7004将接管原来由节点7000负责处理的槽0至槽5000，节点7005也会从原来的复制节点7000，改为复制节点7004，如图17-33所示（图中用虚线包围的节点为已下线节点）。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000048.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-33　节点7004成为新的主节点")]),s._v(" "),t("p",[s._v("表17-2记录了在对节点7000进行故障转移之后，集群各个节点的当前状态，以及它们正在做的工作。")]),s._v(" "),t("p",[s._v("表17-2　集群各个节点的当前状态")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000062.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("如果在故障转移完成之后，下线的节点7000重新上线，那么它将成为节点7004的从节点，如图17-34所示。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000076.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-34　重新上线的节点7000成为节点7004的从节点")]),s._v(" "),t("p",[s._v("表17-3展示了节点7000复制节点7004之后，集群中各个节点的状态。")]),s._v(" "),t("p",[s._v("表17-3　集群各个节点的当前状态")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000155.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("本节接下来的内容将介绍节点的复制方法，检测节点是否下线的方法，以及对下线主节点进行故障转移的方法。")]),s._v(" "),t("h3",{attrs:{id:"设置从节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置从节点"}},[s._v("#")]),s._v(" 设置从节点")]),s._v(" "),t("p",[s._v("向一个节点发送命令：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("CLUSTER REPLICATE <node_id>\n")])])]),t("p",[s._v("可以让接收命令的节点成为node_id所指定节点的从节点，并开始对主节点进行复制：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("接收到该命令的节点首先会在自己的clusterState.nodes字典中找到node_id所对应节点的clusterNode结构，并将自己的clusterState.myself.slaveof指针指向这个结构，以此来记录这个节点正在复制的主节点：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("clusterNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果这是一个从节点，那么指向主节点")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("clusterNode")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("slaveof"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])]),s._v(" "),t("li",[t("p",[s._v("然后节点会修改自己在clusterState.myself.flags中的属性，关闭原本的REDIS_NODE_MASTER标识，打开REDIS_NODE_SLAVE标识，表示这个节点已经由原来的主节点变成了从节点。")])]),s._v(" "),t("li",[t("p",[s._v("最后，节点会调用复制代码，并根据clusterState.myself.slaveof指向的clusterNode结构所保存的IP地址和端口号，对主节点进行复制。因为节点的复制功能和单机Redis服务器的复制功能使用了相同的代码，所以让从节点复制主节点相当于向从节点发送命令SLAVEOF。")])])]),s._v(" "),t("p",[s._v("图17-35展示了节点7004在复制节点7000时的clusterState结构：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("clusterState.myself.flags属性的值为REDIS_NODE_SLAVE，表示节点7004是一个从节点。")])]),s._v(" "),t("li",[t("p",[s._v("clusterState.myself.slaveof指针指向代表节点7000的结构，表示节点7004正在复制的主节点为节点7000。")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000174.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-35　节点7004的clusterState结构")]),s._v(" "),t("p",[s._v("一个节点成为从节点，并开始复制某个主节点这一信息会通过消息发送给集群中的其他节点，最终集群中的所有节点都会知道某个从节点正在复制某个主节点。")]),s._v(" "),t("p",[s._v("集群中的所有节点都会在代表主节点的clusterNode结构的slaves属性和numslaves属性中记录正在复制这个主节点的从节点名单：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("struct clusterNode {\n    // \n    // \n正在复制这个主节点的从节点数量\n    int numslaves;\n    // \n一个数组\n    // \n每个数组项指向一个正在复制这个主节点的从节点的clusterNode\n结构\n    struct clusterNode **slaves;\n    // \n};\n")])])]),t("p",[s._v("举个例子，图17-36记录了节点7004和节点7005成为节点7000的从节点之后，集群中的各个节点为节点7000创建的clusterNode结构的样子：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("代表节点7000的clusterNode结构的numslaves属性的值为2，这说明有两个从节点正在复制节点7000。")])]),s._v(" "),t("li",[t("p",[s._v("代表节点7000的clusterNode结构的slaves数组的两个项分别指向代表节点7004和代表节点7005的clusterNode结构，这说明节点7000的两个从节点分别是节点7004和节点7005。")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000403.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-36　集群中的各个节点为节点7000创建的clusterNode结构")]),s._v(" "),t("h3",{attrs:{id:"故障检测"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#故障检测"}},[s._v("#")]),s._v(" 故障检测")]),s._v(" "),t("p",[s._v("集群中的每个节点都会定期地向集群中的其他节点发送PING消息，以此来检测对方是否在线，如果接收PING消息的节点没有在规定的时间内，向发送PING消息的节点返回PONG消息，那么发送PING消息的节点就会将接收PING消息的节点标记为疑似下线（probable fail，PFAIL）。")]),s._v(" "),t("p",[s._v("举个例子，如果节点7001向节点7000发送了一条PING消息，但是节点7000没有在规定的时间内，向节点7001返回一条PONG消息，那么节点7001就会在自己的clusterState.nodes字典中找到节点7000所对应的clusterNode结构，并在结构的flags属性中打开REDIS_NODE_PFAIL标识，以此表示节点7000进入了疑似下线状态，如图17-37所示。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000209.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-37　代表节点7000的clusterNode结构")]),s._v(" "),t("p",[s._v("集群中的各个节点会通过互相发送消息的方式来交换集群中各个节点的状态信息，例如某个节点是处于在线状态、疑似下线状态（PFAIL），还是已下线状态（FAIL）。")]),s._v(" "),t("p",[s._v("当一个主节点A通过消息得知主节点B认为主节点C进入了疑似下线状态时，主节点A会在自己的clusterState.nodes字典中找到主节点C所对应的clusterNode结构，并将主节点B的下线报告（failure report）添加到clusterNode结构的fail_reports链表里面：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("struct clusterNode {\n  // \n  // \n一个链表，记录了所有其他节点对该节点的下线报告\n  list *fail_reports;\n  // \n};\n")])])]),t("p",[s._v("每个下线报告由一个clusterNodeFailReport结构表示：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("struct clusterNodeFailReport {\n  // \n报告目标节点已经下线的节点\n  struct clusterNode *node;\n  // \n最后一次从node\n节点收到下线报告的时间\n  // \n程序使用这个时间戳来检查下线报告是否过期\n  // \n（与当前时间相差太久的下线报告会被删除）\n  mstime_t time;\n} typedef clusterNodeFailReport;\n")])])]),t("p",[s._v("举个例子，如果主节点7001在收到主节点7002、主节点7003发送的消息后得知，主节点7002和主节点7003都认为主节点7000进入了疑似下线状态，那么主节点7001将为主节点7000创建图17-38所示的下线报告。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000348.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-38　节点7000的下线报告")]),s._v(" "),t("p",[s._v("如果在一个集群里面，半数以上负责处理槽的主节点都将某个主节点x报告为疑似下线，那么这个主节点x将被标记为已下线（FAIL），将主节点x标记为已下线的节点会向集群广播一条关于主节点x的FAIL消息，所有收到这条FAIL消息的节点都会立即将主节点x标记为已下线。")]),s._v(" "),t("p",[s._v("举个例子，对于图17-38所示的下线报告来说，主节点7002和主节点7003都认为主节点7000进入了下线状态，并且主节点7001也认为主节点7000进入了疑似下线状态（代表主节点7000的结构打开了REDIS_NODE_PFAIL标识），综合起来，在集群四个负责处理槽的主节点里面，有三个都将主节点7000标记为下线，数量已经超过了半数，所以主节点7001会将主节点7000标记为已下线，并向集群广播一条关于主节点7000的FAIL消息，如图17-39所示。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000284.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-39　节点7001向集群广播FAIL消息")]),s._v(" "),t("h3",{attrs:{id:"故障转移"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#故障转移"}},[s._v("#")]),s._v(" 故障转移")]),s._v(" "),t("p",[s._v("当一个从节点发现自己正在复制的主节点进入了已下线状态时，从节点将开始对下线主节点进行故障转移，以下是故障转移的执行步骤：")]),s._v(" "),t("p",[s._v("1）复制下线主节点的所有从节点里面，会有一个从节点被选中。")]),s._v(" "),t("p",[s._v("2）被选中的从节点会执行SLAVEOF no one命令，成为新的主节点。")]),s._v(" "),t("p",[s._v("3）新的主节点会撤销所有对已下线主节点的槽指派，并将这些槽全部指派给自己。")]),s._v(" "),t("p",[s._v("4）新的主节点向集群广播一条PONG消息，这条PONG消息可以让集群中的其他节点立即知道这个节点已经由从节点变成了主节点，并且这个主节点已经接管了原本由已下线节点负责处理的槽。")]),s._v(" "),t("p",[s._v("5）新的主节点开始接收和自己负责处理的槽有关的命令请求，故障转移完成。")]),s._v(" "),t("h3",{attrs:{id:"选举新的主节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选举新的主节点"}},[s._v("#")]),s._v(" 选举新的主节点")]),s._v(" "),t("p",[s._v("新的主节点是通过选举产生的。")]),s._v(" "),t("p",[s._v("以下是集群选举新的主节点的方法：")]),s._v(" "),t("p",[s._v("1）集群的配置纪元是一个自增计数器，它的初始值为0。")]),s._v(" "),t("p",[s._v("2）当集群里的某个节点开始一次故障转移操作时，集群配置纪元的值会被增一。")]),s._v(" "),t("p",[s._v("3）对于每个配置纪元，集群里每个负责处理槽的主节点都有一次投票的机会，而第一个向主节点要求投票的从节点将获得主节点的投票。")]),s._v(" "),t("p",[s._v("4）当从节点发现自己正在复制的主节点进入已下线状态时，从节点会向集群广播一条CLUSTERMSG_TYPE_FAILOVER_AUTH_REQUEST消息，要求所有收到这条消息、并且具有投票权的主节点向这个从节点投票。")]),s._v(" "),t("p",[s._v("5）如果一个主节点具有投票权（它正在负责处理槽），并且这个主节点尚未投票给其他从节点，那么主节点将向要求投票的从节点返回一条CLUSTERMSG_TYPE_FAILOVER_AUTH_ACK消息，表示这个主节点支持从节点成为新的主节点。")]),s._v(" "),t("p",[s._v("6）每个参与选举的从节点都会接收CLUSTERMSG_TYPE_FAILOVER_AUTH_ACK消息，并根据自己收到了多少条这种消息来统计自己获得了多少主节点的支持。")]),s._v(" "),t("p",[s._v("7）如果集群里有N个具有投票权的主节点，那么当一个从节点收集到大于等于N/2+1张支持票时，这个从节点就会当选为新的主节点。")]),s._v(" "),t("p",[s._v("8）因为在每一个配置纪元里面，每个具有投票权的主节点只能投一次票，所以如果有N个主节点进行投票，那么具有大于等于N/2+1张支持票的从节点只会有一个，这确保了新的主节点只会有一个。")]),s._v(" "),t("p",[s._v("9）如果在一个配置纪元里面没有从节点能收集到足够多的支持票，那么集群进入一个新的配置纪元，并再次进行选举，直到选出新的主节点为止。")]),s._v(" "),t("p",[s._v("这个选举新主节点的方法和第16章介绍的选举领头Sentinel的方法非常相似，因为两者都是基于Raft算法的领头选举（leader election）方法来实现的。")]),s._v(" "),t("h2",{attrs:{id:"消息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消息"}},[s._v("#")]),s._v(" 消息")]),s._v(" "),t("p",[s._v("集群中的各个节点通过发送和接收消息（message）来进行通信，我们称发送消息的节点为发送者（sender），接收消息的节点为接收者（receiver），如图17-40所示。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000262.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-40　发送者和接收者")]),s._v(" "),t("p",[s._v("节点发送的消息主要有以下五种：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("MEET消息：当发送者接到客户端发送的CLUSTER MEET命令时，发送者会向接收者发送MEET消息，请求接收者加入到发送者当前所处的集群里面。")])]),s._v(" "),t("li",[t("p",[s._v("PING消息：集群里的每个节点默认每隔一秒钟就会从已知节点列表中随机选出五个节点，然后对这五个节点中最长时间没有发送过PING消息的节点发送PING消息，以此来检测被选中的节点是否在线。除此之外，如果节点A最后一次收到节点B发送的PONG消息的时间，距离当前时间已经超过了节点A的cluster-node-timeout选项设置时长的一半，那么节点A也会向节点B发送PING消息，这可以防止节点A因为长时间没有随机选中节点B作为PING消息的发送对象而导致对节点B的信息更新滞后。")])]),s._v(" "),t("li",[t("p",[s._v("PONG消息：当接收者收到发送者发来的MEET消息或者PING消息时，为了向发送者确认这条MEET消息或者PING消息已到达，接收者会向发送者返回一条PONG消息。另外，一个节点也可以通过向集群广播自己的PONG消息来让集群中的其他节点立即刷新关于这个节点的认识，例如当一次故障转移操作成功执行之后，新的主节点会向集群广播一条PONG消息，以此来让集群中的其他节点立即知道这个节点已经变成了主节点，并且接管了已下线节点负责的槽。")])]),s._v(" "),t("li",[t("p",[s._v("FAIL消息：当一个主节点A判断另一个主节点B已经进入FAIL状态时，节点A会向集群广播一条关于节点B的FAIL消息，所有收到这条消息的节点都会立即将节点B标记为已下线。")])]),s._v(" "),t("li",[t("p",[s._v("PUBLISH消息：当节点接收到一个PUBLISH命令时，节点会执行这个命令，并向集群广播一条PUBLISH消息，所有接收到这条PUBLISH消息的节点都会执行相同的PUBLISH命令。")])])]),s._v(" "),t("p",[s._v("一条消息由消息头（header）和消息正文（data）组成，接下来的内容将首先介绍消息头，然后再分别介绍上面提到的五种不同类型的消息正文。")]),s._v(" "),t("h3",{attrs:{id:"消息头"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消息头"}},[s._v("#")]),s._v(" 消息头")]),s._v(" "),t("p",[s._v("节点发送的所有消息都由一个消息头包裹，消息头除了包含消息正文之外，还记录了消息发送者自身的一些信息，因为这些信息也会被消息接收者用到，所以严格来讲，我们可以认为消息头本身也是消息的一部分。")]),s._v(" "),t("p",[s._v("每个消息头都由一个cluster.h/clusterMsg结构表示：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 消息的长度（包括这个消息头的长度和消息正文的长度）")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint32_t")]),s._v(" totlen"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 消息的类型")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint16_t")]),s._v(" type"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 消息正文包含的节点信息数量")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 只在发送MEET、PING、PONG这三种Gossip协议消息时使用")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint16_t")]),s._v(" count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 发送者所处的配置纪元")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint64_t")]),s._v(" currentEpoch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果发送者是一个主节点，那么这里记录的是发送者的配置纪元")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果发送者是一个从节点，那么这里记录的是发送者正在复制的主节点的配置纪元")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint64_t")]),s._v(" configEpoch"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 发送者的名字（ID")]),s._v("\n） \n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" sender"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("REDIS_CLUSTER_NAMELEN"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 发送者目前的槽指派信息")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" myslots"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("REDIS_CLUSTER_SLOTS"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果发送者是一个从节点，那么这里记录的是发送者正在复制的主节点的名字")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果发送者是一个主节点，那么这里记录的是REDIS_NODE_NULL_NAME")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// （一个40字节长，值全为0的字节数组）")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" slaveof"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("REDIS_CLUSTER_NAMELEN"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 发送者的端口号")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint16_t")]),s._v(" port"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 发送者的标识值")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint16_t")]),s._v(" flags"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 发送者所处集群的状态")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" state"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 消息的正文（或者说，内容）")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("union")]),s._v(" clusterMsgData data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" clusterMsg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("clusterMsg.data属性指向联合cluster.h/clusterMsgData，这个联合就是消息的正文：")]),s._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("union")]),s._v(" clusterMsgData "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// MEET、PING、PONG消息的正文")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 每条MEET、PING、PONG消息都包含两个")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// clusterMsgDataGossip结构")]),s._v("\n    clusterMsgDataGossip gossip"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" ping"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// FAIL消息的正文")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    clusterMsgDataFail about"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" fail"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// PUBLISH消息的正文")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    clusterMsgDataPublish msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" publish"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 其他消息的正文")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("clusterMsg结构的currentEpoch、sender、myslots等属性记录了发送者自身的节点信息，接收者会根据这些信息，在自己的clusterState.nodes字典里找到发送者对应的clusterNode结构，并对结构进行更新。")]),s._v(" "),t("p",[s._v("举个例子，通过对比接收者为发送者记录的槽指派信息，以及发送者在消息头的myslots属性记录的槽指派信息，接收者可以知道发送者的槽指派信息是否发生了变化。")]),s._v(" "),t("p",[s._v("又或者说，通过对比接收者为发送者记录的标识值，以及发送者在消息头的flags属性记录的标识值，接收者可以知道发送者的状态和角色是否发生了变化，例如节点状态由原来的在线变成了下线，或者由主节点变成了从节点等等。")]),s._v(" "),t("h3",{attrs:{id:"meet、ping、pong消息的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#meet、ping、pong消息的实现"}},[s._v("#")]),s._v(" MEET、PING、PONG消息的实现")]),s._v(" "),t("p",[s._v("Redis集群中的各个节点通过"),t("code",[s._v("Gossip")]),s._v("协议来交换各自关于不同节点的状态信息，其中Gossip协议由"),t("code",[s._v("MEET")]),s._v("、"),t("code",[s._v("PING")]),s._v("、"),t("code",[s._v("PONG")]),s._v("三种消息实现，这三种消息的正文都由两个cluster.h/clusterMsgDataGossip结构组成：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("union clusterMsgData {\n  // \n  // MEET、PING和PONG消息的正文\n  struct {\n    // 每条MEET、PING、PONG消息都包含两个\n    // clusterMsgDataGossip结构\n    clusterMsgDataGossip gossip[1];\n  } ping;\n  // 其他消息的正文 \n};\n\n")])])]),t("p",[s._v("因为MEET、PING、PONG三种消息都使用相同的消息正文，所以节点通过消息头的type属性来判断一条消息是MEET消息、PING消息还是PONG消息。")]),s._v(" "),t("p",[s._v("每次发送MEET、PING、PONG消息时，发送者都从自己的已知节点列表中随机选出两个节点（可以是主节点或者从节点），并将这两个被选中节点的信息分别保存到两个clusterMsgDataGossip结构里面。")]),s._v(" "),t("p",[s._v("clusterMsgDataGossip结构记录了被选中节点的名字，发送者与被选中节点最后一次发送和接收PING消息和PONG消息的时间戳，被选中节点的IP地址和端口号，以及被选中节点的标识值：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("typedef struct {\n  // 节点的名字\n  char nodename[REDIS_CLUSTER_NAMELEN];\n  // 最后一次向该节点发送PING消息的时间戳\n  uint32_t ping_sent;\n  // 最后一次从该节点接收到PONG消息的时间戳\n  uint32_t pong_received;\n  // 节点的IP地址\n  char ip[16];\n  // 节点的端口号\n  uint16_t port;\n  // 节点的标识值\n  uint16_t flags;\n} clusterMsgDataGossip;\n")])])]),t("p",[s._v("当接收者收到MEET、PING、PONG消息时，接收者会访问消息正文中的两个clusterMsgDataGossip结构，并根据自己是否认识clusterMsgDataGossip结构中记录的被选中节点来选择进行哪种操作：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("如果被选中节点不存在于接收者的已知节点列表，那么说明接收者是第一次接触到被选中节点，接收者将根据结构中记录的IP地址和端口号等信息，与被选中节点进行握手。")])]),s._v(" "),t("li",[t("p",[s._v("如果被选中节点已经存在于接收者的已知节点列表，那么说明接收者之前已经与被选中节点进行过接触，接收者将根据clusterMsgDataGossip结构记录的信息，对被选中节点所对应的clusterNode结构进行更新。")])])]),s._v(" "),t("p",[s._v("举个发送PING消息和返回PONG消息的例子，假设在一个包含A、B、C、D、E、F六个节点的集群里：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("节点A向节点D发送PING消息，并且消息里面包含了节点B和节点C的信息，当节点D收到这条PING消息时，它将更新自己对节点B和节点C的认识。")])]),s._v(" "),t("li",[t("p",[s._v("之后，节点D将向节点A返回一条PONG消息，并且消息里面包含了节点E和节点F的消息，当节点A收到这条PONG消息时，它将更新自己对节点E和节点F的认识。")])])]),s._v(" "),t("p",[s._v("整个通信过程如图17-41所示。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000268.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-41　一个PING-PONG消息通信示例")]),s._v(" "),t("h3",{attrs:{id:"fail消息的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fail消息的实现"}},[s._v("#")]),s._v(" FAIL消息的实现")]),s._v(" "),t("p",[s._v("当集群里的主节点A将主节点B标记为已下线（FAIL）时，主节点A将向集群广播一条关于主节点B的FAIL消息，所有接收到这条FAIL消息的节点都会将主节点B标记为已下线。")]),s._v(" "),t("p",[s._v("在集群的节点数量比较大的情况下，单纯使用Gossip协议来传播节点的已下线信息会给节点的信息更新带来一定延迟，因为Gossip协议消息通常需要一段时间才能传播至整个集群，而发送FAIL消息可以让集群里的所有节点立即知道某个主节点已下线，从而尽快判断是否需要将集群标记为下线，又或者对下线主节点进行故障转移。")]),s._v(" "),t("p",[s._v("FAIL消息的正文由cluster.h/clusterMsgDataFail结构表示，这个结构只包含一个nodename属性，该属性记录了已下线节点的名字：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("typedef struct {\n    char nodename[REDIS_CLUSTER_NAMELEN];\n} clusterMsgDataFail;\n")])])]),t("p",[s._v("因为集群里的所有节点都有一个独一无二的名字，所以FAIL消息里面只需要保存下线节点的名字，接收到消息的节点就可以根据这个名字来判断是哪个节点下线了。")]),s._v(" "),t("p",[s._v("举个例子，对于包含7000、7001、7002、7003四个主节点的集群来说：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("如果主节点7001发现主节点7000已下线，那么主节点7001将向主节点7002和主节点7003发送FAIL消息，其中FAIL消息中包含的节点名字为主节点7000的名字，以此来表示主节点7000已下线。")])]),s._v(" "),t("li",[t("p",[s._v("当主节点7002和主节点7003都接收到主节点7001发送的FAIL消息时，它们也会将主节点7000标记为已下线。")])]),s._v(" "),t("li",[t("p",[s._v("因为这时集群已经有超过一半的主节点认为主节点7000已下线，所以集群剩下的几个主节点可以判断是否需要将集群标记为下线，又或者开始对主节点7000进行故障转移。")])])]),s._v(" "),t("p",[s._v("图17-42至图17-44展示了节点发送和接收FAIL消息的整个过程。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000272.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-42　节点7001将节点7000标记为已下线")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000358.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-43　节点7001向集群广播FAIL消息")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000019.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-44　节点7002和节点7003也将节点7000标记为已下线")]),s._v(" "),t("h3",{attrs:{id:"publish消息的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#publish消息的实现"}},[s._v("#")]),s._v(" PUBLISH消息的实现")]),s._v(" "),t("p",[s._v("当客户端向集群中的某个节点发送命令")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("PUBLISH <channel> <message>\n")])])]),t("p",[s._v("的时候，接收到PUBLISH命令的节点不仅会向channel频道发送消息message，它还会向集群广播一条PUBLISH消息，所有接收到这条PUBLISH消息的节点都会向channel频道发送message消息。")]),s._v(" "),t("p",[s._v("换句话说，向集群中的某个节点发送命令：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("PUBLISH <channel> <message>\n")])])]),t("p",[s._v("将导致集群中的所有节点都向channel频道发送message消息。")]),s._v(" "),t("p",[s._v("举个例子，对于包含7000、7001、7002、7003四个节点的集群来说，如果节点7000收到了客户端发送的PUBLISH命令，那么节点7000将向7001、7002、7003三个节点发送PUBLISH消息，如图17-45所示。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000177.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-45　接收到PUBLISH命令的节点7000向集群广播PUBLISH消息")]),s._v(" "),t("p",[s._v("PUBLISH消息的正文由cluster.h/clusterMsgDataPublish结构表示：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("typedef struct {\n  uint32_t channel_len;\n  uint32_t message_len;\n  // 定义为8 字节只是为了对齐其他消息结构\n  // 实际的长度由保存的内容决定\n  unsigned char bulk_data[8];\n} clusterMsgDataPublish;\n")])])]),t("p",[s._v("clusterMsgDataPublish结构的bulk_data属性是一个字节数组，这个字节数组保存了客户端通过PUBLISH命令发送给节点的channel参数和message参数，而结构的channel_len和message_len则分别保存了channel参数的长度和message参数的长度：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("其中bulk_data的0字节至channel_len-1字节保存的是channel参数。")])]),s._v(" "),t("li",[t("p",[s._v("而bulk_data的channel_len字节至channel_len+message_len-1字节保存的则是message参数。")])])]),s._v(" "),t("p",[s._v("举个例子，如果节点收到的PUBLISH命令为：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('PUBLISH "news.it" "hello"\n')])])]),t("p",[s._v('那么节点发送的PUBLISH消息的clusterMsgDataPublish结构将如图17-46所示：其中bulk_data数组的前七个字节保存了channel参数的值"news.it"，而bulk_data数组的后五个字节则保存了message参数的值"hello"。')]),s._v(" "),t("p",[t("img",{attrs:{src:"https://book-redis-design.netlify.app/images/000055.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("图17-46　clusterMsgDataPublish结构示例")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("为什么不直接向节点广播PUBLISH命令")])]),s._v(" "),t("p",[s._v("实际上，要让集群的所有节点都执行相同的PUBLISH命令，最简单的方法就是向所有节点广播相同的PUBLISH命令，这也是Redis在复制PUBLISH命令时所使用的方法，不过因为这种做法并不符合Redis集群的“各个节点通过发送和接收消息来进行通信”这一规则，所以节点没有采取广播PUBLISH命令的做法。")])]),s._v(" "),t("h2",{attrs:{id:"重点回顾"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重点回顾"}},[s._v("#")]),s._v(" 重点回顾")]),s._v(" "),t("ul",[t("li",[s._v("节点通过握手来将其他节点添加到自己所处的集群当中。")]),s._v(" "),t("li",[s._v("集群中的 "),t("code",[s._v("16384")]),s._v(" 个槽可以分别指派给集群中的各个节点， 每个节点都会记录哪些槽指派给了自己， 而哪些槽又被指派给了其他节点。")]),s._v(" "),t("li",[s._v("节点在接到一个命令请求时， 会先检查这个命令请求要处理的键所在的槽是否由自己负责， 如果不是的话， 节点将向客户端返回一个 "),t("code",[s._v("MOVED")]),s._v(" 错误， "),t("code",[s._v("MOVED")]),s._v(" 错误携带的信息可以指引客户端转向至正在负责相关槽的节点。")]),s._v(" "),t("li",[s._v("对 Redis 集群的重新分片工作是由客户端执行的， 重新分片的关键是将属于某个槽的所有键值对从一个节点转移至另一个节点。")]),s._v(" "),t("li",[s._v("如果节点 A 正在迁移槽 "),t("code",[s._v("i")]),s._v(" 至节点 B ， 那么当节点 A 没能在自己的数据库中找到命令指定的数据库键时， 节点 A 会向客户端返回一个 "),t("code",[s._v("ASK")]),s._v(" 错误， 指引客户端到节点 B 继续查找指定的数据库键。")]),s._v(" "),t("li",[t("code",[s._v("MOVED")]),s._v(" 错误表示槽的负责权已经从一个节点转移到了另一个节点， 而 "),t("code",[s._v("ASK")]),s._v(" 错误只是两个节点在迁移槽的过程中使用的一种临时措施。")]),s._v(" "),t("li",[s._v("集群里的从节点用于复制主节点， 并在主节点下线时， 代替主节点继续处理命令请求。")]),s._v(" "),t("li",[s._v("集群中的节点通过发送和接收消息来进行通讯， 常见的消息包括 "),t("code",[s._v("MEET")]),s._v(" 、 "),t("code",[s._v("PING")]),s._v(" 、 "),t("code",[s._v("PONG")]),s._v(" 、 "),t("code",[s._v("PUBLISH")]),s._v(" 、 "),t("code",[s._v("FAIL")]),s._v(" 五种。")])]),s._v(" "),t("h2",{attrs:{id:"参考文献"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[s._v("#")]),s._v(" 参考文献")]),s._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://time.geekbang.org/column/intro/100084301?utm_campaign=geektime_search&utm_content=geektime_search&utm_medium=geektime_search&utm_source=geektime_search&utm_term=geektime_search",target:"_blank",rel:"noopener noreferrer"}},[s._v("极客时间：Redis源码剖析与实战"),t("OutboundLink")],1)])]),s._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://book.douban.com/subject/25900156/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Redis设计与实现 "),t("OutboundLink")],1)])]),s._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://github.com/redis/redis/blob/5.0/src/ae.c",target:"_blank",rel:"noopener noreferrer"}},[s._v("Github：redis 源码"),t("OutboundLink")],1)])])])])}),[],!1,null,null,null);t.default=n.exports}}]);