(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{397:function(e,t,n){"use strict";n.r(t);var a=n(4),r=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("时光芿苒，岁月如梭，好久没有给大家更新 Netty 相关的文章了，在断更 Netty 的这段日子里，笔者一直在持续更新  "),t("a",{attrs:{href:"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg2MzU3Mjc3Ng==&action=getalbum&album_id=2559805446807928833&scene=173&from_msgid=&from_itemidx=&count=3&nolastread=1&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("Linux 内存管理相关的文章"),t("OutboundLink")],1),e._v(" ，目前为止，算是将 Linux 内存管理子系统相关的主干源码较为完整的给大家呈现了出来，同时也结识了很多喜欢内核的读者，经常在后台留言讨论一些代码的设计细节，在这个过程中，我们相互分享，相互学习，浓浓的感受到了大家对技术那份纯粹的热爱，对于我自己来说，也是一种激励，学习，提高的机会。")]),e._v(" "),t("p",[e._v("之前系列文章的视角一直是停留在内核态，笔者试图从 Linux 内核的角度来为大家揭秘内存管理的本质，那么从今天开始，我们把视角在往上挪一挪，从内核态转换到用户态，继续沿着内存管理这条主线，来看一看用户态的内存管理是如何进行的。")]),e._v(" "),t("p",[e._v("接下来笔者计划用三篇文章的篇幅为大家剖析一下 Netty 的内存管理模块，本文是第一篇，主要是围绕 Netty 内存管理的外围介绍一下  ByteBuf 的总体设计。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://mmbiz.qpic.cn/sz_mmbiz_jpg/sOIZXFW0vUZFdNJKVEk1X07SFzmQ63xFDO9aZqF2Mw3JOmgJYRcyzVGlaXvjUGeQ4SgpZnplT5QaXfLSBQialhg/640?wx_fmt=other&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}})]),e._v(" "),t("p",[e._v("别看 ByteBuf 体系涉及到的类比较多，一眼望过去比较头大，但是我们按照不同的视角，将它们一一分类，整个体系脉络就变得很清晰了：")]),e._v(" "),t("ul",[t("li",[e._v("从 JVM 内存区域布局的角度来看，Netty 的 ByteBuf 主要分为 HeapByteBuf（堆内） 和 DirectByteBuf（堆外）这两种类型。")]),e._v(" "),t("li",[e._v("从内存管理的角度来看，Netty 的 ByteBuf  又分为 PooledByteBuf （池化）和 UnpooledByteBuf（非池化）两种子类型。一种是被内存池统一管理，另一种则和普通的 ByteBuf 一样，用的时候临时创建，不用的时候释放。")]),e._v(" "),t("li",[e._v("从内存访问的角度来看，Netty 又将 ByteBuf 分为了 UnsafeByteBuf 和普通的 ByteBuf。UnsafeByteBuf 主要是依赖 Unsafe 类提供的底层 API 来直接对内存地址进行操作。而普通 ByteBuf 对内存的操作主要是依赖 NIO 中的 ByteBuffer。")]),e._v(" "),t("li",[e._v("从内存回收的角度来看，ByteBuf 又分为了带 Cleaner 的 ByteBuf 以及不带 Cleaner 的 NoCleanerByteBuf，Cleaner 在 JDK 中是用来释放 NIO ByteBuffer 背后所引用的 Native Memory 的，内存的释放由 JVM 统一管理。而 NoCleanerByteBuf 背后的 Native Memory 则需要我们进行手动释放。")]),e._v(" "),t("li",[e._v("从内存占用统计的角度来说，Netty 又近一步将 ByteBuf 分为了 InstrumentedByteBuf 和普通的 ByteBuf，其中 InstrumentedByteBuf 会带有内存占用相关 Metrics 的统计供我们进行监控，而普通的 ByteBuf 则不带有热任何 Metrics。")]),e._v(" "),t("li",[e._v("从零拷贝的角度来看，Netty 又引入了 CompositeByteBuf，目的是为多个 ByteBuf 在聚合的时候提供一个统一的逻辑视图，将多个 ByteBuf 聚合成一个逻辑上的 CompositeByteBuf，而传统的聚合操作则是首先要分配一个大的 ByteBuf，然后将需要聚合的多个 ByteBuf 中的内容在拷贝到新的 ByteBuf 中。CompositeByteBuf 避免了分配大段内存以及内存拷贝的开销。注意这里的零拷贝指的是 Netty 在用户态层面自己实现的避免内存拷贝的设计，而不是 OS 层面上的零拷贝。")]),e._v(" "),t("li",[e._v("另外 Netty 的 ByteBuf 支持引用计数以及自动地内存泄露探测，如果有内存泄露的情况，Netty 会将具体发生泄露的位置报告出来。")]),e._v(" "),t("li",[e._v("Netty 的 ByteBuf 支持扩容，而 NIO 的 ByteBuffer 则不支持扩容，")])]),e._v(" "),t("p",[e._v("在将 Netty 的 ByteBuf 设计体系梳理完整之后，我们就会发现，Netty 的 ByteBuf 其实是对 JDK  ByteBuffer 的一种扩展和完善，所以下面笔者的行文思路是与 JDK  ByteBuffer 对比着进行介绍 Netty 的 ByteBuf ，有了对比，我们才能更加深刻的体会到 Netty 设计的精妙。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)本文概要.png")]),e._v(" "),t("h2",{attrs:{id:"_1-jdk-中的-bytebuffer-设计有何不妥"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-jdk-中的-bytebuffer-设计有何不妥"}},[e._v("#")]),e._v(" "),t("strong",[e._v("1. JDK 中的 ByteBuffer 设计有何不妥")])]),e._v(" "),t("p",[e._v("笔者曾在 "),t("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg2MzU3Mjc3Ng==&mid=2247485497&idx=1&sn=eb4afe6764b2b976fb80f6dc5c6fd68a&chksm=ce77ce7ef900476865864e09bb6f0688ca784afc396084ecc90a894bfd733692049c332edd11&token=927203489&lang=zh_CN&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("《一步一图带你深入剖析 JDK NIO ByteBuffer 在不同字节序下的设计与实现》"),t("OutboundLink")],1),e._v(" 一文中完整的介绍过 JDK ByteBuffer 的整个设计体系，下面我们来简短回忆一下 ByteBuffer 的几个核心要素。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public abstract class Buffer {\n    private int mark = -1;\n    private int position = 0;\n    private int limit;\n    private int capacity;\n}\n")])])]),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("ul",[t("li",[e._v("capacity 规定了整个 Buffer 的容量，具体可以容纳多少个元素。capacity 之前的元素均是 Buffer 可操作的空间，JDK 中的 ByteBuffer 是不可扩容的。")]),e._v(" "),t("li",[e._v("position 用于指向 Buffer 中下一个可操作性的元素，初始值为 0。对于 Buffer 的读写操作全部都共用这一个 position 指针，在 Buffer 的写模式下，position 指针用于指向下一个可写位置。在读模式下，position 指针指向下一个可读位置。")]),e._v(" "),t("li",[e._v("limit 用于限定 Buffer 可操作元素的上限，position 指针不能超过 limit。")])]),e._v(" "),t("p",[e._v("由于 JDK ByteBuffer 只设计了一个 position 指针，所以我们在读写 ByteBuffer 的时候需要不断的调整 position 的位置。比如，利用 flip() ，rewind()，compact()，clear() 等方法不断的进行读写模式的切换。")]),e._v(" "),t("p",[e._v("一些具体的场景体现就是，当我们对一个 ByteBuffer 进行写入的时候，随着数据不断的向 ByteBuffer 写入，position 指针会不断的向后移动。在写入操作完成之后，如果我们想要从 ByteBuffer 读取刚刚写入的数据就麻烦了。")]),e._v(" "),t("p",[e._v("由于 JDK 在对 ByteBuffer 的设计中读写操作都是混用一个 position 指针，所以在读取 ByteBuffer 之前，我们还需要通过  flip() 调整 position 的位置，进行读模式的切换。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409191121428.webp",alt:"图片"}}),e._v("flip切换读模式.png")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    public final Buffer flip() {\n        limit = position;\n        position = 0;\n        mark = -1;\n        return this;\n    }\n")])])]),t("p",[e._v("当我们将 ByteBuffer 中的数据全部读取完之后，如果再次向 ByteBuffer 写入数据，那么还需要重新调整 position 的位置，通过 clear()  来进行写模式的切换。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)clear切换写模式.png")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    public final Buffer clear() {\n        position = 0;\n        limit = capacity;\n        mark = -1;\n        return this;\n    }\n")])])]),t("p",[e._v("如果我们只是部分读取了 ByteBuffer 中的数据而不是全部读取，那么在写入的时候，为了避免未被读取的部分被接下来的写入操作覆盖，我们则需要通过 compact() 方法来切换写模式。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409191121389.webp",alt:"图片"}}),e._v("comapct切换写模式.png")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class HeapByteBuffer extends ByteBuffer {\n\n    //HeapBuffer中底层负责存储数据的数组\n    final byte[] hb; \n\n    public ByteBuffer compact() {\n        System.arraycopy(hb, ix(position()), hb, ix(0), remaining());\n        position(remaining());\n        limit(capacity());\n        discardMark();\n        return this;\n    }\n\n    public final int remaining() {\n        return limit - position;\n    }\n\n   final void discardMark() {                          \n        mark = -1;\n    }\n}\n")])])]),t("p",[e._v("从上面列举的这些读写 ByteBuffer 场景可以看出，当我们在操作 ByteBuffer 的时候，需要时刻保持头脑清醒，对 ByteBuffer 中哪些部分是可读的，哪些部分是可写的要有一个清醒的认识，稍不留神就会出错。在复杂的编解码逻辑中，如果使用 ByteBuffer 的话，就需要不断的进行读写模式的切换，切的切的人就傻了。")]),e._v(" "),t("p",[e._v("除了对 ByteBuffer 的相关操作比较麻烦之外，JDK 对于 ByteBuffer 没有设计池化管理机制，而面对大量需要使用堆外内存的场景，我们就需要不断的创建 DirectBuffer，DirectBuffer 在使用完之后，回收又是个问题。")]),e._v(" "),t("p",[e._v("JDK 自身对于 DirectBuffer 的回收是有延迟的，我们需要等到一次 FullGc ，这些 DirectBuffer 背后引用的 Native Memory 才能被 JVM 自动回收。所以为了及时回收这些 Native Memory ，我们又需要操心 DirectBuffer 的手动释放。")]),e._v(" "),t("p",[e._v("JDK 的 ByteBuffer 不支持引用计数，没有引用计数的设计，我们就无从得知一个 DirectBuffer 被引用了多少次，又被释放了多少次，面对 DirectBuffer 引起的内存泄露问题，也就无法进行自动探测。")]),e._v(" "),t("p",[e._v("另外 JDK 的 ByteBuffer 不支持动态按需自适应扩容，当一个 ByteBuffer 被创建出来之后，它的容量就固定了。但实际上，我们很难在一开始就能准确的评估出到底需要多大的 ByteBuffer。分配的容量大了，会造成浪费。分配的容量小了，我们又需要每次在写入的时候判断剩余容量是否足够，如果不足，又需要手动去申请一个更大的 ByteBuffer，然后在将原有 ByteBuffer 中的数据迁移到新的 ByteBuffer 中，想想都麻烦。")]),e._v(" "),t("p",[e._v("还有就是当多个 JDK 的 ByteBuffer 在面对合并聚合的场景，总是要先创建一个更大的 ByteBuffer，然后将原有的多个 ByteBuffer 中的内容在拷贝到新的 ByteBuffer 中。这就涉及到了内存分配和拷贝的开销。")]),e._v(" "),t("p",[e._v("那为什么不能利用原有的这些 ByteBuffer 所占用的内存空间，在此基础上只创建一个逻辑上的视图 ByteBuffer，将对视图 ByteBuffer 的逻辑操作全部转移到原有的内存空间上，这样一来不就可以省去重新分配内存以及内存拷贝的开销了么 ？")]),e._v(" "),t("p",[e._v("下面我们就来一起看下，Netty 中的 ByteBuf 是如何解决并完善上述问题的~~~")]),e._v(" "),t("h2",{attrs:{id:"_2-netty-对于-bytebuf-的设计与实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-netty-对于-bytebuf-的设计与实现"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2. Netty  对于 ByteBuf 的设计与实现")])]),e._v(" "),t("p",[e._v("在之前介绍 JDK ByteBuffer 整体设计的时候，笔者是以 HeapByteBuffer 为例将 ByteBuffer 的整个设计体系串联起来的，那么本文笔者将会用 DirectByteBuf 为大家串联 Netty ByteBuf 的设计体系。")]),e._v(" "),t("h3",{attrs:{id:"_2-1-bytebuf-的基本结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-bytebuf-的基本结构"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.1 ByteBuf 的基本结构")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public abstract class AbstractByteBuf extends ByteBuf {\n    int readerIndex;\n    int writerIndex;\n    private int markedReaderIndex;\n    private int markedWriterIndex;\n    private int maxCapacity;\n}\n\npublic class UnpooledDirectByteBuf extends AbstractReferenceCountedByteBuf {\n    private int capacity;\n}\n")])])]),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("p",[e._v("为了避免 JDK ByteBuffer 在读写模式下共用一个 position 指针所引起的繁琐操作，Netty 为 ByteBuf 引入了两个指针，readerIndex 用于指向 ByteBuf 中第一个可读字节位置，writerIndex 用于指向 ByteBuf 中第一个可写的字节位置。有了这两个独立的指针之后，我们在对 Netty ByteBuf 进行读写操作的时候，就不需要进行繁琐的读写模式切换了。与之对应的 markedReaderIndex，markedWriterIndex 用于支持 ByteBuf 相关的 mark 和 reset 操作，这一点和 JDK  中的设计保持一致。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    @Override\n    public ByteBuf markReaderIndex() {\n        markedReaderIndex = readerIndex;\n        return this;\n    }\n\n    @Override\n    public ByteBuf resetReaderIndex() {\n        readerIndex(markedReaderIndex);\n        return this;\n    }\n\n    @Override\n    public ByteBuf markWriterIndex() {\n        markedWriterIndex = writerIndex;\n        return this;\n    }\n\n    @Override\n    public ByteBuf resetWriterIndex() {\n        writerIndex(markedWriterIndex);\n        return this;\n    }\n")])])]),t("p",[e._v("由于 JDK ByteBuffer 在设计上不支持扩容机制，所以 Netty 为 ByteBuf 额外引入了一个新的字段 maxCapacity，用于表示 ByteBuf 容量最多只能扩容至 maxCapacity。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    @Override\n    public int calculateNewCapacity(int minNewCapacity, int maxCapacity) {\n        if (minNewCapacity > maxCapacity) {\n            throw new IllegalArgumentException(String.format(\n                    "minNewCapacity: %d (expected: not greater than maxCapacity(%d)",\n                    minNewCapacity, maxCapacity));\n        }\n    }\n')])])]),t("p",[e._v("Netty ByteBuf 的 capacity 与 JDK ByteBuffer 中的 capacity 含义保持一致，用于表示 ByteBuf 的初始容量大小，也就是下面在创建 UnpooledDirectByteBuf 的时候传入的 initialCapacity 参数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class UnpooledDirectByteBuf extends AbstractReferenceCountedByteBuf {\n      // Netty ByteBuf 底层依赖的 JDK ByteBuffer\n      ByteBuffer buffer;\n      // ByteBuf 初始的容量，也是真正的内存占用\n      private int capacity;\n\n      public UnpooledDirectByteBuf(ByteBufAllocator alloc, int initialCapacity, int maxCapacity) {\n        // 设置最大可扩容的容量\n        super(maxCapacity);\n        this.alloc = alloc;\n        // 按照 initialCapacity 指定的初始容量，创建 JDK ByteBuffer\n        setByteBuffer(allocateDirect(initialCapacity), false);\n    }\n\n    void setByteBuffer(ByteBuffer buffer, boolean tryFree) {\n        // UnpooledDirectByteBuf 底层会依赖一个 JDK 的 ByteBuffer\n        // 后续对 UnpooledDirectByteBuf 的操作， Netty 全部会代理到 JDK ByteBuffer 中\n        this.buffer = buffer;\n        // 初始指定的 ByteBuf 容量 initialCapacity\n        capacity = buffer.remaining();    \n    }\n}\n")])])]),t("p",[e._v("由此一来，Netty 中的 ByteBuf 就会被 readerIndex，writerIndex，capacity，maxCapacity 这四个指针分割成四个部分，上图中笔者以按照不同的颜色进行了区分。")]),e._v(" "),t("ul",[t("li",[e._v("其中 "),t("code",[e._v("[0 , capacity)")]),e._v(" 这部分是创建 ByteBuf 的时候分配的初始容量，这部分是真正占用内存的，而 "),t("code",[e._v("[capacity , maxCapacity)")]),e._v("这部分表示 ByteBuf 可扩容的容量，这部分还未分配内存。")]),e._v(" "),t("li",[t("code",[e._v("[0 , readerIndex)")]),e._v(" 这部分字节是已经被读取过的字节，是可以被丢弃的范围。")]),e._v(" "),t("li",[t("code",[e._v("[readerIndex , writerIndex)")]),e._v(" 这部分字节表示 ByteBuf 中可以被读取的字节。")]),e._v(" "),t("li",[t("code",[e._v("[writerIndex , capacity)")]),e._v(" 这部分表示 ByteBuf 的剩余容量，也就是可以写入的字节范围。")])]),e._v(" "),t("p",[e._v("这四个指针他们之间的关系为 ："),t("code",[e._v("0 <= readerIndex <= writerIndex <= capacity <= maxCapacity")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('  private static void checkIndexBounds(final int readerIndex, final int writerIndex, final int capacity) {\n        if (readerIndex < 0 || readerIndex > writerIndex || writerIndex > capacity) {\n            throw new IndexOutOfBoundsException(String.format(\n                    "readerIndex: %d, writerIndex: %d (expected: 0 <= readerIndex <= writerIndex <= capacity(%d))",\n                    readerIndex, writerIndex, capacity));\n        }\n    }\n')])])]),t("p",[e._v("当我们对 ByteBuf 进行读取操作的时候，需要通过 "),t("code",[e._v("isReadable")]),e._v(" 判断 ByteBuf 是否可读。以及通过 "),t("code",[e._v("readableBytes")]),e._v(" 判断 ByteBuf 具体还有多少字节可读。当 readerIndex 等于 writerIndex 的时候，ByteBuf 就不可读了。 "),t("code",[e._v("[0 , readerIndex)")]),e._v(" 这部分字节就可以被丢弃了。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    @Override\n    public boolean isReadable() {\n        return writerIndex > readerIndex;\n    }\n\n    @Override\n    public int readableBytes() {\n        return writerIndex - readerIndex;\n    }\n")])])]),t("p",[e._v("当我们对 ByteBuf 进行写入操作的时候，需要通过 "),t("code",[e._v("isWritable")]),e._v(" 判断 ByteBuf 是否可写。以及通过 "),t("code",[e._v("writableBytes")]),e._v(" 判断 ByteBuf 具体还可以写多少字节。当 writerIndex 等于 capacity 的时候，ByteBuf 就不可写了。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("   @Override\n    public boolean isWritable() {\n        return capacity() > writerIndex;\n    }\n\n    @Override\n    public int writableBytes() {\n        return capacity() - writerIndex;\n    }\n")])])]),t("p",[e._v("当 ByteBuf 的容量已经被写满，变为不可写的时候，如果继续对 ByteBuf 进行写入，那么就需要扩容了，但扩容后的 capacity 最大不能超过 maxCapacity。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    final void ensureWritable0(int minWritableBytes) {\n        // minWritableBytes 表示本次要写入的字节数\n        // 获取当前 writerIndex 的位置\n        final int writerIndex = writerIndex();\n        // 为满足本次的写入操作，预期的 ByteBuf 容量大小\n        final int targetCapacity = writerIndex + minWritableBytes;\n        // 如果 targetCapacity 在（capacity , maxCapacity] 之间，则进行扩容\n        if (targetCapacity >= 0 & targetCapacity <= capacity()) {\n            // targetCapacity 在 [0 , capacity] 之间，则无需扩容，本来就可以满足\n            return;\n        }\n        // 扩容后的 capacity 最大不能超过 maxCapacity\n        if (checkBounds && (targetCapacity < 0 || targetCapacity > maxCapacity)) {\n            throw new IndexOutOfBoundsException(String.format(\n                    "writerIndex(%d) + minWritableBytes(%d) exceeds maxCapacity(%d): %s",\n                    writerIndex, minWritableBytes, maxCapacity, this));\n        }\n\n        ..... 扩容 ByteBuf ......\n    }\n')])])]),t("h3",{attrs:{id:"_2-2-bytebuf-的读取操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-bytebuf-的读取操作"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.2 ByteBuf 的读取操作")])]),e._v(" "),t("p",[e._v("明白了 ByteBuf 基本结构之后，我们来看一下针对 ByteBuf 的读写等基本操作是如何进行的。Netty 支持以多种基本类型为粒度对 ByteBuf 进行读写，除此之外还支持 "),t("code",[e._v("Unsigned")]),e._v(" 基本类型的转换以及大小端的转换。下面笔者以 Byte 和 Int 这两种基本类型为例对 ByteBuf 的读取操作进行说明。")]),e._v(" "),t("p",[e._v("ByteBuf 中的 get 方法只是单纯地从 ByteBuf 中读取数据，并不改变其 readerIndex 的位置，我们可以通过 "),t("code",[e._v("getByte")]),e._v(" 从 ByteBuf 中的指定位置 index 读取一个 Byte 出来，也可以通过 "),t("code",[e._v("getUnsignedByte")]),e._v(" 从 ByteBuf 读取一个 Byte 并转换成 "),t("code",[e._v("UnsignedByte")]),e._v(" 。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public abstract class AbstractByteBuf extends ByteBuf {\n    @Override\n    public byte getByte(int index) {\n        // 检查 index 的边界，index 不能超过 capacity（index < capacity）\n        checkIndex(index);\n        return _getByte(index);\n    }\n\n    @Override\n    public short getUnsignedByte(int index) {\n        // 将获取到的 Byte 转换为 UnsignedByte\n        return (short) (getByte(index) & 0xFF);\n    }   \n\n    protected abstract byte _getByte(int index);\n}\n")])])]),t("p",[e._v("其底层依赖的是一个抽象方法 "),t("code",[e._v("_getByte")]),e._v("，由 AbstractByteBuf 具体的子类负责实现。比如，在 UnpooledDirectByteBuf 类的实现中，直接将 _getByte 操作代理给其底层依赖的 JDK DirectByteBuffer。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class UnpooledDirectByteBuf  {\n    // 底层依赖 JDK 的 DirectByteBuffer\n    ByteBuffer buffer;\n\n    @Override\n    protected byte _getByte(int index) {\n        return buffer.get(index);\n    }\n}\n")])])]),t("p",[e._v("而在 UnpooledUnsafeDirectByteBuf 类的实现中，则是通过 "),t("code",[e._v("sun.misc.Unsafe")]),e._v(" 直接从对应的内存地址中读取。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class UnpooledUnsafeDirectByteBuf {\n    // 直接操作 OS 的内存地址\n    long memoryAddress;\n    @Override\n    protected byte _getByte(int index) {\n        // 底层依赖 PlatformDependent0，直接通过内存地址读取 byte\n        return UnsafeByteBufUtil.getByte(addr(index));\n    }\n\n    final long addr(int index) {\n        // 获取偏移 index 对应的内存地址\n        return memoryAddress + index;\n    }\n}\n\nfinal class PlatformDependent0 {\n  // sun.misc.Unsafe\n  static final Unsafe UNSAFE;\n  static byte getByte(long address) {\n        return UNSAFE.getByte(address);\n    }\n}\n")])])]),t("p",[e._v("Netty 另外还提供了批量读取 Bytes 的操作，比如我们可以通过 "),t("code",[e._v("getBytes")]),e._v(" 方法将 ByteBuf 中的数据读取到一个字节数组 "),t("code",[e._v("byte[]")]),e._v(" 中，也可以读取到另一个 ByteBuf 中。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    @Override\n    public ByteBuf getBytes(int index, byte[] dst) {\n        getBytes(index, dst, 0, dst.length);\n        return this;\n    }\n\n    public abstract ByteBuf getBytes(int index, byte[] dst, int dstIndex, int length);\n\n    @Override\n    public ByteBuf getBytes(int index, ByteBuf dst, int length) {\n        getBytes(index, dst, dst.writerIndex(), length);\n        // 调整 dst 的  writerIndex\n        dst.writerIndex(dst.writerIndex() + length);\n        return this;\n    }\n    \n    // 注意这里的 getBytes 方法既不会改变原来 ByteBuf 的 readerIndex 和 writerIndex\n    // 也不会改变目的 ByteBuf 的 readerIndex 和 writerIndex\n    public abstract ByteBuf getBytes(int index, ByteBuf dst, int dstIndex, int length);\n")])])]),t("p",[e._v("通过 getBytes 方法将原来 ByteBuf 的数据读取到目的 ByteBuf 之后，原来 ByteBuf 的 readerIndex 不会发生变化，但是目的 ByteBuf 的 writerIndex 会重新调整。")]),e._v(" "),t("p",[e._v("对于 UnpooledDirectByteBuf 类的具体实现来说自然是将 getBytes 的操作直接代理给其底层依赖的 JDK DirectByteBuffer。对于 UnpooledUnsafeDirectByteBuf 类的具体实现来说，则是通过 "),t("code",[e._v("UNSAFE.copyMemory")]),e._v(" 直接根据内存地址进行拷贝。")]),e._v(" "),t("p",[e._v("而 ByteBuf 中的 read 方法则不仅会从 ByteBuf 中读取数据，而且会改变其 readerIndex 的位置。比如，"),t("code",[e._v("readByte")]),e._v(" 方法首先会通过前面介绍的 "),t("code",[e._v("_getByte")]),e._v(" 从 ByteBuf 中读取一个字节，然后将 readerIndex 向后移动一位。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("   @Override\n    public byte readByte() {\n        checkReadableBytes0(1);\n        int i = readerIndex;\n        byte b = _getByte(i);\n        readerIndex = i + 1;\n        return b;\n    }\n")])])]),t("p",[e._v("同样 Netty 也提供了从 ByteBuf 中批量读取数据的方法 readBytes，我们可以将一个 ByteBuf 中的数据通过 readBytes 方法读取到另一个 ByteBuf 中。但是这里，Netty 将会改变原来 ByteBuf 的 readerIndex 以及目的 ByteBuf 的 writerIndex。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("   @Override\n    public ByteBuf readBytes(ByteBuf dst, int length) {\n        readBytes(dst, dst.writerIndex(), length);\n        // 改变 dst 的 writerIndex\n        dst.writerIndex(dst.writerIndex() + length);\n        return this;\n    }\n")])])]),t("p",[e._v("另外我们还可以明确指定 dstIndex，使得我们可以从目的 ByteBuf 中的某一个位置处开始拷贝原来 ByteBuf 中的数据，但这里只会改变原来 ByteBuf 的 readerIndex，并不会改变目的 ByteBuf 的 writerIndex。这也很好理解，因为我们在写入目的 ByteBuf  的时候已经明确指定了 writerIndex（dstIndex），自然在写入完成之后，writerIndex 的位置并不需要改变。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    @Override\n    public ByteBuf readBytes(ByteBuf dst, int dstIndex, int length) {\n        checkReadableBytes(length);\n        getBytes(readerIndex, dst, dstIndex, length);\n        // 改变原来 ByteBuf 的 readerIndex\n        readerIndex += length;\n        return this;\n    }\n")])])]),t("p",[e._v("除此之外，Netty 还支持将 ByteBuf 中的数据读取到不同的目的地，比如，读取到 JDK ByteBuffer 中，读取到 FileChannel 中，读取到 OutputStream 中，以及读取到 GatheringByteChannel 中。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public abstract ByteBuf readBytes(ByteBuffer dst);\npublic abstract ByteBuf readBytes(OutputStream out, int length) throws IOException;\npublic abstract int readBytes(GatheringByteChannel out, int length) throws IOException;\npublic abstract int readBytes(FileChannel out, long position, int length) throws IOException;\n")])])]),t("p",[e._v("Netty 除了支持以  Byte 为粒度对 ByteBuf 进行读写之外，还同时支持以多种基本类型对 ByteBuf 进行读写，这里笔者以 Int 类型为例进行说明。")]),e._v(" "),t("p",[e._v("我们可以通过 "),t("code",[e._v("readInt()")]),e._v(" 从 ByteBuf 中读取一个 Int 类型的数据出来，随后 ByteBuf 的 readerIndex 向后移动 4 个位置。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("   @Override\n    public int readInt() {\n        checkReadableBytes0(4);\n        int v = _getInt(readerIndex);\n        readerIndex += 4;\n        return v;\n    }\n\n    protected abstract int _getInt(int index);\n")])])]),t("p",[e._v("同理，真正负责读取数据的方法 _getInt 方法需要由 AbstractByteBuf 具体的子类实现，但这里和 _getByte 不同的是，_getInt 需要考虑字节序的问题，"),t("strong",[e._v("由于网络协议采用的是大端字节序传输，所以 Netty 的 ByteBuf 默认也是大端字节序")]),e._v("。")]),e._v(" "),t("p",[e._v("在 UnpooledDirectByteBuf 的实现中，同样也是将 getInt 的操作直接代理给其底层依赖的 JDK DirectByteBuffer。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class UnpooledDirectByteBuf  {\n    @Override\n    protected int _getInt(int index) {\n        // 代理给其底层依赖的 JDK DirectByteBuffer\n        return buffer.getInt(index);\n    }\n}\n")])])]),t("p",[e._v("在 UnpooledUnsafeDirectByteBuf 的实现中，由于是通过 "),t("code",[e._v("sun.misc.Unsafe")]),e._v(" 直接对内存地址进行操作，所以需要考虑字节序转换的细节。Netty 的 ByteBuf 默认是大端字节序，所以这里直接依次将低地址的字节放到 Int 数据的高位就可以了。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class UnpooledUnsafeDirectByteBuf {\n    @Override\n    protected int _getInt(int index) {\n        return UnsafeByteBufUtil.getInt(addr(index));\n    }\n}\n\nfinal class UnsafeByteBufUtil {\n    static int getInt(long address) {    \n        return PlatformDependent.getByte(address) << 24 |\n               (PlatformDependent.getByte(address + 1) & 0xff) << 16 |\n               (PlatformDependent.getByte(address + 2) & 0xff) <<  8 |\n               PlatformDependent.getByte(address + 3)  & 0xff;\n    }\n}\n")])])]),t("p",[e._v("同时 Netty 也支持以小端字节序来从 ByteBuf 中读取 Int 数据，这里就涉及到字节序的转换了。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    @Override\n    public int readIntLE() {\n        checkReadableBytes0(4);\n        int v = _getIntLE(readerIndex);\n        readerIndex += 4;\n        return v;\n    }\n\n protected abstract int _getIntLE(int index);\n")])])]),t("p",[e._v("在 UnpooledDirectByteBuf 的实现中，首先通过其依赖的 JDK DirectByteBuffer   以大端序读取一个 Int 数据，然后通过 "),t("code",[e._v("ByteBufUtil.swapInt")]),e._v(" 切换成小端序返回。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class UnpooledDirectByteBuf  {\n    @Override\n    protected int _getIntLE(int index) {\n        // 切换字节序，从大端变小端\n        return ByteBufUtil.swapInt(buffer.getInt(index));\n    }\n}\n")])])]),t("p",[e._v("在 UnpooledUnsafeDirectByteBuf 的实现中，则是直接将低地址上的字节依次放到 Int 数据的低位上就可以了。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class UnpooledUnsafeDirectByteBuf {\n    @Override\n    protected int _getIntLE(int index) {\n        return UnsafeByteBufUtil.getIntLE(addr(index));\n    }\n}\n\nfinal class UnsafeByteBufUtil {\n    static int getIntLE(long address) {\n        return PlatformDependent.getByte(address) & 0xff |\n               (PlatformDependent.getByte(address + 1) & 0xff) <<  8 |\n               (PlatformDependent.getByte(address + 2) & 0xff) << 16 |\n               PlatformDependent.getByte(address + 3) << 24;\n    }\n}\n")])])]),t("p",[e._v("另外 Netty 也支持从 ByteBuf 中读取基本类型的 "),t("code",[e._v("Unsigned 类型")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    @Override\n    public long readUnsignedInt() {\n        return readInt() & 0xFFFFFFFFL;\n    }\n\n    @Override\n    public long readUnsignedIntLE() {\n        return readIntLE() & 0xFFFFFFFFL;\n    }\n")])])]),t("p",[e._v("其他基本类型的相关读取操作实现的逻辑都是大同小异，笔者就不一一列举了。")]),e._v(" "),t("h3",{attrs:{id:"_2-3-discardreadbytes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-discardreadbytes"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.3 discardReadBytes")])]),e._v(" "),t("p",[e._v("随着 readBytes 方法的不断调用， ByteBuf 中的 readerIndex 也会不断的向后移动，Netty 对 readerIndex 的设计有两层语义：")]),e._v(" "),t("ol",[t("li",[e._v("第一层的语义比较明显，就是用来表示当前 ByteBuf 的读取位置，当我们调用 readBytes 方法的时候就是从 readerIndex 开始读取数据，当 readerIndex 等于 writerIndex 的时候，ByteBuf 就不可读取了。")]),e._v(" "),t("li",[e._v("第二层语义比较含蓄，它是用来表示当前 ByteBuf 可以被丢弃的字节数，因为 readerIndex 用来指示当前的读取位置，那么位于 readerIndex 之前的字节肯定是已经被读取完毕了，已经被读取的字节继续驻留在 ByteBuf 中就没有必要了，还不如把空间腾出来，还能在多写入些数据。")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409191121413.webp",alt:"图片"}}),e._v("image.png")]),e._v(" "),t("p",[e._v("所以一个 ByteBuf 真正的剩余可写容量的计算方式除了上小节中介绍的 "),t("code",[e._v("writableBytes()")]),e._v(" 方法返回的字节数之外还需要在加上 readerIndex。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    @Override\n    public int writableBytes() {\n        return capacity() - writerIndex;\n    }\n")])])]),t("p",[e._v("举个具体点的例子就是，当我们准备向一个 ByteBuf 写入 n 个字节时，如果 "),t("code",[e._v("writableBytes()")]),e._v(" 小于 n，那么就表示当前 ByteBuf 的剩余容量不能满足本次写入的字节数。")]),e._v(" "),t("p",[e._v("但是 "),t("code",[e._v("readerIndex + writableBytes()")]),e._v("大于等于 n ， 则表示如果我们将 ByteBuf 中已经读取的字节数丢弃的话，那么就可以满足本次写入的请求。")]),e._v(" "),t("p",[e._v("在这种情况下，我们就可以使用 "),t("code",[e._v("discardReadBytes()")]),e._v(" 方法将 readerIndex 之前的字节丢弃掉，这样一来，可写的字节容就可以满足本次写入要求了，那么如果丢弃呢 ？")]),e._v(" "),t("p",[e._v("我们先来看 "),t("code",[e._v("readerIndex < writerIndex")]),e._v(" 的情况，这种情况下表示 ByteBuf 中还有未读取的字节。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("p",[e._v("ByteBuf 目前可读取的字节范围为："),t("code",[e._v("[readerIndex, writerIndex)")]),e._v("，位于 readerIndex 之前的字节均可以被丢弃，接下来我们就需要将 "),t("code",[e._v("[readerIndex, writerIndex)")]),e._v(" 这段范围的字节全部拷贝到 ByteBuf 最前面，直接覆盖 readerIndex 之前的字节。")]),e._v(" "),t("p",[e._v("然后调整 readerIndex 和 writerIndex 的位置，因为 readerIndex 之前的字节现在已经全部被可读字节覆盖了，所以 readerIndex 重新调整为 0 ，writerIndex 向前移动 readerIndex 大小。这样一来，当前 ByteBuf 的可写容量就多出了 readerIndex 大小。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("p",[e._v("另外一种情况是 "),t("code",[e._v("readerIndex = writerIndex")]),e._v(" 的情况，这种情况下表示 ByteBuf 中已经没有可读字节了。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("p",[e._v("既然 ByteBuf 中已经没有任何可读字节了，自然也就不需要将可读字节拷贝到 ByteBuf 的开头了，直接将 readerIndex 和 writerIndex 重新调整为 0 即可。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public abstract class AbstractByteBuf extends ByteBuf {\n    @Override\n    public ByteBuf discardReadBytes() {\n        // readerIndex 为 0 表示没有可以丢弃的字节\n        if (readerIndex == 0) {\n            return this;\n        }\n\n        if (readerIndex != writerIndex) {\n            // 将 [readerIndex, writerIndex) 这段字节范围移动到 ByteBuf 的开头\n            // 也就是丢弃 readerIndex 之前的字节\n            setBytes(0, this, readerIndex, writerIndex - readerIndex);\n            // writerIndex 和 readerIndex 都向前移动 readerIndex 大小\n            writerIndex -= readerIndex;\n            // 重新调整 markedReaderIndex 和 markedWriterIndex 的位置\n            // 都对应向前移动 readerIndex 大小。\n            adjustMarkers(readerIndex);\n            readerIndex = 0;\n        } else {\n            // readerIndex = writerIndex 表示当前 ByteBuf 已经不可读了\n            // 将 readerIndex 之前的字节全部丢弃，ByteBuf 恢复到最初的状态\n            // 整个 ByteBuf 的容量都可以被写入\n            ensureAccessible();\n            adjustMarkers(readerIndex);\n            writerIndex = readerIndex = 0;\n        }\n        return this;\n    }\n}\n")])])]),t("p",[e._v("如果 ByteBuf 存在可以被丢弃的字节的时候（readerIndex > 0），只要我们调用 "),t("code",[e._v("discardReadBytes()")]),e._v(" 就会无条件丢弃 readerIndex 之前的字节。")]),e._v(" "),t("p",[e._v("Netty 还另外提供了 "),t("code",[e._v("discardSomeReadBytes()")]),e._v(" 方法进行有条件丢弃字节，丢弃条件有如下两种：")]),e._v(" "),t("ol",[t("li",[e._v("当 ByteBuf 已经不可读的时候，则无条件丢弃已读字节。")]),e._v(" "),t("li",[e._v("当已读的字节数超过整个 ByteBuf 一半容量时才会丢弃已读字节。否则无条件丢弃的话，收益就不高了。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    @Override\n    public ByteBuf discardSomeReadBytes() {\n        if (readerIndex > 0) {\n            // 当 ByteBuf 已经不可读了，则无条件丢弃已读字节\n            if (readerIndex == writerIndex) {\n                adjustMarkers(readerIndex);\n                writerIndex = readerIndex = 0;\n                return this;\n            }\n            // 当已读的字节数超过整个 ByteBuf 的一半容量时才会丢弃已读字节\n            if (readerIndex >= capacity() >>> 1) {\n                setBytes(0, this, readerIndex, writerIndex - readerIndex);\n                writerIndex -= readerIndex;\n                adjustMarkers(readerIndex);\n                readerIndex = 0;\n                return this;\n            }\n        }\n        return this;\n    }\n")])])]),t("p",[e._v("Netty 设计的这个丢弃字节的方法在解码的场景非常有用，由于 TCP 是一个面向流的网络协议，它只会根据滑动窗口的大小进行字节流的发送，所以我们在应用层接收到的数据可能是一个半包也可能是一个粘包，反正不会是一个完整的数据包。")]),e._v(" "),t("p",[e._v("这就要求我们在解码的时候，首先要判断 ByteBuf 中的数据是否构成一个完成的数据包，如果构成一个数据包，才会去读取 ByteBuf 中的字节，然后解码，随后 readerIndex 向后移动。")]),e._v(" "),t("p",[e._v("如果不够一个数据包，那就需要将 ByteBuf 累积缓存起来，一直等到一个完整的数据包到来。一种极端的情况是，即使我们已经解码很多次了，但是缓存的 ByteBuf 中仍然还有半包，由于不断的会有粘包过来，这就导致 ByteBuf 会越来越大。由于已经解码了很多次，所以 ByteBuf 中可以被丢弃的字节占据了很大的内存空间，如果半包情况持续存在，将会导致 OutOfMemory。")]),e._v(" "),t("p",[e._v("所以 Netty 规定，如果已经解码了 16 次之后，ByteBuf 中仍然有半包的情况，那么就会调用这里的 "),t("code",[e._v("discardSomeReadBytes()")]),e._v(" 将已经解码过的字节全部丢弃，节省不必要的内存开销。")]),e._v(" "),t("h3",{attrs:{id:"_2-4-bytebuf-的写入操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-bytebuf-的写入操作"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.4 ByteBuf 的写入操作")])]),e._v(" "),t("p",[e._v("ByteBuf 的写入操作与读取操作互为相反的操作，每一个读取方法 getBytes , readBytes , readInt 等都有一个对应的 setBytes , writeBytes , writeInt 等基础类型的写入操作。")]),e._v(" "),t("p",[e._v("和 get 方法一样，set 相关的方法也只是单纯的向 ByteBuf 中写入数据，并不会改变其 writerIndex 的位置，我们可以通过 "),t("code",[e._v("setByte")]),e._v(" 向 ByteBuf 中的某一个指定位置 index 写入数据 value。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    @Override\n    public ByteBuf setByte(int index, int value) {\n        checkIndex(index);\n        _setByte(index, value);\n        return this;\n    }\n\n    protected abstract void _setByte(int index, int value);\n")])])]),t("p",[e._v("执行具体的写入操作同样也是一个抽象方法，其具体的实现由 AbstractByteBuf 具体的子类负责。对于 UnpooledDirectByteBuf 的实现来说，_setByte 操作直接会代理给其底层依赖的 JDK  DirectByteBuffer。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class UnpooledDirectByteBuf  {\n    // 底层依赖 JDK 的 DirectByteBuffer\n    ByteBuffer buffer;\n\n    @Override\n    protected void _setByte(int index, int value) {\n        buffer.put(index, (byte) value);\n    }\n}\n")])])]),t("p",[e._v("对于 UnpooledUnsafeDirectByteBuf 的实现来说，则是直接通过 "),t("code",[e._v("sun.misc.Unsafe")]),e._v(" 向对应的内存地址（memoryAddress + index）写入 Byte。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class UnpooledUnsafeDirectByteBuf {\n    // 直接操作 OS 的内存地址，不依赖 JDK 的 buffer\n    long memoryAddress;\n\n   @Override\n    protected void _setByte(int index, int value) {\n        // 底层依赖 PlatformDependent0，直接向内存地址写入 byte\n        UnsafeByteBufUtil.setByte(addr(index), value);\n    }\n\n    final long addr(int index) {\n        // 获取偏移 index 对应的内存地址\n        return memoryAddress + index;\n    }\n}\n\nfinal class PlatformDependent0 {\n  // sun.misc.Unsafe\n  static final Unsafe UNSAFE;\n  static void putByte(long address, byte value) {\n        UNSAFE.putByte(address, value);\n  }\n}\n")])])]),t("p",[e._v("Netty 另外也提供了向 ByteBuf 批量写入 Bytes 的操作，setBytes 方法用于向 ByteBuf 的指定位置 index 批量写入一个字节数组 byte[] 中的数据。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("   @Override\n    public ByteBuf setBytes(int index, byte[] src) {\n        setBytes(index, src, 0, src.length);\n        return this;\n    }\n\n    public abstract ByteBuf setBytes(int index, byte[] src, int srcIndex, int length);\n")])])]),t("p",[e._v("对于 UnpooledDirectByteBuf 的实现来说，同样也是将 setBytes 的操作直接代理给 JDK DirectByteBuffer，将字节数组 byte[] 中的字节直接写入 DirectByteBuffer 中。")]),e._v(" "),t("p",[e._v("对于 UnpooledUnsafeDirectByteBuf  的实现来说，则是直接操作字节数组和 ByteBuf 的内存地址，通过 "),t("code",[e._v("UNSAFE.copyMemory")]),e._v(" 将字节数组对应内存地址中的数据拷贝到 ByteBuf 相应的内存地址上。")]),e._v(" "),t("p",[e._v("我们还可以通过 setBytes 方法将其他 ByteBuf 中的字节数据写入到 ByteBuf 中。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    @Override\n    public ByteBuf setBytes(int index, ByteBuf src, int length) {\n        setBytes(index, src, src.readerIndex(), length);\n        // 调整 src 的  readerIndex\n        src.readerIndex(src.readerIndex() + length);\n        return this;\n    }\n\n    // 注意这里的 setBytes 方法既不会改变原来 ByteBuf 的 readerIndex 和 writerIndex\n    // 也不会改变目的 ByteBuf 的 readerIndex 和 writerIndex\n    public abstract ByteBuf setBytes(int index, ByteBuf src, int srcIndex, int length);\n")])])]),t("p",[t("strong",[e._v("这里需要注意的是被写入 ByteBuf 的 writerIndex 并不会改变，但是原来 ByteBuf 的 readerIndex 会重新调整")]),e._v("。")]),e._v(" "),t("p",[e._v("ByteBuf 中的 write 方法底层依赖的是相关的 set 方法，不同的是 write 方法会改变 ByteBuf 中 writerIndex 的位置。比如，我们通过 "),t("code",[e._v("writeByte")]),e._v(" 方法向 ByteBuf 中写入一个字节之后，writerIndex 就会向后移动一位。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    @Override\n    public ByteBuf writeByte(int value) {\n        ensureWritable0(1);\n        _setByte(writerIndex++, value);\n        return this;\n    }\n")])])]),t("p",[e._v("我们也可以通过 writeBytes 向 ByteBuf 中批量写入数据，将一个字节数组中的数据或者另一个 ByteBuf 中的数据写入到 ByteBuf 中，但是这里，Netty 将会改变被写入 ByteBuf 的 writerIndex 以及数据来源 ByteBuf  的 readerIndex。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    @Override\n    public ByteBuf writeBytes(ByteBuf src, int length) {\n        writeBytes(src, src.readerIndex(), length);\n        // 调整数据来源 ByteBuf 的 readerIndex\n        src.readerIndex(src.readerIndex() + length);\n        return this;\n    }\n")])])]),t("p",[e._v("如果我们明确指定了从数据来源 ByteBuf 中的哪一个位置（srcIndex）开始读取数据，那么数据来源 ByteBuf 中的 readerIndex 将不会被改变，只会改变被写入 ByteBuf 的 writerIndex。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    @Override\n    public ByteBuf writeBytes(ByteBuf src, int srcIndex, int length) {\n        ensureWritable(length);\n        setBytes(writerIndex, src, srcIndex, length);\n        // 调整被写入 ByteBuf 的 writerIndex\n        writerIndex += length;\n        return this;\n    }\n")])])]),t("p",[e._v("除此之外，Netty 还支持从不同的数据来源向 ByteBuf 批量写入数据，比如，从 JDK ByteBuffer ，从 FileChannel ，从 InputStream ，以及从 ScatteringByteChannel 中。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public ByteBuf writeBytes(ByteBuffer src) \npublic int writeBytes(InputStream in, int length)\npublic int writeBytes(ScatteringByteChannel in, int length) throws IOException\npublic int writeBytes(FileChannel in, long position, int length) throws IOException\n")])])]),t("p",[e._v("Netty 除了支持以 Byte 为粒度向 ByteBuf 中写入数据之外，还同时支持以多种基本类型为粒度向写入 ByteBuf ，这里笔者以 Int 类型为例进行说明。")]),e._v(" "),t("p",[e._v("我们可以通过 writeInt() 向 ByteBuf 写入一个 Int 类型的数据，随后 ByteBuf 的 writerIndex 向后移动 4 个位置。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    @Override\n    public ByteBuf writeInt(int value) {\n        ensureWritable0(4);\n        _setInt(writerIndex, value);\n        writerIndex += 4;\n        return this;\n    }\n\n   protected abstract void _setInt(int index, int value);\n")])])]),t("p",[e._v("和写入 Byte 数据不同的是，这里需要考虑字节序，Netty  ByteBuf 默认是大端字节序，和网络协议传输使用的字节序保持一致。这里我们需要将待写入数据 value 的高位依次放入到 ByteBuf 的低地址上。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class UnpooledUnsafeDirectByteBuf {\n   @Override\n    protected void _setInt(int index, int value) {\n        // 以大端字节序写入 ByteBuf \n        UnsafeByteBufUtil.setInt(addr(index), value);\n    }\n}\n\nfinal class UnsafeByteBufUtil {\n   static void setInt(long address, int value) {\n            PlatformDependent.putByte(address, (byte) (value >>> 24));\n            PlatformDependent.putByte(address + 1, (byte) (value >>> 16));\n            PlatformDependent.putByte(address + 2, (byte) (value >>> 8));\n            PlatformDependent.putByte(address + 3, (byte) value);   \n    }\n}\n")])])]),t("p",[e._v("同时 Netty 也支持以小端字节序向 ByteBuf 写入数据。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    @Override\n    public ByteBuf writeIntLE(int value) {\n        ensureWritable0(4);\n        _setIntLE(writerIndex, value);\n        writerIndex += 4;\n        return this;\n    }\n\n   protected abstract void _setIntLE(int index, int value);\n")])])]),t("p",[e._v("这里需要将待写入数据 value 的低位依次放到 ByteBuf 的低地址上。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class UnpooledUnsafeDirectByteBuf {\n    @Override\n    protected void _setIntLE(int index, int value) {\n        // // 以小端字节序写入 ByteBuf \n        UnsafeByteBufUtil.setIntLE(addr(index), value);\n    }\n}\n\nfinal class UnsafeByteBufUtil {\n   static void setIntLE(long address, int value) {\n            PlatformDependent.putByte(address, (byte) value);\n            PlatformDependent.putByte(address + 1, (byte) (value >>> 8));\n            PlatformDependent.putByte(address + 2, (byte) (value >>> 16));\n            PlatformDependent.putByte(address + 3, (byte) (value >>> 24));\n    }\n}\n")])])]),t("h3",{attrs:{id:"_2-5-bytebuf-的扩容机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-bytebuf-的扩容机制"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.5 ByteBuf 的扩容机制")])]),e._v(" "),t("p",[e._v("在每次向 ByteBuf 写入数据的时候，Netty 都会调用 "),t("code",[e._v("ensureWritable0")]),e._v(" 方法来判断当前 ByteBuf 剩余可写容量（capacity - writerIndex）是否能够满足本次需要写入的数据大小 minWritableBytes。如果剩余容量不足，那么就需要对 ByteBuf 进行扩容，但扩容后的容量不能超过 maxCapacity 的大小。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    final void ensureWritable0(int minWritableBytes) {\n        final int writerIndex = writerIndex();\n        // 为满足本次的写入操作，预期的 ByteBuf 容量大小\n        final int targetCapacity = writerIndex + minWritableBytes;\n        // 剩余容量可以满足本次写入要求，直接返回，不需要扩容\n        if (targetCapacity >= 0 & targetCapacity <= capacity()) {\n            return;\n        }\n        // 扩容后的容量不能超过 maxCapacity\n        if (checkBounds && (targetCapacity < 0 || targetCapacity > maxCapacity)) {\n            ensureAccessible();\n            throw new IndexOutOfBoundsException(String.format(\n                    "writerIndex(%d) + minWritableBytes(%d) exceeds maxCapacity(%d): %s",\n                    writerIndex, minWritableBytes, maxCapacity, this));\n        }\n\n        // 如果 targetCapacity 在（capacity , maxCapacity] 之间，则进行扩容\n        // fastWritable 表示在不涉及到 memory reallocation or data-copy 的情况下，当前 ByteBuf 可以直接写入的容量\n        // 对于 UnpooledDirectBuffer 这里的 fastWritable = capacity - writerIndex\n        // PooledDirectBuffer 有另外的实现，这里先暂时不需要关注\n        final int fastWritable = maxFastWritableBytes();\n        // 计算扩容后的容量 newCapacity\n        // 对于 UnpooledDirectBuffer 来说这里直接通过 calculateNewCapacity 计算扩容后的容量。\n        int newCapacity = fastWritable >= minWritableBytes ? writerIndex + fastWritable\n                : alloc().calculateNewCapacity(targetCapacity, maxCapacity);\n\n        // 根据 new capacity 对 ByteBuf 进行扩容\n        capacity(newCapacity);\n    }\n')])])]),t("h4",{attrs:{id:"_2-5-1-newcapacity-的计算逻辑"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-1-newcapacity-的计算逻辑"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.5.1 newCapacity 的计算逻辑")])]),e._v(" "),t("p",[e._v("ByteBuf 的初始默认 capacity 为 256 个字节，初始默认 maxCapacity 为 "),t("code",[e._v("Integer.MAX_VALUE")]),e._v(" 也就是 2G 大小。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public abstract class AbstractByteBufAllocator implements ByteBufAllocator {\n    // ByteBuf 的初始默认 CAPACITY\n    static final int DEFAULT_INITIAL_CAPACITY = 256;\n    // ByteBuf 的初始默认 MAX_CAPACITY \n    static final int DEFAULT_MAX_CAPACITY = Integer.MAX_VALUE;\n\n    @Override\n    public ByteBuf directBuffer() {\n        return directBuffer(DEFAULT_INITIAL_CAPACITY, DEFAULT_MAX_CAPACITY);\n    }\n}\n")])])]),t("p",[e._v("为满足本次写入操作，对 ByteBuf 的最小容量要求为 minNewCapacity，它的值就是在 "),t("code",[e._v("ensureWritable0")]),e._v(" 方法中计算出来的 "),t("code",[e._v("targetCapacity")]),e._v(", 计算方式为： "),t("code",[e._v("minNewCapacity = writerIndex + minWritableBytes（本次将要写入的字节数）")]),e._v("。")]),e._v(" "),t("p",[e._v("在 ByteBuf 的扩容逻辑中，Netty 设置了一个重要的阈值 "),t("code",[e._v("CALCULATE_THRESHOLD")]),e._v(", 大小为 4M，它决定了 ByteBuf 扩容的尺度。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    // 扩容的尺度\n    static final int CALCULATE_THRESHOLD = 1048576 * 4; // 4 MiB page\n")])])]),t("p",[e._v("如果 minNewCapacity 恰好等于 CALCULATE_THRESHOLD，那么扩容后的容量 newCapacity 就是 4M。")]),e._v(" "),t("p",[e._v("如果 minNewCapacity 大于 CALCULATE_THRESHOLD，那么 newCapacity 就会按照 4M 的尺度进行扩容，具体的扩容逻辑如下：")]),e._v(" "),t("p",[e._v("首先通过 "),t("code",[e._v("minNewCapacity / threshold * threshold")]),e._v(" 计算出一个准备扩容之前的基准线，后面就会以此基准线为基础，按照 CALCULATE_THRESHOLD 的粒度进行扩容。")]),e._v(" "),t("p",[e._v("该基准线的要求必须是 CALCULATE_THRESHOLD 的最小倍数，而且必须要小于等于 minNewCapacity。")]),e._v(" "),t("p",[e._v("什么意思呢 ？ 假设 minNewCapacity 为 5M，那么它的扩容基准线就是 4M ， 这种情况下扩容之后的容量 "),t("code",[e._v("newCapacity = 4M + CALCULATE_THRESHOLD = 8M")]),e._v(" 。")]),e._v(" "),t("p",[e._v("如果计算出来的基准线超过了 "),t("code",[e._v("maxCapacity - 4M")]),e._v(" , 那么 newCapacity 直接就扩容到 maxCapacity 。")]),e._v(" "),t("p",[e._v("如果 minNewCapacity 小于 CALCULATE_THRESHOLD，那么 newCapacity 就会从 64 开始，一直循环 double , 也就是按照 64 的倍数进行扩容。直到 newCapacity 大于等于 minNewCapacity。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("        int newCapacity = 64;\n        while (newCapacity < minNewCapacity) {\n            newCapacity <<= 1;\n        }\n")])])]),t("ul",[t("li",[e._v("如果 minNewCapacity 在 "),t("code",[e._v("[0 , 64]")]),e._v(" 这段范围内 ， 那么扩容后的 newCapacity 就是 64")]),e._v(" "),t("li",[e._v("如果 minNewCapacity 在 "),t("code",[e._v("[65 , 128]")]),e._v(" 这段范围内 ， 那么扩容后的 newCapacity 就是 128 。")]),e._v(" "),t("li",[e._v("如果 minNewCapacity 在 "),t("code",[e._v("[129 , 256]")]),e._v(" 这段范围内 ， 那么扩容后的 newCapacity 就是 256 。")])]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public abstract class AbstractByteBufAllocator implements ByteBufAllocator {\n\n    @Override\n    public int calculateNewCapacity(int minNewCapacity, int maxCapacity) {\n        // 满足本次写入操作的最小容量 minNewCapacity 不能超过 maxCapacity\n        if (minNewCapacity > maxCapacity) {\n            throw new IllegalArgumentException(String.format(\n                    "minNewCapacity: %d (expected: not greater than maxCapacity(%d)",\n                    minNewCapacity, maxCapacity));\n        }\n        // 用于决定扩容的尺度\n        final int threshold = CALCULATE_THRESHOLD; // 4 MiB page\n\n        if (minNewCapacity == threshold) {\n            return threshold;\n        }\n\n        // If over threshold, do not double but just increase by threshold.\n        if (minNewCapacity > threshold) {\n            // 计算扩容基准线。\n            // 要求必须是 CALCULATE_THRESHOLD 的最小倍数，而且必须要小于等于 minNewCapacity\n            int newCapacity = minNewCapacity / threshold * threshold;\n            if (newCapacity > maxCapacity - threshold) {\n                newCapacity = maxCapacity;\n            } else {\n                // 按照 threshold (4M)扩容\n                newCapacity += threshold;\n            }\n            return newCapacity;\n        }\n\n        // Not over threshold. Double up to 4 MiB, starting from 64.\n        // 按照 64 的倍数进行扩容。但 newCapacity 需要大于等于 minNewCapacity。\n        int newCapacity = 64;\n        while (newCapacity < minNewCapacity) {\n            newCapacity <<= 1;\n        }\n\n        return Math.min(newCapacity, maxCapacity);\n    }\n}\n')])])]),t("h4",{attrs:{id:"_2-5-2-bytebuf-的扩容逻辑"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-2-bytebuf-的扩容逻辑"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.5.2 ByteBuf 的扩容逻辑")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class UnpooledDirectByteBuf  {\n    // 底层依赖 JDK 的 DirectByteBuffer\n    ByteBuffer buffer;\n}\n")])])]),t("p",[e._v("对于 UnpooledDirectByteBuf 来说，其底层真正存储数据的地方其实是依赖 JDK  中的 DirectByteBuffer，扩容的逻辑很简单，就是首先根据上一小节计算出的 newCapacity 重新分配一个新的 JDK  DirectByteBuffer ， 然后将原来 DirectByteBuffer 中的数据拷贝到新的 DirectByteBuffer 中，最后释放原来的 DirectByteBuffer，将新的 DirectByteBuffer 设置到 UnpooledDirectByteBuf 中。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class UnpooledDirectByteBuf  {\n    void setByteBuffer(ByteBuffer buffer, boolean tryFree) {\n        if (tryFree) {\n            ByteBuffer oldBuffer = this.buffer;\n            // 释放原来的 buffer\n            freeDirect(oldBuffer);\n        }\n        // 重新设置新的 buffer\n        this.buffer = buffer;\n        capacity = buffer.remaining();\n    }\n}\n")])])]),t("p",[e._v("对于 UnpooledUnsafeDirectByteBuf 来说，由于它直接依赖的是 OS 内存地址，对 ByteBuf 的相关操作都是直接操作内存地址进行，所以 UnpooledUnsafeDirectByteBuf 的扩容逻辑除了要执行上面的内容之外，还需要将新 DirectByteBuffer 的内存地址设置到 memoryAddress 中。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class UnpooledUnsafeDirectByteBuf extends UnpooledDirectByteBuf {\n    // ByteBuf 的内存地址\n    long memoryAddress;\n\n    @Override\n    final void setByteBuffer(ByteBuffer buffer, boolean tryFree) {\n        super.setByteBuffer(buffer, tryFree);\n        // 设置成新 buffer 的内存地址\n        memoryAddress = PlatformDependent.directBufferAddress(buffer);\n    }\n}\n")])])]),t("p",[e._v("下面是完整的扩容操作逻辑：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class UnpooledDirectByteBuf  {\n    // 底层依赖 JDK 的 DirectByteBuffer\n    ByteBuffer buffer;\n\n    @Override\n    public ByteBuf capacity(int newCapacity) {\n        // newCapacity 不能超过 maxCapacity\n        checkNewCapacity(newCapacity);\n        int oldCapacity = capacity;\n        if (newCapacity == oldCapacity) {\n            return this;\n        }\n        // 计算扩容之后需要拷贝的字节数\n        int bytesToCopy;\n        if (newCapacity > oldCapacity) {\n            bytesToCopy = oldCapacity;\n        } else {\n            ........ 缩容 .......\n        }\n        ByteBuffer oldBuffer = buffer;\n        // 根据 newCapacity 分配一个新的 ByteBuffer（JDK）\n        ByteBuffer newBuffer = allocateDirect(newCapacity);\n        oldBuffer.position(0).limit(bytesToCopy);\n        newBuffer.position(0).limit(bytesToCopy);\n        // 将原来 oldBuffer 中的数据拷贝到 newBuffer 中\n        newBuffer.put(oldBuffer).clear();\n        // 释放 oldBuffer，设置 newBuffer\n        // 对于 UnpooledUnsafeDirectByteBuf 来说就是将 newBuffer 的地址设置到 memoryAddress 中\n        setByteBuffer(newBuffer, true);\n        return this;\n    }\n}\n")])])]),t("h4",{attrs:{id:"_2-5-3-强制扩容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-3-强制扩容"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.5.3 强制扩容")])]),e._v(" "),t("p",[e._v("前面介绍的 ensureWritable 方法会检查本次写入的数据大小 minWritableBytes 是否超过 ByteBuf 的最大可写容量："),t("code",[e._v("maxCapacity - writerIndex")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public ByteBuf ensureWritable(int minWritableBytes) \n")])])]),t("p",[e._v("如果超过，则会抛出 "),t("code",[e._v("IndexOutOfBoundsException")]),e._v(" 异常停止扩容，Netty 提供了另外一个带有 force 参数的扩容方法，用来决定在这种情况下是否强制进行扩容。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" public int ensureWritable(int minWritableBytes, boolean force) \n")])])]),t("p",[e._v("当 minWritableBytes 已经超过 ByteBuf 的最大可写容量得时候：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("force = false")]),e._v(" ， 那么停止扩容，直接返回，不抛异常。")]),e._v(" "),t("li",[t("code",[e._v("force = true")]),e._v(" , 则进行强制扩容，将 ByteBuf 扩容至 maxCapacity，但是如果当前容量已经达到了 maxCapacity，则停止扩容 。")])]),e._v(" "),t("p",[e._v("带 force 参数的 ensureWritable 并不会抛出异常，而是通过返回状态码来通知调用者 ByteBuf 的容量情况。")]),e._v(" "),t("ol",[t("li",[e._v("返回 0 表示，ByteBuf 当前可写容量可以满足本次写入操作的需求，不需要扩容")]),e._v(" "),t("li",[e._v("返回 1 表示，本次写入的数据大小已经超过了 ByteBuf 的最大可写容量，但 ByteBuf 的容量已经达到了 maxCapacity，无法进行扩容。")]),e._v(" "),t("li",[e._v("返回 3 表示，本次写入的数据大小已经超过了 ByteBuf 的最大可写容量，这种情况下，强制将容量扩容至 maxCapacity。")]),e._v(" "),t("li",[e._v("返回 2 表示，执行正常的扩容逻辑。")])]),e._v(" "),t("p",[e._v("返回值 0 和 2 均表示 ByteBuf 容量（扩容前或者扩容后）可以满足本次写入的数据大小，而返回值 1 和 3 表示 ByteBuf 容量（扩容前或者扩容后）都无法满足本次写入的数据大小。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    @Override\n    public int ensureWritable(int minWritableBytes, boolean force) {\n        // 如果剩余容量可以满足本次写入操作，则不会扩容，直接返回\n        if (minWritableBytes <= writableBytes()) {\n            return 0;\n        }\n\n        final int maxCapacity = maxCapacity();\n        final int writerIndex = writerIndex();\n        // 如果本次写入的数据大小已经超过了 ByteBuf 的最大可写容量 maxCapacity - writerIndex\n        if (minWritableBytes > maxCapacity - writerIndex) {\n            // force = false ， 那么停止扩容，直接返回\n            // force = true, 直接扩容到 maxCapacity，如果当前 capacity 已经等于 maxCapacity 了则停止扩容\n            if (!force || capacity() == maxCapacity) {\n                return 1;\n            }\n            // 虽然扩容之后还是无法满足写入需求，但还是强制扩容至 maxCapacity\n            capacity(maxCapacity);\n            return 3;\n        }\n        // 下面就是普通的扩容逻辑\n        int fastWritable = maxFastWritableBytes();\n        int newCapacity = fastWritable >= minWritableBytes ? writerIndex + fastWritable\n                : alloc().calculateNewCapacity(writerIndex + minWritableBytes, maxCapacity);\n\n        // Adjust to the new capacity.\n        capacity(newCapacity);\n        return 2;\n    }\n")])])]),t("h4",{attrs:{id:"_2-5-4-自适应动态扩容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-4-自适应动态扩容"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.5.4 自适应动态扩容")])]),e._v(" "),t("p",[e._v("Netty 在接收网络数据的过程中，其实一开始是很难确定出该用多大容量的 ByteBuf 去接收的，所以 Netty 在一开始会首先预估一个初始容量 "),t("code",[e._v("DEFAULT_INITIAL (2048)")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class AdaptiveRecvByteBufAllocator {\n    static final int DEFAULT_INITIAL = 2048;\n}\n")])])]),t("p",[e._v("用初始容量为 2048 大小的 ByteBuf 去读取 socket 中的数据，在每一次读取完 socket 之后，Netty 都会评估 ByteBuf 的容量大小是否合适。如果每一次都能把 ByteBuf 装满，那说明我们预估的容量太小了，socket 中还有更多的数据，那么就需要对 ByteBuf 进行扩容，下一次读取 socket 的时候就换一个容量更大的 ByteBuf。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" private final class HandleImpl extends MaxMessageHandle {\n        @Override\n        public void lastBytesRead(int bytes) {\n            // bytes 为本次从 socket 中真实读取的数据大小\n            // attemptedBytesRead 为 ByteBuf 可写的容量大小，初始为 2048\n            if (bytes == attemptedBytesRead()) {\n                // 如果本次读取 socket 中的数据将 ByteBuf 装满了\n                // 那么就对 ByteBuf 进行扩容，在下一次读取的时候用更大的 ByteBuf 去读\n                record(bytes);\n            }\n            // 记录本次从 socket 中读取的数据大小\n            super.lastBytesRead(bytes);\n        }\n }\n")])])]),t("p",[e._v("Netty 会在一个 read loop 中不停的读取 socket 中的数据直到数据被读取完毕或者读满 16 次，结束 read loop 停止读取。ByteBuf 越大那么 Netty 读取的次数就越少，ByteBuf 越小那么 Netty 读取的次数就越多，所以需要一种机制将 ByteBuf 的容量控制在一个合理的范围内。")]),e._v(" "),t("p",[e._v("Netty 会统计每一轮 read loop 总共读取了多少数据 —— totalBytesRead。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" public abstract class MaxMessageHandle implements ExtendedHandle {\n        // 用于统计在一轮 read loop 中总共接收到客户端连接上的数据大小\n        private int totalBytesRead;\n }\n")])])]),t("p",[e._v("在每一轮的 read loop 结束之后，Netty 都会根据这个 totalBytesRead 来判断是否应该对 ByteBuf 进行扩容或者缩容，这样在下一轮 read loop 开始的时候，Netty 就可以用一个相对合理的容量去接收 socket 中的数据，尽量减少读取 socket 的次数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("private final class HandleImpl extends MaxMessageHandle {\n        @Override\n        public void readComplete() {\n                // 是否对 ByteBuf 进行扩容或者缩容\n                record(totalBytesRead());\n        }\n}\n")])])]),t("p",[t("strong",[e._v("那么在什么情况下需要对 ByteBuf 扩容，每次扩容多少 ？ 什么情况下需要对 ByteBuf 进行缩容，每次缩容多少呢")]),e._v(" ？")]),e._v(" "),t("p",[e._v("这就用到了一个重要的容量索引结构 ——  SIZE_TABLE，它里边定义索引了 ByteBuf 的每一种容量大小。相当于是扩缩容的容量索引表。每次扩容多少，缩容多少全部记录在这个容量索引表中。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class AdaptiveRecvByteBufAllocator {\n    // 扩容步长\n    private static final int INDEX_INCREMENT = 4;\n    // 缩容步长\n    private static final int INDEX_DECREMENT = 1;\n\n    // ByteBuf分配容量表（扩缩容索引表）按照表中记录的容量大小进行扩缩容\n    private static final int[] SIZE_TABLE;\n}\n")])])]),t("p",[e._v("当索引容量"),t("code",[e._v("小于 512")]),e._v(" 时，"),t("code",[e._v("SIZE_TABLE")]),e._v(" 中定义的容量是从 "),t("code",[e._v("16")]),e._v(" 开始按照 "),t("code",[e._v("16")]),e._v(" 递增。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("p",[e._v("当索引容量"),t("code",[e._v("大于 512")]),e._v(" 时，SIZE_TABLE 中定义的容量是按前一个索引容量的 "),t("code",[e._v("2 倍")]),e._v("递增。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("p",[e._v("那么当前 ByteBuf 的初始容量为 2048 ， 它在 SIZE_TABLE 中的 index 为 33 。当一轮 read loop 读取完毕之后，如果发现 totalBytesRead 在"),t("code",[e._v("SIZE_TABLE[index - INDEX_DECREMENT]")]),e._v(" 与 "),t("code",[e._v("SIZE_TABLE[index]")]),e._v(" 之间的话，也就是如果本轮 read loop 结束之后总共读取的字节数在 [1024 , 2048] 之间。说明此时分配的 ByteBuf 容量正好，不需要进行缩容也不需要进行扩容。比如本次 totalBytesRead = 2000，正好处在 1024 与 2048 之间。说明 2048 的容量正好。")]),e._v(" "),t("p",[e._v("如果 totalBytesRead 小于等于 "),t("code",[e._v("SIZE_TABLE[index - INDEX_DECREMENT]")]),e._v("，也就是如果本轮 read loop 结束之后总共读取的字节数小于等于1024。表示本次读取到的字节数比当前 ByteBuf 容量的下一级容量还要小，说明当前 ByteBuf 的容量分配的有些大了，设置缩容标识"),t("code",[e._v("decreaseNow = true")]),e._v("。当下次 read loop 的时候如果继续满足缩容条件，那么就开始进行缩容。缩容后的容量为 SIZE_TABLE[index - INDEX_DECREMENT]，但不能小于SIZE_TABLE[minIndex]（16）。")]),e._v(" "),t("blockquote",[t("p",[e._v("注意，这里需要满足两次缩容条件才会进行缩容，且缩容步长为 1 (INDEX_DECREMENT)，缩容比较谨慎。")])]),e._v(" "),t("p",[e._v("如果 totalBytesRead  大于等于当前 ByteBuf 容量—— nextReceiveBufferSize 时，说明 ByteBuf 的容量有点小了，需要进行扩容。扩容后的容量为 "),t("code",[e._v("SIZE_TABLE[index + INDEX_INCREMENT]")]),e._v("，但不能超过 SIZE_TABLE[maxIndex]（65535）。")]),e._v(" "),t("blockquote",[t("p",[e._v("满足一次扩容条件就进行扩容，并且扩容步长为 4 (INDEX_INCREMENT)， 扩容比较奔放。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("        private void record(int actualReadBytes) {\n            if (actualReadBytes <= SIZE_TABLE[max(0, index - INDEX_DECREMENT)]) {\n                // 缩容条件触发两次之后就进行缩容\n                if (decreaseNow) {\n                    index = max(index - INDEX_DECREMENT, minIndex);\n                    nextReceiveBufferSize = SIZE_TABLE[index];\n                    decreaseNow = false;\n                } else {\n                    decreaseNow = true;\n                }\n            } else if (actualReadBytes >= nextReceiveBufferSize) {\n                // 扩容条件满足一次之后就进行扩容\n                index = min(index + INDEX_INCREMENT, maxIndex);\n                nextReceiveBufferSize = SIZE_TABLE[index];\n                decreaseNow = false;\n            }\n        }\n")])])]),t("h3",{attrs:{id:"_2-6-bytebuf-的引用计数设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-bytebuf-的引用计数设计"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.6 ByteBuf 的引用计数设计")])]),e._v(" "),t("p",[e._v("Netty 为 ByteBuf 引入了引用计数的机制，在 ByteBuf 的整个设计体系中，所有的 ByteBuf 都会继承一个抽象类 AbstractReferenceCountedByteBuf ， 它是对接口 ReferenceCounted 的实现。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public interface ReferenceCounted {\n     int refCnt();\n     ReferenceCounted retain();\n     ReferenceCounted retain(int increment);\n     boolean release();\n     boolean release(int decrement);\n}\n")])])]),t("p",[e._v("每个 ByteBuf 的内部都维护了一个叫做 refCnt 的引用计数，我们可以通过 "),t("code",[e._v("refCnt()")]),e._v(" 方法来获取 ByteBuf 当前的引用计数 refCnt。当 ByteBuf 在其他上下文中被引用的时候，我们需要通过 "),t("code",[e._v("retain()")]),e._v(" 方法将 ByteBuf 的引用计数加 1。另外我们也可以通过 "),t("code",[e._v("retain(int increment)")]),e._v(" 方法来指定 refCnt 增加的大小（increment）。")]),e._v(" "),t("p",[e._v("有对 ByteBuf 的引用那么就有对 ByteBuf 的释放，每当我们使用完 ByteBuf 的时候就需要手动调用 "),t("code",[e._v("release()")]),e._v(" 方法将 ByteBuf 的引用计数减 1 。当引用计数 refCnt 变成 0 的时候，Netty 就会通过 "),t("code",[e._v("deallocate")]),e._v(" 方法来释放 ByteBuf 所引用的内存资源。这时 "),t("code",[e._v("release()")]),e._v(" 方法会返回 true , 如果 refCnt 还不为 0 ，那么就返回 false 。同样我们也可以通过 "),t("code",[e._v("release(int decrement)")]),e._v(" 方法来指定 refCnt 减少多少（decrement）。")]),e._v(" "),t("h4",{attrs:{id:"_2-6-1-为什么要引入引用计数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-1-为什么要引入引用计数"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.6.1 为什么要引入引用计数")])]),e._v(" "),t("p",[e._v("”在其他上下文中引用 ByteBuf “ 是什么意思呢 ？ 比如我们在线程 1 中创建了一个  ByteBuf，然后将这个 ByteBuf 丢给线程 2 进行处理，线程 2 又可能丢给线程 3， 而每个线程都有自己的上下文处理逻辑，比如对 ByteBuf 的处理，释放等操作。这样就使得 ByteBuf 在事实上形成了在多个线程上下文中被共享的情况。")]),e._v(" "),t("p",[e._v("面对这种情况我们就很难在一个单独的线程上下文中判断一个 ByteBuf 该不该被释放，比如线程  1 准备释放 ByteBuf 了，但是它可能正在被其他线程使用。所以这也是 Netty 为 ByteBuf 引入引用计数的重要原因，每当引用一次 ByteBuf 的时候就需要通过 "),t("code",[e._v("retain()")]),e._v(" 方法将引用计数加 1， "),t("code",[e._v("release()")]),e._v(" 释放的时候将引用计数减 1 ，当引用计数为 0 了，说明已经没有其他上下文引用 ByteBuf 了，这时 Netty 就可以释放它了。")]),e._v(" "),t("p",[e._v("另外相比于 JDK DirectByteBuffer 需要依赖 GC 机制来释放其背后引用的 Native Memory , Netty 更倾向于手动及时释放 DirectByteBuf 。因为 JDK DirectByteBuffer 的释放需要等到 GC 发生，由于 DirectByteBuffer 的对象实例所占的 JVM 堆内存太小了，所以一时很难触发 GC , 这就导致被引用的 Native Memory 的释放有了一定的延迟，严重的情况会越积越多，导致 OOM 。而且也会导致进程中对 DirectByteBuffer 的申请操作有非常大的延迟。")]),e._v(" "),t("p",[e._v("而 Netty 为了避免这些情况的出现，选择在每次使用完毕之后手动释放 Native Memory ，但是不依赖 JVM 的话，总会有内存泄露的情况，比如在使用完了 ByteBuf 却忘记调用 "),t("code",[e._v("release()")]),e._v(" 方法来释放。")]),e._v(" "),t("p",[e._v("所以为了检测内存泄露的发生，这也是 Netty 为 ByteBuf 引入了引用计数的另一个原因，当 ByteBuf 不再被引用的时候，也就是没有任何强引用或者软引用的时候，如果此时发生 GC , 那么这个 ByteBuf 实例（位于 JVM 堆中）就需要被回收了，这时 Netty 就会检查这个 ByteBuf 的引用计数是否为 0 ， 如果不为 0 ，说明我们忘记调用 "),t("code",[e._v("release()")]),e._v(" 释放了，近而判断出这个 ByteBuf 发生了内存泄露。")]),e._v(" "),t("p",[e._v("在探测到内存泄露发生之后，后续 Netty 就会通过 "),t("code",[e._v("reportLeak()")]),e._v(" 将内存泄露的相关信息以 "),t("code",[e._v("error")]),e._v(" 的日志级别输出到日志中。")]),e._v(" "),t("p",[e._v("看到这里，大家可能不禁要问，不就是引入了一个小小的引用计数嘛，这有何难 ？ 值得这里大书特书吗 ？ 不就是在创建 ByteBuf 的时候将引用计数 refCnt 初始化为 1 ， 每次在其他上下文引用的时候将 refCnt 加 1， 每次释放的时候再将 refCnt 减 1 吗 ？减到 0 的时候就释放 Native Memory  ，太简单了吧~~")]),e._v(" "),t("p",[e._v("事实上 Netty 对引用计数的设计非常讲究，绝非如此简单，甚至有些复杂，其背后隐藏着大大的性能考究以及对复杂并发问题的全面考虑，在性能与线程安全问题之间的反复权衡。")]),e._v(" "),t("h4",{attrs:{id:"_2-6-2-引用计数的最初设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-2-引用计数的最初设计"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.6.2 引用计数的最初设计")])]),e._v(" "),t("p",[e._v("所以为了理清关于引用计数的整个设计脉络，我们需要将版本回退到最初的起点 —— 4.1.16.Final 版本，来看一下原始的设计。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {\n    // 原子更新 refCnt 的 Updater\n    private static final AtomicIntegerFieldUpdater<AbstractReferenceCountedByteBuf> refCntUpdater =\n            AtomicIntegerFieldUpdater.newUpdater(AbstractReferenceCountedByteBuf.class, "refCnt");\n    // 引用计数，初始化为 1\n    private volatile int refCnt;\n\n    protected AbstractReferenceCountedByteBuf(int maxCapacity) {\n        super(maxCapacity);\n        // 引用计数初始化为 1\n        refCntUpdater.set(this, 1);\n    }\n\n    // 引用计数增加 increment\n    private ByteBuf retain0(int increment) {\n        for (;;) {\n            int refCnt = this.refCnt;\n            // 每次 retain 的时候对引用计数加 1\n            final int nextCnt = refCnt + increment;\n\n            // Ensure we not resurrect (which means the refCnt was 0) and also that we encountered an overflow.\n            if (nextCnt <= increment) {\n                // 如果 refCnt 已经为 0 或者发生溢出，则抛异常\n                throw new IllegalReferenceCountException(refCnt, increment);\n            }\n            // CAS 更新 refCnt\n            if (refCntUpdater.compareAndSet(this, refCnt, nextCnt)) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    // 引用计数减少 decrement\n    private boolean release0(int decrement) {\n        for (;;) {\n            int refCnt = this.refCnt;\n            if (refCnt < decrement) {\n                // 引用的次数必须和释放的次数相等对应\n                throw new IllegalReferenceCountException(refCnt, -decrement);\n            }\n            // 每次 release 引用计数减 1 \n            // CAS 更新 refCnt\n            if (refCntUpdater.compareAndSet(this, refCnt, refCnt - decrement)) {\n                if (refCnt == decrement) {\n                    // 如果引用计数为 0 ，则释放 Native Memory，并返回 true\n                    deallocate();\n                    return true;\n                }\n                // 引用计数不为 0 ，返回 false\n                return false;\n            }\n        }\n    }\n}\n')])])]),t("p",[e._v("在 4.1.16.Final 之前的版本设计中，确实和我们当初想象的一样，非常简单，创建 ByteBuf 的时候将 refCnt 初始化为 1。 每次引用 retain 的时候将引用计数加 1 ，每次释放 release 的时候将引用计数减 1，在一个 for 循环中通过 CAS 替换。当引用计数为 0 的时候，通过 "),t("code",[e._v("deallocate()")]),e._v(" 释放 Native Memory。")]),e._v(" "),t("h4",{attrs:{id:"_2-6-3-引入指令级别上的优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-3-引入指令级别上的优化"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.6.3 引入指令级别上的优化")])]),e._v(" "),t("p",[e._v("4.1.16.Final 的设计简洁清晰，在我们看来完全没有任何问题，但 Netty 对性能的考究完全没有因此止步，由于在 x86 架构下 XADD 指令的性能要高于 CMPXCHG 指令， compareAndSet 方法底层是通过 CMPXCHG 指令实现的，而 getAndAdd 方法底层是 XADD 指令。")]),e._v(" "),t("p",[e._v("所以在对性能极致的追求下，Netty 在 4.1.17.Final 版本中用 getAndAdd 方法来替换 compareAndSet 方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {\n\n    private volatile int refCnt;\n\n    protected AbstractReferenceCountedByteBuf(int maxCapacity) {\n        super(maxCapacity);\n        // 引用计数在初始的时候还是为 1 \n        refCntUpdater.set(this, 1);\n    }\n\n    private ByteBuf retain0(final int increment) {\n        // 相比于 compareAndSet 的实现，这里将 for 循环去掉\n        // 并且每次是先对 refCnt 增加计数 increment\n        int oldRef = refCntUpdater.getAndAdd(this, increment);\n        // 增加完 refCnt 计数之后才去判断异常情况\n        if (oldRef <= 0 || oldRef + increment < oldRef) {\n            // Ensure we don't resurrect (which means the refCnt was 0) and also that we encountered an overflow.\n            // 如果原来的 refCnt 已经为 0 或者 refCnt 溢出，则对 refCnt 进行回退，并抛出异常\n            refCntUpdater.getAndAdd(this, -increment);\n            throw new IllegalReferenceCountException(oldRef, increment);\n        }\n        return this;\n    }\n\n    private boolean release0(int decrement) {\n        // 先对 refCnt 减少计数 decrement\n        int oldRef = refCntUpdater.getAndAdd(this, -decrement);\n        // 如果 refCnt 已经为 0 则进行 Native Memory 的释放\n        if (oldRef == decrement) {\n            deallocate();\n            return true;\n        } else if (oldRef < decrement || oldRef - decrement > oldRef) {\n            // 如果释放次数大于 retain 次数 或者 refCnt 出现下溢\n            // 则对 refCnt 进行回退，并抛出异常\n            refCntUpdater.getAndAdd(this, decrement);\n            throw new IllegalReferenceCountException(oldRef, decrement);\n        }\n        return false;\n    }\n}\n")])])]),t("p",[e._v("在 4.1.16.Final 版本的实现中，Netty 是在一个 for 循环中，先对 retain 和 release 的异常情况进行校验，之后再通过 CAS 更新 refCnt。否则直接抛出 IllegalReferenceCountException。采用的是一种悲观更新引用计数的策略。")]),e._v(" "),t("p",[e._v("而在 4.1.17.Final 版本的实现中 ， Netty 去掉了 for 循环，正好和 compareAndSet 的实现相反，而是先通过 getAndAdd 更新 refCnt，更新之后再来判断相关的异常情况，如果发现有异常，则进行回退，并抛出 IllegalReferenceCountException。采用的是一种乐观更新引用计数的策略。")]),e._v(" "),t("p",[e._v("比如在 retain 增加引用计数的时候，先对 refCnt 增加计数 increment，然后判断原来的引用计数 oldRef 是否已经为 0 或者 refCnt 是否发生溢出，如果是，则需要对 refCnt 的值进行回退，并抛异常。")]),e._v(" "),t("p",[e._v("在 release 减少引用计数的时候，先对 refCnt 减少计数 decrement，然后判断 release 的次数是否大于 retain 的次数防止 over-release ，以及 refCnt 是否发生下溢，如果是，则对  refCnt 的值进行回退，并抛异常。")]),e._v(" "),t("h4",{attrs:{id:"_2-6-4-并发安全问题的引入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-4-并发安全问题的引入"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.6.4 并发安全问题的引入")])]),e._v(" "),t("p",[e._v("在 4.1.17.Final 版本的设计中，我们对引用计数的 retain 以及 release 操作都要比 4.1.16.Final 版本的性能要高，虽然现在性能是高了，但是同时引入了新的并发问题。")]),e._v(" "),t("p",[e._v("让我们先假设一个这样的场景，现在有一个 ByteBuf，它当前的 refCnt = 1 ，线程 1 对这个 ByteBuf 执行 "),t("code",[e._v("release()")]),e._v(" 操作。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("p",[e._v("在 4.1.17.Final 的实现中，Netty 会首先通过 getAndAdd 将 refCnt 更新为 0 ，然后接着调用 "),t("code",[e._v("deallocate()")]),e._v(" 方法释放 Native Memory ，很简单也很清晰是吧，让我们再加点并发复杂度上去。")]),e._v(" "),t("p",[e._v("现在我们在上图步骤一与步骤二之间插入一个线程 2 ， 线程 2 对这个 ByteBuf 并发执行 "),t("code",[e._v("retain()")]),e._v(" 方法。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("p",[e._v("在 4.1.17.Final 的实现中，线程 2 首先通过 getAndAdd 将 refCnt 从 0 更新为 1，紧接着线程 2 就会发现 refCnt 原来的值 oldRef 是等于 0 的，也就是说线程 2 在调用  "),t("code",[e._v("retain()")]),e._v(" 的时候，ByteBuf 的引用计数已经为 0 了，并且线程 1 已经开始准备释放 Native Memory 了。")]),e._v(" "),t("p",[e._v("所以线程 2 需要再次调用 getAndAdd 方法将 refCnt 的值进行回退，从 1 再次回退到 0 ，最后抛出 IllegalReferenceCountException。这样的结果显然是正确的，也是符合语义的。毕竟不能对一个引用计数为 0  的 ByteBuf 调用 "),t("code",[e._v("retain()")]),e._v(" 。")]),e._v(" "),t("p",[e._v("现在看来一切风平浪静，都是按照我们的设想有条不紊的进行，我们不妨再加点并发复杂度上去。在上图步骤 1.1 与步骤 1.2 之间在插入一个线程 3 ， 线程 3 对这个 ByteBuf 再次并发执行 "),t("code",[e._v("retain()")]),e._v(" 方法。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("p",[e._v("由于引用计数的更新（步骤 1.1）与引用计数的回退（步骤 1.2）这两个操作并不是一个原子操作，如果在这两个操作之间不巧插入了一个线程 3 ，线程 3 在并发执行 "),t("code",[e._v("retain()")]),e._v(" 方法的时候，首先会通过 getAndAdd 将引用计数 refCnt 从 1 增加到 2 。")]),e._v(" "),t("blockquote",[t("p",[t("strong",[e._v("注意，此时线程 2 还没来得及回退 refCnt ， 所以线程 3 此时看到的 refCnt 是 1 而不是 0")]),e._v(" 。")])]),e._v(" "),t("p",[e._v("由于此时线程 3 看到的 oldRef 是 1 ，所以线程 3 成功调用 "),t("code",[e._v("retain()")]),e._v(" 方法将 ByteBuf 的引用计数增加到了 2 ，并且不会回退也不会抛出异常。在线程 3 看来此时的 ByteBuf 完完全全是一个正常可以被使用的 ByteBuf。")]),e._v(" "),t("p",[e._v("紧接着线程 1 开始执行步骤 2 —— "),t("code",[e._v("deallocate()")]),e._v(" 方法释放 Native Memory，此后线程 3 在访问这个 ByteBuf 的时候就有问题了，因为  Native Memory 已经被线程1 释放了。")]),e._v(" "),t("h4",{attrs:{id:"_2-6-5-在性能与并发安全之间的权衡"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-5-在性能与并发安全之间的权衡"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.6.5 在性能与并发安全之间的权衡")])]),e._v(" "),t("p",[e._v("接下来 Netty 就需要在性能与并发安全之间进行权衡了，现在有两个选择，第一个选择是直接回滚到 4.1.16.Final 版本，放弃 XADD 指令带来的性能提升，之前的设计中采用的 CMPXCHG 指令虽然性能相对差一些，但是不会出现上述的并发安全问题。")]),e._v(" "),t("p",[e._v("因为 Netty 是在一个 for 循环中采用悲观的策略来更新引用计数，先是判断异常情况，然后在通过 CAS 来更新 refCnt。即使多个线程看到了 refCnt 的中间状态也没关系，因为接下来进行的 CAS 也会跟着失败。")]),e._v(" "),t("p",[e._v("比如上边例子中的线程 1 对 ByteBuf 进行 release 的时候，在线程 1 执行 CAS 将 refCnt 替换为 0 之前的这个间隙中，refCnt 是 1 ，如果在这个间隙中，线程 2 并发执行 retain 方法，此时线程 2 看到的 refCnt 确实为 1 ，它是一个中间状态，线程 2 执行 CAS 将 refCnt 替换为 2。")]),e._v(" "),t("p",[e._v("此时线程 1 执行 CAS 就会失败，但会在下一轮 for 循环中将 refCnt 替换为 1，这是完全符合引用计数语义的。")]),e._v(" "),t("p",[e._v("另外一种情况是线程 1 已经执行完 CAS 将 refCnt 替换为 0 ，这时候线程 2 去 retain  ，由于 4.1.16.Final 版本中的设计是先检查异常后 CAS 替换，所以线程 2 首先会在 retain 方法中检查到 ByteBuf 的 refCnt 已经为 0 ，直接抛出 IllegalReferenceCountException，并不会执行 CAS 。这同样符合引用计数的语义，毕竟不能对一个引用计数已经为 0 的 ByteBuf 执行任何访问操作。")]),e._v(" "),t("p",[e._v("第二个选择是既要保留 XADD 指令带来的性能提升，也要解决 4.1.17.Final 版本中引入的并发安全问题。毫无疑问，Netty 最终选择的是这种方案。")]),e._v(" "),t("p",[e._v("在介绍 Netty 的精彩设计之前，我想我们还是应该在回顾下这个并发安全问题出现的根本原因是什么 ？")]),e._v(" "),t("p",[e._v("在 4.1.17.Final 版本的设计中，Netty 首先是通过 getAndAdd 方法先对 refCnt 的值进行更新，如果出现异常情况，在进行回滚。而更新，回滚的这两个操作并不是原子的，之间的中间状态会被其他线程看到。")]),e._v(" "),t("p",[e._v("比如，线程 2 看到了线程 1 的中间状态（refCnt = 0），于是将引用计数加到 1 , 在线程 2 进行回滚之前，这期间的中间状态（refCnt = 1，oldRef = 0）又被线程 3 看到了，于是线程 3 将引用计数增加到了 2 （refCnt = 2，oldRef = 1）。 此时线程 3 觉得这是一种正常的状态，但在线程 1 看来 refCnt 的值已经是 0 了，后续线程 1 就会释放 Native Memory ，这就出问题了。")]),e._v(" "),t("p",[e._v("问题的根本原因其实是这里的 refCnt 不同的值均代表不同的语义，比如对于线程 1 来说，通过 release 将 refCnt 减到了 0 ，这里的语义是 ByteBuf 已经不在被引用了，可以释放 Native Memory 。")]),e._v(" "),t("p",[e._v("随后线程 2 通过 retain 将 refCnt 加到了 1 ，这就把 ByteBuf 语义改变了，表示该 ByteBuf 在线程 2 中被引用了一次。最后线程 3 又通过 retain 将 refCnt 加到了 2 ，再一次改变了 ByteBuf 的语义。")]),e._v(" "),t("p",[e._v("只要用到 XADD 指令来实现引用计数的更新，那么就不可避免的出现上述并发更新 refCnt 的情况，关键是 refCnt 的值每一次被其他线程并发修改之后，ByteBuf 的语义就变了。这才是 4.1.17.Final 版本中的关键问题所在。")]),e._v(" "),t("p",[e._v("如果 Netty 想在同时享受 XADD 指令带来的性能提升之外，又要解决上述提到的并发安全问题，就要重新对引用计数进行设计。首先我们的要求是继续采用 XADD 指令来实现引用计数的更新，但这就会带来多线程并发修改所引起的 ByteBuf 语义改变。")]),e._v(" "),t("p",[e._v("既然多线程并发修改无法避免，那么我们能不能重新设计一下引用计数，让  ByteBuf 语义无论多线程怎么修改，它的语义始终保持不变。也就是说只要线程 1 将 refCnt 减到了 0 ，那么无论线程 2 和线程 3 怎么并发修改 refCnt，怎么增加 refCnt 的值，refCnt 等于 0 的这个语义始终保持不变呢 ？")]),e._v(" "),t("h4",{attrs:{id:"_2-6-6-奇偶设计的引入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-6-奇偶设计的引入"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.6.6 奇偶设计的引入")])]),e._v(" "),t("p",[e._v("这里 Netty 有一个极奇巧妙精彩的设计，引用计数的设计不再是逻辑意义上的 "),t("code",[e._v("0 , 1 , 2 , 3 .....")]),e._v("，而是分为了两大类，要么是偶数，要么是奇数。")]),e._v(" "),t("ul",[t("li",[e._v("偶数代表的语义是 ByteBuf 的 refCnt 不为 0 ，也就是说只要一个 ByteBuf 还在被引用，那么它的 refCnt 就是一个偶数，具体被引用多少次，可以通过 "),t("code",[e._v("refCnt >>> 1")]),e._v(" 来获取。")]),e._v(" "),t("li",[e._v("奇数代表的语义是 ByteBuf 的 refCnt 等于 0 ，只要一个 ByteBuf 已经没有任何地方引用它了，那么它的 refCnt 就是一个奇数，其背后引用的 Native Memory 随后就会被释放。")])]),e._v(" "),t("p",[e._v("ByteBuf 在初始化的时候，refCnt 不在是 1 而是被初始化为 2 （偶数），每次 retain 的时候不在是对 refCnt 加 1 而是加 2 （偶数步长），每次 release 的时候不再是对  refCnt 减 1 而是减 2 （同样是偶数步长）。这样一来，只要一个 ByteBuf 的引用计数为偶数，那么多线程无论怎么并发调用 retain 方法，引用计数还是一个偶数，语义仍然保持不变。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("   public final int initialValue() {\n        return 2;\n    }\n")])])]),t("p",[e._v("当一个 ByteBuf 被 release 到没有任何引用计数的时候，Netty 不在将 refCnt 设置为 0 而是设置为 1 （奇数），对于一个值为奇数的 refCnt，无论多线程怎么并发调用 retain 方法和 release 方法，引用计数还是一个奇数，ByteBuf 引用计数为 0 的这层语义一直会保持不变。")]),e._v(" "),t("p",[e._v("我们还是以上图中所展示的并发安全问题为例，在新的引用计数设计方案中，首先线程 1 对 ByteBuf 执行 release 方法，Netty 会将 refCnt 设置为 1 （奇数）。")]),e._v(" "),t("p",[e._v("线程 2 并发调用 retain 方法，通过 getAndAdd 将 refCnt 从 1 加到了 3 ，refCnt 仍然是一个奇数，按照奇数所表示的语义 —— ByteBuf 引用计数已经是 0  了，那么线程 2 就会在 retain 方法中抛出 IllegalReferenceCountException。")]),e._v(" "),t("p",[e._v("线程 3 并发调用 retain 方法，通过 getAndAdd 将 refCnt 从 3 加到了 5，看到了没 ，在新方案的设计中，无论多线程怎么并发执行 retain 方法，refCnt 的值一直都只会是一个奇数，随后线程 3 在 retain 方法中抛出 IllegalReferenceCountException。这完全符合引用计数的并发语义。")]),e._v(" "),t("p",[e._v("这个新的引用计数设计方案是在 4.1.32.Final 版本引入进来的，仅仅通过一个奇偶设计，就非常巧妙的解决了 4.1.17.Final 版本中存在的并发安全问题。现在新方案的核心设计要素我们已经清楚了，那么接下来笔者将以 4.1.56.Final 版本来为大家继续介绍下新方案的实现细节。")]),e._v(" "),t("p",[e._v("Netty 中的 ByteBuf 全部继承于 AbstractReferenceCountedByteBuf，在这个类中实现了所有对 ByteBuf 引用计数的操作，对于 ReferenceCounted 接口的实现就在这里。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public abstract class AbstractReferenceCountedByteBuf extends AbstractByteBuf {\n    // 获取 refCnt 字段在 ByteBuf 对象内存中的偏移\n    // 后续通过 Unsafe 对 refCnt 进行操作\n    private static final long REFCNT_FIELD_OFFSET =\n            ReferenceCountUpdater.getUnsafeOffset(AbstractReferenceCountedByteBuf.class, "refCnt");\n\n    // 获取 refCnt 字段 的 AtomicFieldUpdater\n    // 后续通过 AtomicFieldUpdater 来操作 refCnt 字段\n    private static final AtomicIntegerFieldUpdater<AbstractReferenceCountedByteBuf> AIF_UPDATER =\n            AtomicIntegerFieldUpdater.newUpdater(AbstractReferenceCountedByteBuf.class, "refCnt");\n\n    // 创建 ReferenceCountUpdater，对于引用计数的所有操作最终都会代理到这个类中\n    private static final ReferenceCountUpdater<AbstractReferenceCountedByteBuf> updater =\n            new ReferenceCountUpdater<AbstractReferenceCountedByteBuf>() {\n        @Override\n        protected AtomicIntegerFieldUpdater<AbstractReferenceCountedByteBuf> updater() {\n            // 通过 AtomicIntegerFieldUpdater 操作 refCnt 字段\n            return AIF_UPDATER;\n        }\n        @Override\n        protected long unsafeOffset() {\n            // 通过 Unsafe 操作 refCnt 字段\n            return REFCNT_FIELD_OFFSET;\n        }\n    };\n    // ByteBuf 中的引用计数，初始为 2 （偶数）\n    private volatile int refCnt = updater.initialValue();\n}\n')])])]),t("p",[e._v("其中定义了一个 refCnt 字段用于记录 ByteBuf 被引用的次数，由于采用了奇偶设计，在创建 ByteBuf 的时候，Netty 会将 refCnt 初始化为 2 （偶数），它的逻辑语义是该 ByteBuf 被引用一次。后续对 ByteBuf 执行 retain 就会对 refCnt 进行加 2 ，执行 release 就会对 refCnt 进行减 2 ，对于引用计数的单次操作都是以 2 为步长进行。")]),e._v(" "),t("p",[e._v("由于在 Netty 中除了 AbstractReferenceCountedByteBuf 这个专门用于实现 ByteBuf 的引用计数功能之外，还有一个更加通用的引用计数抽象类 AbstractReferenceCounted，它用于实现所有系统资源类的引用计数功能（ByteBuf 只是其中的一种内存资源）。")]),e._v(" "),t("p",[e._v("由于都是对引用计数的实现，所以在之前的版本中，这两个类中包含了很多重复的引用计数相关操作逻辑，所以 Netty 在 4.1.35.Final  版本中专门引入了一个 ReferenceCountUpdater 类，将所有引用计数的相关实现聚合在这里。")]),e._v(" "),t("p",[e._v("ReferenceCountUpdater 对于引用计数 refCnt 的操作有两种方式，一种是通过 AtomicFieldUpdater 来对 refCnt 进行操作，我们可以通过 "),t("code",[e._v("updater()")]),e._v(" 获取到 refCnt 字段对应的 AtomicFieldUpdater。")]),e._v(" "),t("p",[e._v("另一种则是通过 Unsafe 来对 refCnt 进行操作，我们可以通过 "),t("code",[e._v("unsafeOffset()")]),e._v(" 来获取到 refCnt 字段在 ByteBuf 实例对象内存中的偏移。")]),e._v(" "),t("p",[e._v("按理来说，我们采用一种方式就可以对 refCnt 进行访问或者更新了，那为什么 Netty 提供了两种方式呢 ？会显得有点多余吗 ？这个点大家可以先思考下为什么 ，后续在我们剖析到源码细节的时候笔者在为大家解答。")]),e._v(" "),t("p",[e._v("好了，下面我们正式开始介绍新版引用计数设计方案的具体实现细节，第一个问题，在新的设计方案中，我们如何获取 ByteBuf 的逻辑引用计数 ？")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public abstract class ReferenceCountUpdater<T extends ReferenceCounted> {\n    public final int initialValue() {\n        // ByteBuf 引用计数初始化为 2\n        return 2;\n    }\n\n    public final int refCnt(T instance) {\n        // 通过 updater 获取 refCnt\n        // 根据 refCnt 在  realRefCnt 中获取真实的引用计数\n        return realRefCnt(updater().get(instance));\n    }\n    // 获取 ByteBuf 的逻辑引用计数\n    private static int realRefCnt(int rawCnt) {\n        // 奇偶判断\n        return rawCnt != 2 && rawCnt != 4 && (rawCnt & 1) != 0 ? 0 : rawCnt >>> 1;\n    }\n}\n")])])]),t("p",[e._v("由于采用了奇偶引用计数的设计，所以我们在获取逻辑引用计数的时候需要判断当前 rawCnt（refCnt）是奇数还是偶数，它们分别代表了不同的语义。")]),e._v(" "),t("ul",[t("li",[e._v("如果 rawCnt 是奇数，则表示当前 ByteBuf 已经没有任何地方引用了，逻辑引用计数返回 0.")]),e._v(" "),t("li",[e._v("如果 rawCnt 是偶数，则表示当前 ByteBuf 还有地方在引用，逻辑引用计数则为 "),t("code",[e._v("rawCnt >>> 1")]),e._v("。")])]),e._v(" "),t("p",[e._v("realRefCnt 函数其实就是简单的一个奇偶判断逻辑，但在它的实现中却体现出了 Netty 对性能的极致追求。比如，我们判断一个数是奇数还是偶数其实很简单，直接通过  "),t("code",[e._v("rawCnt & 1")]),e._v(" 就可以判断，如果返回 0 表示 rawCnt 是一个偶数，如果返回 1 表示 rawCnt 是一个奇数。")]),e._v(" "),t("p",[e._v("但是我们看到 Netty 在奇偶判断条件的前面又加上了 "),t("code",[e._v("rawCnt != 2 && rawCnt != 4")]),e._v("语句，这是干嘛的呢 ？")]),e._v(" "),t("p",[e._v("其实 Netty 这里是为了尽量用性能更高的 "),t("code",[e._v("==")]),e._v(" 运算来代替 "),t("code",[e._v("&")]),e._v(" 运算，但又不可能用 "),t("code",[e._v("==")]),e._v(" 运算来枚举出所有的偶数值（也没这必要），所以只用 "),t("code",[e._v("==")]),e._v(" 运算来判断在实际场景中经常出现的引用计数，一般经常出现的引用计数值为 2 或者 4 ， 也就是说 ByteBuf 在大部分场景下只会被引用 1 次或者 2 次，对于这种高频出现的场景，Netty 用 "),t("code",[e._v("==")]),e._v(" 运算来针对性优化，低频出现的场景就回退到 "),t("code",[e._v("&")]),e._v(" 运算。")]),e._v(" "),t("blockquote",[t("p",[e._v("大部分性能优化的套路都是相同的，我们通常不能一上来就奢求一个大而全的针对全局的优化方案，这是不可能的，也是十分低效的。往往最有效的，可以立竿见影的优化方案都是针对局部热点进行专门优化。")])]),e._v(" "),t("p",[e._v("对引用计数的设置也是一样，都需要考虑奇偶的转换，我们在 "),t("code",[e._v("setRefCnt")]),e._v(" 方法中指定的参数 refCnt 表示逻辑上的引用计数 —— "),t("code",[e._v("0, 1 , 2 , 3 ....")]),e._v("，但要设置到 ByteBuf 时，就需要对逻辑引用计数在乘以 2 ，让它始终是一个偶数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    public final void setRefCnt(T instance, int refCnt) {\n        updater().set(instance, refCnt > 0 ? refCnt << 1 : 1); // overflow OK here\n    }\n")])])]),t("p",[e._v("有了这些基础之后，我们下面就来看一下在新版本的 retain 方法设计中，Netty 是如何解决 4.1.17.Final 版本存在的并发安全问题。首先 Netty 对引用计数的奇偶设计对于用户来说是透明的。引用计数对于用户来说仍然是普通的自然数 —— "),t("code",[e._v("0, 1 , 2 , 3 ....")]),e._v(" 。")]),e._v(" "),t("p",[e._v("所以每当用户调用 retain 方法试图增加 ByteBuf 的引用计数时，通常是指定逻辑增加步长 —— increment（用户视角），而在具体的实现角度，Netty 会增加两倍的 increment （rawIncrement）到 refCnt 字段中。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    public final T retain(T instance) {\n        // 引用计数逻辑上是加 1 ，但实际上是加 2 （实现角度）\n        return retain0(instance, 1, 2);\n    }\n\n    public final T retain(T instance, int increment) {\n        // all changes to the raw count are 2x the "real" change - overflow is OK\n        // rawIncrement 始终是逻辑计数 increment 的两倍\n        int rawIncrement = checkPositive(increment, "increment") << 1;\n        // 将 rawIncrement 设置到 ByteBuf 的 refCnt 字段中\n        return retain0(instance, increment, rawIncrement);\n    }\n\n    // rawIncrement = increment << 1\n    // increment 表示引用计数的逻辑增长步长\n    // rawIncrement 表示引用计数的实际增长步长\n    private T retain0(T instance, final int increment, final int rawIncrement) {\n        // 先通过 XADD 指令将  refCnt 的值加起来\n        int oldRef = updater().getAndAdd(instance, rawIncrement);\n        // 如果 oldRef 是一个奇数，也就是 ByteBuf 已经没有引用了，抛出异常\n        if (oldRef != 2 && oldRef != 4 && (oldRef & 1) != 0) {\n            // 如果 oldRef 已经是一个奇数了，无论多线程在这里怎么并发 retain ，都是一个奇数，这里都会抛出异常\n            throw new IllegalReferenceCountException(0, increment);\n        }\n        // don\'t pass 0! \n        // refCnt 不可能为 0 ，只能是 1\n        if ((oldRef <= 0 && oldRef + rawIncrement >= 0)\n                || (oldRef >= 0 && oldRef + rawIncrement < oldRef)) {\n            // 如果 refCnt 字段已经溢出，则进行回退，并抛异常\n            updater().getAndAdd(instance, -rawIncrement);\n            throw new IllegalReferenceCountException(realRefCnt(oldRef), increment);\n        }\n        return instance;\n    }\n')])])]),t("p",[e._v("首先新版本的 retain0 方法仍然保留了 4.1.17.Final 版本引入的  XADD 指令带来的性能优势，大致的处理逻辑也是类似的，一上来先通过 getAndAdd 方法将 refCnt 增加 rawIncrement，对于 "),t("code",[e._v("retain(T instance)")]),e._v(" 来说这里直接加 2 。")]),e._v(" "),t("p",[e._v("然后判断原来的引用计数 oldRef 是否是一个奇数，如果是一个奇数，那么就表示 ByteBuf 已经没有任何引用了，逻辑引用计数早已经为 0 了，那么就抛出 IllegalReferenceCountException。")]),e._v(" "),t("p",[e._v("在引用计数为奇数的情况下，无论多线程怎么对 refCnt 并发加 2 ，refCnt 始终是一个奇数，最终都会抛出异常。解决并发安全问题的要点就在这里，一定要保证 retain 方法的并发执行不能改变原来的语义。")]),e._v(" "),t("p",[e._v("最后会判断一下 refCnt 字段是否发生溢出，如果溢出，则进行回退，并抛出异常。下面我们仍然以之前的并发场景为例，用一个具体的例子，来回味一下奇偶设计的精妙之处。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("p",[e._v("现在线程 1 对一个 refCnt 为 2 的 ByteBuf 执行 release 方法，这时 ByteBuf 的逻辑引用计数就为 0 了，对于一个没有任何引用的 ByteBuf 来说，新版的设计中它的 refCnt 只能是一个奇数，不能为 0 ，所以这里 Netty 会将 refCnt 设置为 1 。然后在步骤 2 中调用 deallocate 方法释放 Native Memory。")]),e._v(" "),t("p",[e._v("线程 2 在步骤 1 和步骤 2 之间插入进来对  ByteBuf 并发执行 retain 方法，这时线程 2 看到的 refCnt 是 1，然后通过 getAndAdd 将 refCnt 加到了 3 ，仍然是一个奇数，随后抛出 IllegalReferenceCountException 异常。")]),e._v(" "),t("p",[e._v("线程 3 在步骤 1.1 和步骤 1.2 之间插入进来再次对 ByteBuf 并发执行 retain 方法，这时线程 3 看到的 refCnt 是 3，然后通过 getAndAdd 将 refCnt 加到了 5 ，还是一个奇数，随后抛出 IllegalReferenceCountException 异常。")]),e._v(" "),t("p",[e._v("这样一来就保证了引用计数的并发语义 —— 只要一个 ByteBuf 没有任何引用的时候（refCnt = 1），其他线程无论怎么并发执行  retain 方法都会得到一个异常。")]),e._v(" "),t("p",[e._v("但是引用计数并发语义的保证不能单单只靠 retain 方法，它还需要与 release 方法相互配合协作才可以，所以为了并发语义的保证 ， release 方法的设计就不能使用性能更高的 XADD 指令，而是要回退到  CMPXCHG 指令来实现。")]),e._v(" "),t("p",[e._v("为什么这么说呢 ？因为新版引用计数的设计采用的是奇偶实现，refCnt 为偶数表示 ByteBuf 还有引用，refCnt 为奇数表示 ByteBuf 已经没有任何引用了，可以安全释放 Native Memory 。对于一个 refCnt 已经为奇数的 ByteBuf 来说，无论多线程怎么并发执行 retain 方法，得到的 refCnt 仍然是一个奇数，最终都会抛出 IllegalReferenceCountException，这就是引用计数的并发语义 。")]),e._v(" "),t("p",[e._v("为了保证这一点，就需要在每次调用 retain ，release 方法的时候，以偶数步长来更新 refCnt，比如每一次调用 retain 方法就对 refCnt 加 2 ，每一次调用 release 方法就对 refCnt 减 2 。")]),e._v(" "),t("p",[e._v("但总有一个时刻，refCnt 会被减到 0 的对吧，在新版的奇偶设计中，refCnt 是不允许为 0 的，因为一旦 refCnt 被减到了 0 ，多线程并发执行 retain 之后，就会将 refCnt 再次加成了偶数，这又会出现并发问题。")]),e._v(" "),t("p",[e._v("而每一次调用 release 方法是对 refCnt 减 2 ，如果我们采用 XADD 指令实现 release 的话，回想一下 4.1.17.Final 版本中的设计，它首先进来是通过 getAndAdd 方法对 refCnt 减 2 ，这样一来，refCnt 就变成 0 了，就有并发安全问题了。所以我们需要通过 CMPXCHG 指令将 refCnt 更新为 1。")]),e._v(" "),t("p",[e._v("这里有的同学可能要问了，那可不可以先进行一下 if 判断，如果 refCnt 减 2 之后变为 0 了，我们在通过 getAndAdd 方法将 refCnt 更新为 1 （减一个奇数），这样一来不也可以利用上 XADD 指令的性能优势吗 ？")]),e._v(" "),t("p",[e._v("答案是不行的，因为 if 判断与 getAndAdd 更新这两个操作之间仍然不是原子的，多线程可以在这个间隙仍然有并发执行 retain 方法的可能，如下图所示：")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("p",[e._v("在线程 1 执行 if 判断和 getAndAdd 更新这两个操作之间，线程 2 看到的 refCnt 其实 2 ，然后线程 2 会将 refCnt 加到 4 ，线程 3 紧接着会将 refCnt 增加到 6 ，在线程 2 和线程 3 看来这个 ByteBuf 完全是正常的，但是线程 1 马上就会释放 Native Memory 了。")]),e._v(" "),t("p",[e._v("而且采用这种设计的话，一会通过 getAndAdd 对 refCnt 减一个奇数，一会通过 getAndAdd 对 refCnt 加一个偶数，这样就把原本的奇偶设计搞乱掉了。")]),e._v(" "),t("p",[e._v("所以我们的设计目标是一定要保证在 ByteBuf 没有任何引用计数的时候，release 方法需要原子性的将 refCnt 更新为 1 。 因此必须采用 CMPXCHG 指令来实现而不能使用 XADD 指令。")]),e._v(" "),t("p",[t("strong",[e._v("再者说， CMPXCHG 指令是可以原子性的判断当前是否有并发情况的，如果有并发情况出现，CAS  就会失败，我们可以继续重试。但 XADD 指令却无法原子性的判断是否有并发情况，因为它每次都是先更新，后判断并发，这就不是原子的了。这一点，在下面的源码实现中会体现的特别明显")]),e._v("。")]),e._v(" "),t("h4",{attrs:{id:"_2-6-7-尽量避免内存屏障的开销"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-7-尽量避免内存屏障的开销"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.6.7 尽量避免内存屏障的开销")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    public final boolean release(T instance) {\n        // 第一次尝试采用 unSafe nonVolatile 的方式读取 refCnf 的值\n        int rawCnt = nonVolatileRawCnt(instance);\n        // 如果逻辑引用计数被减到 0 了，那么就通过 tryFinalRelease0 使用 CAS 将 refCnf 更新为 1\n        // CAS 失败的话，则通过 retryRelease0 进行重试\n        // 如果逻辑引用计数不为 0 ，则通过 nonFinalRelease0 将 refCnf 减 2\n        return rawCnt == 2 ? tryFinalRelease0(instance, 2) || retryRelease0(instance, 1)\n                : nonFinalRelease0(instance, 1, rawCnt, toLiveRealRefCnt(rawCnt, 1));\n    }\n")])])]),t("p",[e._v("这里有一个小的细节再次体现出 Netty 对于性能的极致追求，refCnt 字段在 ByteBuf 中被 Netty 申明为一个 volatile 字段。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("private volatile int refCnt = updater.initialValue();\n")])])]),t("p",[e._v("我们对 refCnt 的普通读写都是要走内存屏障的，但 Netty 在 release 方法中首次读取 refCnt 的值是采用 nonVolatile 的方式，不走内存屏障，直接读取 cache line，避免了屏障开销。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    private int nonVolatileRawCnt(T instance) {\n        // 获取 REFCNT_FIELD_OFFSET\n        final long offset = unsafeOffset();\n        // 通过 UnSafe 的方式来访问 refCnt ， 避免内存屏障的开销\n        return offset != -1 ? PlatformDependent.getInt(instance, offset) : updater().get(instance);\n    }\n")])])]),t("p",[e._v("那有的同学可能要问了，如果读取 refCnt 的时候不走内存屏障的话，读取到的 refCnt 不就可能是一个错误的值吗 ？")]),e._v(" "),t("p",[e._v("事实上确实是这样的，但 Netty 不 care , 读到一个错误的值也无所谓，因为这里的引用计数采用了奇偶设计，我们在第一次读取引用计数的时候并不需要读取到一个精确的值，既然这样我们可以直接通过 UnSafe 来读取，还能剩下一笔内存屏障的开销。")]),e._v(" "),t("p",[e._v("那为什么不需要一个精确的值呢 ？因为如果原来的 refCnt 是一个奇数，那无论多线程怎么并发 retain ，最终得到的还是一个奇数，我们这里只需要知道 refCnt 是一个奇数就可以直接抛 IllegalReferenceCountException 了。具体读到的是一个 3 还是一个 5 其实都无所谓。")]),e._v(" "),t("p",[e._v("那如果原来的 refCnt 是一个偶数呢 ？其实也无所谓，我们可能读到一个正确的值也可能读到一个错误的值，如果恰好读到一个正确的值，那更好。如果读取到一个错误的值，也无所谓，因为我们后面是用 CAS 进行更新，这样的话 CAS 就会更新失败，我们只需要在一下轮 for 循环中更新正确就可以了。")]),e._v(" "),t("p",[e._v("如果读取到的 refCnt 恰好是 2 ，那就意味着本次 release 之后，ByteBuf 的逻辑引用计数就为 0 了，Netty 会通过 CAS 将 refCnt 更新为 1 。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("   private boolean tryFinalRelease0(T instance, int expectRawCnt) {\n        return updater().compareAndSet(instance, expectRawCnt, 1); // any odd number will work\n    }\n")])])]),t("p",[e._v("如果 CAS 更新失败，则表示此时有多线程可能并发对 ByteBuf 执行 retain 方法，逻辑引用计数此时可能就不为 0 了，针对这种并发情况，Netty 会在 retryRelease0 方法中进行重试，将 refCnt 减 2 。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    private boolean retryRelease0(T instance, int decrement) {\n        for (;;) {\n            // 采用 Volatile 的方式读取 refCnt\n            int rawCnt = updater().get(instance), \n            // 获取逻辑引用计数，如果 refCnt 已经变为奇数，则抛出异常\n            realCnt = toLiveRealRefCnt(rawCnt, decrement);\n            // 如果执行完本次 release , 逻辑引用计数为 0\n            if (decrement == realCnt) {\n                // CAS 将 refCnt 更新为 1\n                if (tryFinalRelease0(instance, rawCnt)) {\n                    return true;\n                }\n            } else if (decrement < realCnt) {\n                // 原来的逻辑引用计数 realCnt 大于 1（decrement）\n                // 则通过 CAS 将 refCnt 减 2\n                if (updater().compareAndSet(instance, rawCnt, rawCnt - (decrement << 1))) {\n                    return false;\n                }\n            } else {\n                // refCnt 字段如果发生溢出，则抛出异常\n                throw new IllegalReferenceCountException(realCnt, -decrement);\n            }\n            // CAS 失败之后调用 yield\n            // 减少无畏的竞争，否则所有线程在高并发情况下都在这里 CAS 失败\n            Thread.yield(); \n        }\n    }\n")])])]),t("p",[e._v("从 retryRelease0 方法的实现中我们可以看出，CAS 是可以原子性的探测到是否有并发情况出现的，如果有并发情况，这里的所有 CAS 都会失败，随后会在下一轮 for 循环中将正确的值更新到 refCnt 中。这一点 ，XADD 指令是做不到的。")]),e._v(" "),t("p",[e._v("如果在进入 release 方法后，第一次读取的 refCnt 不是 2 ，那么就不能走上面的 tryFinalRelease0 逻辑，而是在 nonFinalRelease0 中通过 CAS 将 refCnt 的值减 2 。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("   private boolean nonFinalRelease0(T instance, int decrement, int rawCnt, int realCnt) {\n        if (decrement < realCnt\n                && updater().compareAndSet(instance, rawCnt, rawCnt - (decrement << 1))) {\n            // ByteBuf 的 rawCnt 减少 2 * decrement\n            return false;\n        }\n        // CAS  失败则一直重试，如果引用计数已经为 0 ，那么抛出异常，不能再次 release\n        return retryRelease0(instance, decrement);\n    }\n")])])]),t("p",[e._v("到这里，Netty 对引用计数的精彩设计，笔者就为大家完整的剖析完了，一共有四处非常精彩的优化设计，我们总结如下：")]),e._v(" "),t("ol",[t("li",[e._v("使用性能更优的  XADD 指令来替换 CMPXCHG 指令。")]),e._v(" "),t("li",[e._v("引用计数采用了奇偶设计，保证了并发语义。")]),e._v(" "),t("li",[e._v("采用性能更优的 "),t("code",[e._v("==")]),e._v(" 运算来替换 "),t("code",[e._v("&")]),e._v(" 运算。")]),e._v(" "),t("li",[e._v("能不走内存屏障就尽量不走内存屏障。")])]),e._v(" "),t("h3",{attrs:{id:"_2-7-bytebuf-的视图设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-bytebuf-的视图设计"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.7 ByteBuf 的视图设计")])]),e._v(" "),t("p",[e._v("和 JDK 的设计一样，Netty 中的 ByteBuf 也可以通过 "),t("code",[e._v("slice()")]),e._v(" 方法以及 "),t("code",[e._v("duplicate()")]),e._v(" 方法创建一个视图 ByteBuf 出来，原生 ByteBuf 和它的视图 ByteBuf 底层都是共用同一片内存区域，也就是说在视图 ByteBuf 上做的任何改动都会反应到原生 ByteBuf 上。同理，在原生 ByteBuf 上做的任何改动也会反应到它的视图 ByteBuf 上。我们可以将视图 ByteBuf 看做是原生 ByteBuf 的一份浅拷贝。")]),e._v(" "),t("p",[e._v("原生 ByteBuf 和它的视图 ByteBuf 不同的是，它们都有各自独立的 readerIndex，writerIndex，capacity，maxCapacity。")]),e._v(" "),t("p",[t("code",[e._v("slice()")]),e._v(" 方法是在原生 ByteBuf 的 "),t("code",[e._v("[readerIndex , writerIndex)")]),e._v(" 这段内存区域内创建一个视图 ByteBuf。也就是原生 ByteBuf 和视图 ByteBuf 共用  "),t("code",[e._v("[readerIndex , writerIndex)")]),e._v(" 这段内存区域。视图 ByteBuf 的数据区域其实就是原生 ByteBuf 的可读字节区域。")]),e._v(" "),t("p",[e._v("视图 ByteBuf 的 readerIndex = 0 ， writerIndex = capacity = maxCapacity = 原生 ByteBuf 的 "),t("code",[e._v("readableBytes()")]),e._v(" 。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  @Override\n    public int readableBytes() {\n        // 原生 ByteBuf\n        return writerIndex - readerIndex;\n    }\n")])])]),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("p",[e._v("下面我们来看一下 "),t("code",[e._v("slice()")]),e._v("方法创建视图 ByteBuf 的逻辑实现：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public abstract class AbstractByteBuf extends ByteBuf {\n    @Override\n    public ByteBuf slice() {\n        return slice(readerIndex, readableBytes());\n    }\n\n    @Override\n    public ByteBuf slice(int index, int length) {\n        // 确保 ByteBuf 的引用计数不为 0 \n        ensureAccessible();\n        return new UnpooledSlicedByteBuf(this, index, length);\n    }\n}\n")])])]),t("p",[e._v("Netty 会将 slice 视图 ByteBuf 封装在 UnpooledSlicedByteBuf 类中，在这里会初始化 slice 视图 ByteBuf 的 readerIndex，writerIndex，capacity，maxCapacity。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class UnpooledSlicedByteBuf extends AbstractUnpooledSlicedByteBuf {\n    UnpooledSlicedByteBuf(AbstractByteBuf buffer, int index, int length) {\n        // index = readerIndex\n        // length = readableBytes()\n        super(buffer, index, length);\n    }\n\n    @Override\n    public int capacity() {\n        // 视图 ByteBuf 的 capacity 和 maxCapacity 相等\n        // 均为原生 ByteBuf 的 readableBytes() \n        return maxCapacity();\n    }\n}\n")])])]),t("p",[e._v("如上图所示，这里的 index 就是原生 ByteBuf 的 readerIndex = 4 ，index 用于表示视图 ByteBuf 的内存区域相对于原生 ByteBuf 的偏移，因为视图 ByteBuf 与原生 ByteBuf 共用的是同一片内存区域，针对视图 ByteBuf 的操作其实底层最终是转换为对原生 ByteBuf 的操作。")]),e._v(" "),t("p",[e._v("但由于视图 ByteBuf  和原生 ByteBuf 各自都有独立的 readerIndex 和 writerIndex，比如上图中，视图 ByteBuf 中的 readerIndex = 0 其实指向的是原生 ByteBuf 中 readerIndex = 4 的位置。所以每次在我们对视图 ByteBuf 进行读写的时候都需要将视图 ByteBuf 的 readerIndex 加上一个偏移（index）转换成原生 ByteBuf 的 readerIndex，近而从原生 ByteBuf 中来读写数据。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("   @Override\n    protected byte _getByte(int index) {\n        // 底层其实是对原生 ByteBuf 的访问\n        return unwrap()._getByte(idx(index));\n    }\n\n    @Override\n    protected void _setByte(int index, int value) {\n        unwrap()._setByte(idx(index), value);\n    }\n\n   /**\n     * Returns the index with the needed adjustment.\n     */\n    final int idx(int index) {\n        // 转换为原生 ByteBuf 的 readerIndex 或者 writerIndex\n        return index + adjustment;\n    }\n")])])]),t("p",[t("code",[e._v("idx(int index)")]),e._v(" 方法中的 adjustment 就是上面 UnpooledSlicedByteBuf 构造函数中的 index 偏移，初始化为原生 ByteBuf 的 readerIndex。")]),e._v(" "),t("p",[e._v("length 则初始化为原生 ByteBuf 的 "),t("code",[e._v("readableBytes()")]),e._v("，视图 ByteBuf 中的 writerIndex，capacity，maxCapacity 都是用 length 来初始化。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("abstract class AbstractUnpooledSlicedByteBuf extends AbstractDerivedByteBuf {\n    // 原生 ByteBuf\n    private final ByteBuf buffer;\n    // 视图 ByteBuf 相对于原生 ByteBuf的数据区域偏移\n    private final int adjustment;\n\n    AbstractUnpooledSlicedByteBuf(ByteBuf buffer, int index, int length) {\n        // 设置视图 ByteBuf 的 maxCapacity，readerIndex 为 0 \n        super(length);\n        // 原生 ByteBuf\n        this.buffer = buffer;\n        // 数据偏移为原生 ByteBuf 的 readerIndex\n        adjustment = index;\n        // 设置视图 ByteBuf 的 writerIndex\n        writerIndex(length);\n    }\n}\n")])])]),t("p",[e._v("但是通过 "),t("code",[e._v("slice()")]),e._v(" 方法创建出来的视图 ByteBuf 并不会改变原生 ByteBuf 的引用计数，这会存在一个问题，就是由于视图 ByteBuf 和原生 ByteBuf 底层共用的是同一片内存区域，在原生 ByteBuf 或者视图 ByteBuf 各自的应用上下文中他们可能并不会意识到对方的存在。")]),e._v(" "),t("p",[e._v("如果对原生 ByteBuf 调用 release 方法，恰好引用计数就为 0 了，接着就会释放原生 ByteBuf 的 Native Memory 。此时再对视图 ByteBuf 进行访问就有问题了，因为  Native Memory 已经被原生 ByteBuf 释放了。同样的道理，对视图 ByteBuf 调用 release 方法 ，也会对原生 ByteBuf 产生影响。")]),e._v(" "),t("p",[e._v("为此 Netty 提供了一个 "),t("code",[e._v("retainedSlice()")]),e._v(" 方法，在创建 slice 视图 ByteBuf 的同时对原生 ByteBuf 的引用计数加 1 ，两者共用同一个引用计数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    @Override\n    public ByteBuf retainedSlice() {\n        // 原生 ByteBuf 的引用计数加 1\n        return slice().retain();\n    }\n")])])]),t("p",[e._v("除了 "),t("code",[e._v("slice()")]),e._v(" 之外，Netty 也提供了 "),t("code",[e._v("duplicate()")]),e._v(" 方法来创建视图 ByteBuf 。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    @Override\n    public ByteBuf duplicate() {\n        // 确保 ByteBuf 的引用计数不为 0 \n        ensureAccessible();\n        return new UnpooledDuplicatedByteBuf(this);\n    }\n")])])]),t("p",[e._v("但和  "),t("code",[e._v("slice()")]),e._v(" 不同的是， "),t("code",[e._v("duplicate()")]),e._v(" 是完全复刻了原生 ByteBuf，复刻出来的视图 ByteBuf 虽然与原生 ByteBuf 都有各自独立的  readerIndex，writerIndex，capacity，maxCapacity。但他们的值都是相同的。duplicate 视图  ByteBuf 也是和原生 ByteBuf 共用同一块 Native Memory 。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class DuplicatedByteBuf extends AbstractDerivedByteBuf {\n    // 原生 ByteBuf\n    private final ByteBuf buffer;\n\n    public DuplicatedByteBuf(ByteBuf buffer) {\n        this(buffer, buffer.readerIndex(), buffer.writerIndex());\n    }\n\n    DuplicatedByteBuf(ByteBuf buffer, int readerIndex, int writerIndex) {\n        // 初始化视图 ByteBuf 的 maxCapacity 与原生的相同\n        super(buffer.maxCapacity());\n        // 原生 ByteBuf\n        this.buffer = buffer;\n        // 视图 ByteBuf 的 readerIndex ， writerIndex 也与原生相同\n        setIndex(readerIndex, writerIndex);\n        markReaderIndex();\n        markWriterIndex();\n    }\n\n    @Override\n    public int capacity() {\n        // 视图 ByteBuf 的 capacity 也与原生相同\n        return unwrap().capacity();\n    }\n\n}\n")])])]),t("p",[e._v("Netty 同样也提供了对应的 "),t("code",[e._v("retainedDuplicate()")]),e._v(" 方法，用于创建 duplicate 视图 ByteBuf  的同时增加原生 ByteBuf 的引用计数。视图 ByteBuf 与原生 ByteBuf 之间共用同一个引用计数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("   @Override\n    public ByteBuf retainedDuplicate() {\n        return duplicate().retain();\n    }\n")])])]),t("p",[e._v("上面介绍的两种视图 ByteBuf 可以理解为是对原生 ByteBuf 的一层浅拷贝，Netty 也提供了 "),t("code",[e._v("copy()")]),e._v(" 方法来实现对原生 ByteBuf 的深拷贝，copy 出来的 ByteBuf 是原生  ByteBuf 的一个副本，两者底层依赖的 Native Memory 是不同的，各自都有独立的  readerIndex，writerIndex，capacity，maxCapacity 。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public abstract class AbstractByteBuf extends ByteBuf {\n    @Override\n    public ByteBuf copy() {\n        // 从原生 ByteBuf 中的 readerIndex 开始，拷贝 readableBytes 个字节到新的 ByteBuf 中\n        return copy(readerIndex, readableBytes());\n    }\n}\n")])])]),t("p",[t("code",[e._v("copy()")]),e._v(" 方法是对原生 ByteBuf 的 "),t("code",[e._v("[readerIndex , writerIndex)")]),e._v("这段数据范围内容进行拷贝。copy 出来的 ByteBuf，它的 readerIndex = 0 ， writerIndex = capacity = 原生 ByteBuf 的 "),t("code",[e._v("readableBytes()")]),e._v("。maxCapacity 与原生 maxCapacity 相同。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public class UnpooledDirectByteBuf  {\n  @Override\n    public ByteBuf copy(int index, int length) {\n        ensureAccessible();\n        ByteBuffer src;\n        try {\n            // 将原生 ByteBuf 中 [index , index + lengh) 这段范围的数据拷贝到新的 ByteBuf 中\n            src = (ByteBuffer) buffer.duplicate().clear().position(index).limit(index + length);\n        } catch (IllegalArgumentException ignored) {\n            throw new IndexOutOfBoundsException("Too many bytes to read - Need " + (index + length));\n        }\n        // 首先新申请一段 native memory , 新的 ByteBuf 初始容量为 length (真实容量)，最大容量与原生 ByteBuf 的 maxCapacity 相等\n        // readerIndex = 0 , writerIndex = length\n        return alloc().directBuffer(length, maxCapacity()).writeBytes(src);\n    }\n}\n')])])]),t("h3",{attrs:{id:"_2-8-compositebytebuf-的零拷贝设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-compositebytebuf-的零拷贝设计"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.8 CompositeByteBuf 的零拷贝设计")])]),e._v(" "),t("p",[e._v("这里的零拷贝并不是我们经常提到的那种 OS 层面上的零拷贝，而是 Netty 在用户态层面自己实现的避免内存拷贝的设计。比如在传统意义上，如果我们想要将多个独立的 ByteBuf  聚合成一个 ByteBuf 的时候，我们首先需要向 OS 申请一段更大的内存，然后依次将多个 ByteBuf 中的内容拷贝到这段新申请的内存上，最后在释放这些 ByteBuf 的内存。")]),e._v(" "),t("p",[e._v("这样一来就涉及到两个性能开销点，一个是我们需要向 OS 重新申请更大的内存，另一个是内存的拷贝。Netty 引入 CompositeByteBuf 的目的就是为了解决这两个问题。巧妙地利用原有 ByteBuf 所占的内存，在此基础之上，将它们组合成一个逻辑意义上的 CompositeByteBuf ，提供一个统一的逻辑视图。")]),e._v(" "),t("p",[e._v("CompositeByteBuf 其实也是一种视图 ByteBuf ，这一点和上小节中我们介绍的 SlicedByteBuf ， DuplicatedByteBuf 一样，它们本身并不会占用 Native Memory，底层数据的存储全部依赖于原生的 ByteBuf。")]),e._v(" "),t("p",[e._v("不同点在于，SlicedByteBuf，DuplicatedByteBuf 它们是在单一的原生 ByteBuf 基础之上创建出的视图 ByteBuf。而 CompositeByteBuf 是基于多个原生 ByteBuf 创建出的统一逻辑视图  ByteBuf。")]),e._v(" "),t("p",[e._v("CompositeByteBuf 对于我们用户来说和其他的普通 ByteBuf 没有任何区别，有自己独立的 readerIndex，writerIndex，capacity，maxCapacity，前面几个小节中介绍的各种 ByteBuf 的设计要素，在 CompositeByteBuf 身上也都会体现。")]),e._v(" "),t("p",[e._v("但从实现的角度来说，CompositeByteBuf 只是一个逻辑上的 ByteBuf，其本身并不会占用任何的 Native Memory ，对于 CompositeByteBuf 的任何操作，最终都需要转换到其内部具体的 ByteBuf 上。本小节我们就来深入到 CompositeByteBuf 的内部，来看一下 Netty 的巧妙设计。")]),e._v(" "),t("h4",{attrs:{id:"_2-8-1-compositebytebuf-的总体架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-1-compositebytebuf-的总体架构"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.8.1 CompositeByteBuf 的总体架构")])]),e._v(" "),t("p",[e._v("从总体设计上来讲，CompositeByteBuf 包含如下五个重要属性，其中最为核心的就是 components 数组，那些需要被聚合的原生 ByteBuf 会被 Netty 封装在 Component 类中，并统一组织在 components 数组中。后续针对 CompositeByteBuf 的所有操作都需要和这个数组打交道。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class CompositeByteBuf extends AbstractReferenceCountedByteBuf implements Iterable<ByteBuf> {\n    // 内部 ByteBuf 的分配器，用于后续扩容，copy , 合并等操作\n    private final ByteBufAllocator alloc;\n    // compositeDirectBuffer 还是 compositeHeapBuffer ?\n    private final boolean direct;\n    // 最大的 components 数组容量（16）\n    private final int maxNumComponents;\n    // 当前 CompositeByteBuf 中包含的 components 个数\n    private int componentCount;\n    // 存储 component 的数组\n    private Component[] components; // resized when needed\n}\n")])])]),t("p",[e._v("maxNumComponents 表示 components 数组最大的容量，CompositeByteBuf 默认能够包含 Component 的最大个数为 16，如果超过这个数量的话，Netty 会将当前 CompositeByteBuf 中包含的所有 Components 重新合并成一个更大的 Component。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public abstract class AbstractByteBufAllocator implements ByteBufAllocator {\n    static final int DEFAULT_MAX_COMPONENTS = 16;\n}\n")])])]),t("p",[e._v("componentCount 表示当前 CompositeByteBuf 中包含的 Component 个数。每当我们通过 "),t("code",[e._v("addComponent")]),e._v(" 方法向 CompositeByteBuf 添加一个新的 ByteBuf 时，Netty 都会用一个新的 Component 实例来包装这个 ByteBuf，然后存放在  components 数组中，最后 componentCount 的个数加 1 。")]),e._v(" "),t("p",[e._v("CompositeByteBuf 与其底层聚合的真实 ByteBuf 架构设计关系，如下图所示：")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("p",[e._v("而创建一个 CompositeByteBuf 的核心其实就是创建底层的 components 数组，后续添加到该 CompositeByteBuf 的所有原生 ByteBuf 都会被组织在这里。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('   private CompositeByteBuf(ByteBufAllocator alloc, boolean direct, int maxNumComponents, int initSize) {\n        // 设置 maxCapacity\n        super(AbstractByteBufAllocator.DEFAULT_MAX_CAPACITY);\n\n        this.alloc = ObjectUtil.checkNotNull(alloc, "alloc");\n        this.direct = direct;\n        this.maxNumComponents = maxNumComponents;\n        // 初始 Component 数组的容量为 maxNumComponents\n        components = newCompArray(initSize, maxNumComponents);\n    }\n')])])]),t("p",[e._v("这里的参数  "),t("code",[e._v("initSize")]),e._v(" 表示的并不是 CompositeByteBuf 所包含的字节数，而是初始包装的原生 ByteBuf 个数，也就是初始  Component 的个数。components 数组的总体大小由参数 maxNumComponents 决定，但不能超过 16 。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("   private static Component[] newCompArray(int initComponents, int maxNumComponents) {\n        // MAX_COMPONENT\n        int capacityGuess = Math.min(AbstractByteBufAllocator.DEFAULT_MAX_COMPONENTS, maxNumComponents);\n        // 初始 Component 数组的容量为 maxNumComponents\n        return new Component[Math.max(initComponents, capacityGuess)];\n    }\n")])])]),t("p",[e._v("现在我们只是清楚了 CompositeByteBuf 的一个基本骨架，那么接下来 Netty 如何根据这个基本的骨架将多个原生 ByteBuf 组装成一个逻辑上的统一视图 ByteBuf 呢 ？")]),e._v(" "),t("p",[e._v("也就是说我们依据 CompositeByteBuf 中的 readerIndex 以及 writerIndex 进行的读写操作逻辑如何转换到对应的底层原生 ByteBuf 之上呢 ？ 这个是整个设计的核心所在。")]),e._v(" "),t("p",[e._v("下面笔者就带着大家从外到内，从易到难地一一拆解 CompositeByteBuf 中的那些核心设计要素。从 CompositeByteBuf 的最外层来看，其实我们并不陌生，对于用户来说它就是一个普通的 ByteBuf，拥有自己独立的 readerIndex ，writerIndex 。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409191121420.webp",alt:"图片"}}),e._v("image.png")]),e._v(" "),t("p",[e._v("但 CompositeByteBuf 中那些逻辑上看起来连续的字节，背后其实存储在不同的原生 ByteBuf 中。不同 ByteBuf 的内存之间其实是不连续的。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://mmbiz.qpic.cn/sz_mmbiz_jpg/sOIZXFW0vUZFdNJKVEk1X07SFzmQ63xFPaTicNCcEx4ibZrlnPf2JXMsIGn8UTHiaxEH5QJKpbJd7Mziba115XFhDw/640?wx_fmt=other&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("image.png")]),e._v(" "),t("p",[e._v("那么现在问题的关键就是我们如何判断 CompositeByteBuf 中的某一段逻辑数据背后对应的究竟是哪一个真实的 ByteBuf，如果我们能够通过 CompositeByteBuf 的相关 Index , 找到这个 Index 背后对应的 ByteBuf，近而可以找到 ByteBuf 的 Index ，这样是不是就可以将 CompositeByteBuf 的逻辑操作转换成对真实内存的读写操作了。")]),e._v(" "),t("p",[e._v("CompositeByteBuf 到原生 ByteBuf 的转换关系，Netty 封装在 Component 类中，每一个被包装在 CompositeByteBuf 中的原生 ByteBuf 都对应一个 Component 实例。它们会按照顺序统一组织在 components 数组中。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    private static final class Component {\n        // 原生 ByteBuf\n        final ByteBuf srcBuf; \n        // CompositeByteBuf 的 index 加上 srcAdjustment 就得到了srcBuf 的相关 index\n        int srcAdjustment; \n        // srcBuf 可能是一个被包装过的 ByteBuf，比如 SlicedByteBuf ， DuplicatedByteBuf\n        // 被 srcBuf 包装的最底层的 ByteBuf 就存放在 buf 字段中\n        final ByteBuf buf;      \n        // CompositeByteBuf 的 index 加上 adjustment 就得到了 buf 的相关 index      \n        int adjustment; \n \n        // 该 Component 在 CompositeByteBuf 视角中表示的数据范围 [offset , endOffset)\n        int offset; \n        int endOffset;        \n    }\n")])])]),t("p",[e._v("一个 Component 在 CompositeByteBuf 的视角中所能表示的数据逻辑范围是 "),t("code",[e._v("[offset , endOffset)")]),e._v("。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("p",[e._v("比如上图中第一个绿色的 ByteBuf , 它里边存储的数据组成了 CompositeByteBuf 中 "),t("code",[e._v("[0 , 4)")]),e._v(" 这段逻辑数据范围。第二个黄色的 ByteBuf，它里边存储的数据组成了 CompositeByteBuf 中 "),t("code",[e._v("[4 , 8)")]),e._v(" 这段逻辑数据范围。第三个蓝色的 ByteBuf，它里边存储的数据组成了 CompositeByteBuf 中 "),t("code",[e._v("[8 , 12)")]),e._v(" 这段逻辑数据范围。 上一个 Component 的 endOffset 恰好是下一个 Component 的 offset 。")]),e._v(" "),t("p",[e._v("而这些真实存储数据的 ByteBuf 则存储在对应 Component 中的 srcBuf 字段中，当我们通过 CompositeByteBuf 的 readerIndex 或者 writerIndex 进行读写操作的时候，首先需要确定相关 index 所对应的 srcBuf，然后将 CompositeByteBuf 的 index 转换为 srcBuf 的 srcIndex，近而通过 srcIndex 对 srcBuf 进行读写。")]),e._v(" "),t("p",[e._v("这个 index 的转换就是通过 srcAdjustment 来进行的，比如，当前 CompositeByteBuf 的 readerIndex 为 5 ，它对应的是第二个黄色的 ByteBuf。而 ByteBuf 的 readerIndex 却是 1 。")]),e._v(" "),t("p",[e._v("所以第二个 Component 的 srcAdjustment 就是 -4 ， 这样我们读取 CompositeByteBuf 的时候，首先将它的 readerIndex 加上 srcAdjustment 就得到了 ByteBuf 的 readerIndex ，后面就是普通的 ByteBuf 读取操作了。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("p",[e._v("在比如说，我们要对 CompositeByteBuf 进行写操作，当前的 writerIndex 为 10 ，对应的是第三个蓝色的 ByteBuf，它的 writerIndex 为 2 。")]),e._v(" "),t("p",[e._v("所以第三个 Component 的 srcAdjustment 就是 -8 ，CompositeByteBuf 的 writerIndex 加上 srcAdjustment 就得到了 ByteBuf 的 writerIndex，后续就是普通的 ByteBuf 写入操作。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("       int srcIdx(int index) {\n            // CompositeByteBuf 相关的 index 转换成 srcBuf 的相关 index\n            return index + srcAdjustment;\n        }\n")])])]),t("p",[e._v("除了 srcBuf 之外，Component 实例中还有一个 buf 字段，这里大家可能会比较好奇，为什么设计了两个 ByteBuf 字段呢 ？Component 实例与 ByteBuf 不是一对一的关系吗 ？")]),e._v(" "),t("p",[e._v("srcBuf 是指我们通过 "),t("code",[e._v("addComponent")]),e._v(" 方法添加到 CompositeByteBuf 中的原始 ByteBuf。而这个 srcBuf 可能是一个视图 ByteBuf，比如上一小节中介绍到的 SlicedByteBuf 和 DuplicatedByteBuf。srcBuf 还可能是一个被包装过的 ByteBuf，比如 WrappedByteBuf , SwappedByteBuf。")]),e._v(" "),t("p",[e._v("假如 srcBuf 是一个 SlicedByteBuf 的话，我们需要将它的原生 ByteBuf 拆解出来并保存在 Component 实例的 buf 字段中。事实上 Component 中的 buf 才是真正存储数据的地方。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("abstract class AbstractUnpooledSlicedByteBuf {\n    // 原生 ByteBuf\n    private final ByteBuf buffer;\n}\n")])])]),t("p",[e._v("与 buf 对应的就是 adjustment ， 它用于将 CompositeByteBuf 的相关 index 转换成 buf 相关的 index ，假如我们在向一个 CompositeByteBuf 执行 read 操作，它的当前 readerIndex 是 5，而 buf 的 readerIndex 是 6 。")]),e._v(" "),t("p",[e._v("所以在读取操作之前，我们需要将 CompositeByteBuf 的 readerIndex 加上 adjustment 得到 buf 的 readerIndex，近而将读取操作转移到 buf 中。其实就和上小节中介绍的视图 ByteBuf 是一模一样的，在读写之前都需要修正相关的 index 。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("   @Override\n    public byte getByte(int index) {\n        // 通过 CompositeByteBuf 的 index , 找到数据所属的 component\n        Component c = findComponent(index);\n        // 首先通过 idx 转换为 buf 相关的 index\n        // 将对 CompositeByteBuf 的读写操作转换为 buf 的读写操作\n        return c.buf.getByte(c.idx(index));\n    }\n\n    int idx(int index) {\n        // 将 CompositeByteBuf 的相关 index 转换为 buf 的相关 index\n        return index + adjustment;\n     }\n")])])]),t("p",[e._v("那么我们如何根据指定的 CompositeByteBuf 的 index 来查找其对应的底层数据究竟存储在哪个 Component 中呢 ？")]),e._v(" "),t("p",[e._v("核心思想其实很简单，因为每个 Component 都会描述自己表示 CompositeByteBuf 中的哪一段数据范围 —— "),t("code",[e._v("[offset , endOffset)")]),e._v("。所有的 Components 都被有序的组织在 components 数组中。我们可以通过二分查找的方法来寻找这个 index 到底是落在了哪个 Component 表示的范围中。")]),e._v(" "),t("p",[e._v("这个查找的过程是在 "),t("code",[e._v("findComponent")]),e._v("方法中实现的，Netty 会将最近一次访问到的  Component 缓存在 CompositeByteBuf 的 lastAccessed 字段中，每次进行查找的时候首先会判断 index 是否落在了 lastAccessed 所表示的数据范围内 —— "),t("code",[e._v("[ la.offset , la.endOffset)")]),e._v(" 。")]),e._v(" "),t("p",[e._v("如果 index 恰好被缓存的 Component（lastAccessed）所包含，那么就直接返回 lastAccessed 。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    // 缓存最近一次查找到的 Component\n    private Component lastAccessed;\n\n    private Component findComponent(int offset) {\n        Component la = lastAccessed;\n        // 首先查找 offset 是否恰好落在 lastAccessed 的区间中\n        if (la != null && offset >= la.offset && offset < la.endOffset) {\n           return la;\n        }\n        // 在所有 Components 中进行二分查找\n        return findIt(offset);\n    }\n")])])]),t("p",[e._v("如果 index 不巧没有命中缓存，那么就在整个 components 数组中进行二分查找 ：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    private Component findIt(int offset) {\n        for (int low = 0, high = componentCount; low <= high;) {\n            int mid = low + high >>> 1;\n            Component c = components[mid];\n            if (offset >= c.endOffset) {\n                low = mid + 1;\n            } else if (offset < c.offset) {\n                high = mid - 1;\n            } else {\n                lastAccessed = c;\n                return c;\n            }\n        }\n\n        throw new Error("should not reach here");\n    }\n')])])]),t("h4",{attrs:{id:"_2-8-2-compositebytebuf-的创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-2-compositebytebuf-的创建"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.8.2 CompositeByteBuf 的创建")])]),e._v(" "),t("p",[e._v("好了，现在我们已经熟悉了 CompositeByteBuf 的总体架构，那么接下来我们就来看一下 Netty 是如何将多个 ByteBuf 逻辑聚合成一个 CompositeByteBuf 的。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public final class Unpooled {\n   public static ByteBuf wrappedBuffer(ByteBuf... buffers) {\n        return wrappedBuffer(buffers.length, buffers);\n    }\n}\n")])])]),t("p",[e._v("CompositeByteBuf 的初始 maxNumComponents 为 buffers 数组的长度，如果我们只是传入一个 ByteBuf 的话，那么就无需创建 CompositeByteBuf，而是直接返回该 ByteBuf 的 slice 视图。")]),e._v(" "),t("p",[e._v("如果我们传入的是多个 ByteBuf 的话，则将这多个 ByteBuf 包装成 CompositeByteBuf 返回。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public final class Unpooled {\n    public static ByteBuf wrappedBuffer(int maxNumComponents, ByteBuf... buffers) {\n        switch (buffers.length) {\n        case 0:\n            break;\n        case 1:\n            ByteBuf buffer = buffers[0];\n            if (buffer.isReadable()) {\n                // 直接返回 buffer.slice() 视图\n                return wrappedBuffer(buffer.order(BIG_ENDIAN));\n            } else {\n                buffer.release();\n            }\n            break;\n        default:\n            for (int i = 0; i < buffers.length; i++) {\n                ByteBuf buf = buffers[i];\n                if (buf.isReadable()) {\n                    // 从第一个可读的 ByteBuf —— buffers[i] 开始创建 CompositeByteBuf\n                    return new CompositeByteBuf(ALLOC, false, maxNumComponents, buffers, i);\n                }\n                // buf 不可读则 release\n                buf.release();\n            }\n            break;\n        }\n        return EMPTY_BUFFER;\n    }\n}\n")])])]),t("p",[e._v("在进入 CompositeByteBuf 的创建流程之后，首先是创建出一个空的 CompositeByteBuf，也就是先把 CompositeByteBuf 的骨架搭建起来，这时它的 initSize 为 "),t("code",[e._v("buffers.length - offset")]),e._v(" 。")]),e._v(" "),t("p",[e._v("注意 initSize 表示的并不是 CompositeByteBuf 初始包含的字节个数，而是表示初始 Component 的个数。offset 则表示从 buffers 数组中的哪一个索引开始创建 CompositeByteBuf，就是上面 CompositeByteBuf 构造函数中最后一个参数 i 。")]),e._v(" "),t("p",[e._v("随后通过 "),t("code",[e._v("addComponents0")]),e._v(" 方法为 buffers 数组中的每一个 ByteBuf 创建初始化 Component 实例，并将他们有序的添加到 CompositeByteBuf 的 components 数组中。")]),e._v(" "),t("p",[e._v("但这时 Component 实例的个数可能已经超过 maxNumComponents 限制的个数，那么接下来就会在 "),t("code",[e._v("consolidateIfNeeded()")]),e._v(" 方法中将当前 CompositeByteBuf 中的所有 Components 合并成一个更大的 Component。CompositeByteBuf 中的 components 数组长度是不可以超过 maxNumComponents 限制的，如果超过就需要在这里合并。")]),e._v(" "),t("p",[e._v("最后设置当前 CompositeByteBuf 的 readerIndex 和 writerIndex，在初始状态下 CompositeByteBuf 的 readerIndex 会被设置为 0 ，writerIndex 会被设置为最后一个 Component 的 endOffset 。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    CompositeByteBuf(ByteBufAllocator alloc, boolean direct, int maxNumComponents,\n            ByteBuf[] buffers, int offset) {\n        // 先初始化一个空的 CompositeByteBuf\n        // initSize 为 buffers.length - offset\n        this(alloc, direct, maxNumComponents, buffers.length - offset);\n        // 为所有的 buffers 创建  Component 实例，并添加到 components 数组中\n        addComponents0(false, 0, buffers, offset);\n        // 如果当前 component 的个数已经超过了 maxNumComponents，则将所有 component 合并成一个\n        consolidateIfNeeded();\n        // 设置 CompositeByteBuf 的 readerIndex = 0\n        // writerIndex 为最后一个 component 的 endOffset\n        setIndex0(0, capacity());\n    }\n")])])]),t("h4",{attrs:{id:"_2-8-3-shiftcomps-为新的-bytebuf-腾挪空间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-3-shiftcomps-为新的-bytebuf-腾挪空间"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.8.3 shiftComps 为新的 ByteBuf 腾挪空间")])]),e._v(" "),t("p",[e._v("在整个 CompositeByteBuf 的构造过程中，最核心也是最复杂的步骤其实就是 "),t("code",[e._v("addComponents0")]),e._v(" 方法，将多个 ByteBuf  有序的添加到 CompositeByteBuf 的 components 数组中看似简单，其实还有很多种复杂的情况需要考虑。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("p",[e._v("复杂之处在于这些 ByteBuf 需要插在 components 数组的哪个位置上 ？ 比较简单直观的情况是我们直接在 components 数组的末尾插入，也就是说要插入的位置索引 cIndex 等于 componentCount。这里分为两种情况：")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("cIndex = componentCount = 0")]),e._v(" ，这种情况表示我们在向一个空的 CompositeByteBuf 插入 ByteBufs , 很简单，直接插入即可。")]),e._v(" "),t("li",[t("code",[e._v("cIndex = componentCount > 0")]),e._v(" ， 这种情况表示我们再向一个非空的 CompositeByteBuf 插入 ByteBufs，正如上图所示。同样也很简单，直接在 componentCount 的位置处插入即可。")])]),e._v(" "),t("p",[e._v("稍微复杂一点的情况是我们在 components 数组的中间位置进行插入而不是在末尾，也就是 "),t("code",[e._v("cIndex < componentCount")]),e._v(" 的情况。如下如图所示，假设我们现在需要在 "),t("code",[e._v("cIndex = 3")]),e._v("的位置处插入两个 ByteBuf 进来，但现在 components[3] 以及 components[4] 的位置已经被占用了。所以我们需要将这两个位置上的原有 component 向后移动两个位置，将 components[3] 和 components[4] 的位置腾出来。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// i = 3 , count = 2 , size = 5\nSystem.arraycopy(components, i, components, i + count, size - i);\n")])])]),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409191121207.webp",alt:"图片"}}),e._v("image.png")]),e._v(" "),t("p",[e._v("在复杂一点的情况就是 components 数组需要扩容，当一个 CompositeByteBuf 刚刚被初始化出来的时候，它的 components 数组长度等于 maxNumComponents。")]),e._v(" "),t("p",[e._v("如果当前 components 数组中包含的 component 个数 —— componentCount 加上本次需要添加的 ByteBuf 个数 —— count 已经超过了 maxNumComponents 的时候，就需要对 components 数组进行扩容。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("        // 初始为 0，当前 CompositeByteBuf 中包含的 component 个数\n        final int size = componentCount, \n        // 本次 addComponents0 操作之后，新的 component 个数\n        newSize = size + count;\n       \n        // newSize 超过了 maxNumComponents 则对 components 数组进行扩容\n        if (newSize > components.length) {\n            ....... 扩容 ....\n\n            // 扩容后的新数组\n            components = newArr;\n        }\n")])])]),t("p",[e._v("扩容之后的 components 数组长度是在 newSize 与原来长度的 "),t("code",[e._v("3 / 2")]),e._v("之间取一个最大值。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("int newArrSize = Math.max(size + (size >> 1), newSize);\n")])])]),t("p",[e._v("如果我们原来恰好是希望在 components 数组的末尾插入，也就是 "),t("code",[e._v("cIndex = componentCount")]),e._v(" 的情况，那么就需要通过 "),t("code",[e._v("Arrays.copyOf")]),e._v(" 首先申请一段长度为 newArrSize 的数组，然后将原来的 components 数组中的内容原样拷贝过去。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("newArr = Arrays.copyOf(components, newArrSize, Component[].class);\n")])])]),t("p",[e._v("这样新的 components 数组就有位置可以容纳本次需要加入的 ByteBuf 了。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("p",[e._v("如果我们希望在原来 components 数组的中间插入，也就是 "),t("code",[e._v("cIndex < componentCount")]),e._v(" 的情况，如下图所示：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409191121796.webp",alt:"图片"}}),e._v("image.png")]),e._v(" "),t("p",[e._v("这种情况在扩容的时候就不能原样拷贝原 components 数组了，而是首先通过 "),t("code",[e._v("System.arraycopy")]),e._v(" 将 "),t("code",[e._v("[0 , cIndex)")]),e._v(" 这段范围的内容拷贝过去，在将 "),t("code",[e._v("[cIndex , componentCount)")]),e._v("这段范围的内容拷贝到新数组的 "),t("code",[e._v("cIndex + count")]),e._v(" 位置处。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409191122454.webp",alt:"图片"}}),e._v("image.png")]),e._v(" "),t("p",[e._v("这样一来，就在新 components 数组的 cIndex 索引处，空出了两个位置出来用来添加本次这两个 ByteBuf。最后更新 componentCount 的值。以上腾挪空间的逻辑封装在 shiftComps 方法中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    private void shiftComps(int i, int count) {\n        // 初始为 0，当前 CompositeByteBuf 中包含的 component 个数\n        final int size = componentCount, \n        // 本次 addComponents0 操作之后，新的 component 个数\n        newSize = size + count;\n       \n        // newSize 超过了 max components（16） 则对 components 数组进行扩容\n        if (newSize > components.length) {\n            // grow the array，扩容到原来的 3 / 2\n            int newArrSize = Math.max(size + (size >> 1), newSize);\n            Component[] newArr;\n            if (i == size) {\n                // 在 Component[] 数组的末尾进行插入\n                // 初始状态 i = size = 0\n                // size - 1 是 Component[] 数组的最后一个元素，指定的 i 恰好越界\n                // 原来 Component[] 数组中的内容全部拷贝到 newArr 中\n                newArr = Arrays.copyOf(components, newArrSize, Component[].class);\n            } else {\n                // 在 Component[] 数组的中间进行插入\n                newArr = new Component[newArrSize];\n                if (i > 0) {\n                    // [0 , i) 之间的内容拷贝到 newArr 中\n                    System.arraycopy(components, 0, newArr, 0, i);\n                }\n                if (i < size) {\n                    // 将剩下的 [i , size) 内容从 newArr 的 i + count 位置处开始拷贝。\n                    // 因为需要将原来的 [ i , i+count ） 这些位置让出来，添加本次新的 components，\n                    System.arraycopy(components, i, newArr, i + count, size - i);\n                }\n            }\n            // 扩容后的新数组\n            components = newArr;\n        } else if (i < size) {\n            // i < size 本次操作要覆盖原来的 [ i , i+count ） 之间的位置，所以这里需要将原来位置上的 component 向后移动\n            System.arraycopy(components, i, components, i + count, size - i);\n        }\n        // 更新 componentCount\n        componentCount = newSize;\n    }\n")])])]),t("h4",{attrs:{id:"_2-8-4-component-如何封装-bytebuf"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-4-component-如何封装-bytebuf"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.8.4 Component 如何封装 ByteBuf")])]),e._v(" "),t("p",[e._v("经过上一小节 shiftComps 方法的辗转腾挪之后，现在 CompositeByteBuf 中的 components 数组终于有位置可以容纳本次需要添加的 ByteBuf 了。接下来就需要为每一个 ByteBuf 创建初始化一个 Component 实例，最后将这些 Component 实例放到 components 数组对应的位置上。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    private static final class Component {\n        // 原生 ByteBuf\n        final ByteBuf srcBuf; \n        // CompositeByteBuf 的 index 加上 srcAdjustment 就得到了srcBuf 的相关 index\n        int srcAdjustment; \n        // srcBuf 可能是一个被包装过的 ByteBuf，比如 SlicedByteBuf ， DuplicatedByteBuf\n        // 被 srcBuf 包装的最底层的 ByteBuf 就存放在 buf 字段中\n        final ByteBuf buf;      \n        // CompositeByteBuf 的 index 加上 adjustment 就得到了 buf 的相关 index      \n        int adjustment; \n \n        // 该 Component 在 CompositeByteBuf 视角中表示的数据范围 [offset , endOffset)\n        int offset; \n        int endOffset;        \n    }\n")])])]),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("p",[e._v("我们首先需要初始化 Component 实例的 offset ， endOffset 属性，前面我们已经介绍了，一个 Component 在 CompositeByteBuf 的视角中所能表示的数据逻辑范围是 "),t("code",[e._v("[offset , endOffset)")]),e._v("。在 components 数组中，一般前一个 Component 的 endOffset 往往是后一个 Component 的 offset。")]),e._v(" "),t("p",[e._v("如果我们期望从 components 数组的第一个位置处开始插入（cIndex = 0），那么第一个 Component 的 offset 自然是 0 。")]),e._v(" "),t("p",[e._v("如果 cIndex > 0 , 那么我们就需要找到它上一个 Component —— components[cIndex - 1] ， 上一个 Component 的 endOffset 恰好就是当前 Component 的 offset。")]),e._v(" "),t("p",[e._v("然后通过 "),t("code",[e._v("newComponent")]),e._v(" 方法利用 ByteBuf 相关属性以及 offset 来初始化 Component 实例。随后将创建出来的 Component 实例放置在对应的位置上 —— components[cIndex] 。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("           // 获取当前正在插入 Component 的 offset\n           int nextOffset = cIndex > 0 ? components[cIndex - 1].endOffset : 0;\n            for (ci = cIndex; arrOffset < len; arrOffset++, ci++) {\n                // 待插入 ByteBuf\n                ByteBuf b = buffers[arrOffset];\n                if (b == null) {\n                    break;\n                }\n                // 将 ByteBuf 封装在 Component 中\n                Component c = newComponent(ensureAccessible(b), nextOffset);\n                components[ci] = c;\n                // 下一个 Component 的 Offset 是上一个 Component 的 endOffset\n                nextOffset = c.endOffset;\n            }\n")])])]),t("p",[e._v("假设现在有一个空的 CompositeByteBuf，我们需要将一个数据范围为 "),t("code",[e._v("[1 , 4]")]),e._v(" , readerIndex = 1 的 srcBuf ， 插入到 CompositeByteBuf 的 components 数组中。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("p",[e._v("但是如果该 srcBuf 是一个视图 ByteBuf 的话，比如：SlicedByteBuf ， DuplicatedByteBuf。或者是一个被包装过的 ByteBuf ，比如：WrappedByteBuf ， SwappedByteBuf。")]),e._v(" "),t("p",[e._v("那么我们就需要对 srcBuf 不断的执行 "),t("code",[e._v("unwrap()")]),e._v(", 将其最底层的原生 ByteBuf 提取出来，如上图所示，原生 buf 的数据范围为 "),t("code",[e._v("[4 , 7]")]),e._v(" , srcBuf 与 buf 之间相关 index 的偏移 adjustment 等于 3  , 原生 buf 的 readerIndex = 4 。")]),e._v(" "),t("p",[e._v("最后我们会根据 srcBuf ， srcIndex（srcBuf 的 readerIndex），原生 buf ，unwrappedIndex（buf 的 readerIndex），offset ， len （srcBuf 中的可读字节数）来初始化 Component 实例。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    private Component newComponent(final ByteBuf buf, final int offset) {\n        // srcBuf 的 readerIndex = 1\n        final int srcIndex = buf.readerIndex();\n        // srcBuf 中的可读字节数 = 4\n        final int len = buf.readableBytes();\n\n        // srcBuf 可能是一个被包装过的 ByteBuf，比如 SlicedByteBuf，DuplicatedByteBuf\n        // 获取 srcBuf 底层的原生 ByteBuf\n        ByteBuf unwrapped = buf;\n        // 原生 ByteBuf 的 readerIndex\n        int unwrappedIndex = srcIndex;\n        while (unwrapped instanceof WrappedByteBuf || unwrapped instanceof SwappedByteBuf) {\n            unwrapped = unwrapped.unwrap();\n        }\n\n        // unwrap if already sliced\n        if (unwrapped instanceof AbstractUnpooledSlicedByteBuf) {\n            // 获取视图 ByteBuf  相对于 原生 ByteBuf 的相关 index 偏移\n            // adjustment = 3\n            // unwrappedIndex = srcIndex + adjustment = 4\n            unwrappedIndex += ((AbstractUnpooledSlicedByteBuf) unwrapped).idx(0);\n            // 获取原生 ByteBuf\n            unwrapped = unwrapped.unwrap();\n        } else if (unwrapped instanceof PooledSlicedByteBuf) {\n            unwrappedIndex += ((PooledSlicedByteBuf) unwrapped).adjustment;\n            unwrapped = unwrapped.unwrap();\n        } else if (unwrapped instanceof DuplicatedByteBuf || unwrapped instanceof PooledDuplicatedByteBuf) {\n            unwrapped = unwrapped.unwrap();\n        }\n\n        return new Component(buf.order(ByteOrder.BIG_ENDIAN), srcIndex,\n                unwrapped.order(ByteOrder.BIG_ENDIAN), unwrappedIndex, offset, len, slice);\n    }\n")])])]),t("p",[e._v("由于当前的 CompositeByteBuf 还是空的，里面没有包含任何逻辑数据，当长度为 4 的 srcBuf 加入之后，CompositeByteBuf 就产生了 "),t("code",[e._v("[0 , 3]")]),e._v(" 这段逻辑数据范围，所以 srcBuf 所属 Component 的 offset = 0 , endOffset = 4 ，srcAdjustment = 1 ，adjustment = 4。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409191122367.webp",alt:"图片"}}),e._v("image.png")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("        Component(ByteBuf srcBuf, int srcOffset, ByteBuf buf, int bufOffset,\n                int offset, int len, ByteBuf slice) {\n            this.srcBuf = srcBuf;\n            // 用于将 CompositeByteBuf 的 index 转换为 srcBuf 的index\n            // 1 - 0 = 1\n            this.srcAdjustment = srcOffset - offset;\n            this.buf = buf;\n            // 用于将 CompositeByteBuf 的 index 转换为 buf 的index\n            // 4 - 0 = 4\n            this.adjustment = bufOffset - offset;\n            // CompositeByteBuf [offset , endOffset) 这段范围的字节存储在该 Component 中\n            //  0 \n            this.offset = offset;\n            // 下一个 Component 的 offset\n            // 4\n            this.endOffset = offset + len;\n        }\n")])])]),t("p",[e._v("当我们继续初始化下一个 Component 的时候，它的 Offset 其实就是这个 Component 的 endOffset 。后面的流程都是一样的了。")]),e._v(" "),t("h4",{attrs:{id:"_2-8-5-addcomponents0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-5-addcomponents0"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.8.5 addComponents0")])]),e._v(" "),t("p",[e._v("在我们清楚了以上背景知识之后，在看 addComponents0 方法的逻辑就很清晰了：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    private CompositeByteBuf addComponents0(boolean increaseWriterIndex,\n            final int cIndex, ByteBuf[] buffers, int arrOffset) {\n        // buffers 数组长度\n        final int len = buffers.length, \n        // 本次批量添加的 ByteBuf 个数\n        count = len - arrOffset;\n        // ci 表示从 components 数组的哪个索引位置处开始添加\n        // 这里先给一个初始值，后续 shiftComps 完成之后还会重新设置\n        int ci = Integer.MAX_VALUE;\n        try {\n            // cIndex >= 0 && cIndex <= componentCount\n            checkComponentIndex(cIndex);\n            // 为新添加进来的 ByteBuf 腾挪位置，以及增加 componentCount 计数\n            shiftComps(cIndex, count); // will increase componentCount\n            // 获取当前正在插入 Component 的 offset\n            int nextOffset = cIndex > 0 ? components[cIndex - 1].endOffset : 0;\n            for (ci = cIndex; arrOffset < len; arrOffset++, ci++) {\n                ByteBuf b = buffers[arrOffset];\n                if (b == null) {\n                    break;\n                }\n                // 将 ByteBuf 封装在 Component 中\n                Component c = newComponent(ensureAccessible(b), nextOffset);\n                components[ci] = c;\n                // 下一个 Component 的 Offset 是上一个 Component 的 endOffset\n                nextOffset = c.endOffset;\n            }\n            return this;\n        } finally {\n            // ci is now the index following the last successfully added component\n            // ci = componentCount 说明是一直按照顺序向后追加 component\n            // ci < componentCount 表示在 components 数组的中间插入新的 component\n            if (ci < componentCount) {\n                // 如果上面 for 循环完整的走完，ci = cIndex + count\n                if (ci < cIndex + count) {\n                    // 上面 for 循环中有 break 的情况出现或者有异常发生\n                    // ci < componentCount ，在上面的 shiftComps 中将会涉及到 component 移动，因为要腾出位置\n                    // 如果发生异常，则将后面没有加入 components 数组的 component 位置删除掉\n                    // [ci, cIndex + count) 这段位置要删除，因为在 ci-1 处已经发生异常，重新调整 components 数组\n                    removeCompRange(ci, cIndex + count);\n                    for (; arrOffset < len; ++arrOffset) {\n                        ReferenceCountUtil.safeRelease(buffers[arrOffset]);\n                    }\n                }\n                // （在中间插入的情况下）需要调整 ci 到 size -1 之间的 component 的相关 Offset\n                updateComponentOffsets(ci); // only need to do this here for components after the added ones\n            }\n            if (increaseWriterIndex && ci > cIndex && ci <= componentCount) {\n                // 本次添加的最后一个 components[ci - 1]\n                // 本次添加的第一个 components[cIndex]\n                // 最后一个 endOffset 减去第一个的 offset 就是本次添加的字节个数\n                writerIndex += components[ci - 1].endOffset - components[cIndex].offset;\n            }\n        }\n    }\n")])])]),t("p",[e._v("这里我们重点介绍下 "),t("code",[e._v("finally {}")]),e._v(" 代码块中的逻辑。首先 addComponents0 方法中的核心逻辑是先通过 shiftComps 方法为接下来新创建出来的 Component 腾挪位置，因为我们有可能是在原有 components 数组的中间位置插入。")]),e._v(" "),t("p",[e._v("然后会在一个 "),t("code",[e._v("for ()")]),e._v(" 循环中不停的将新创建的 Component 放置到 "),t("code",[e._v("components[ci]")]),e._v(" 位置上。")]),e._v(" "),t("p",[e._v("当跳出 for 循环进入 finally 代码块的时候，ci 的值恰恰就是最后一个成功加入 components 数组的 Component 下一个位置，如下图所示，假设 components[0] ， components[1] ，components[2]  是我们刚刚在 for 循环中插入的新值，那么 for 循环结束之后，ci 的值就是 3 。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("p",[e._v("如果 "),t("code",[e._v("ci = componentCount")]),e._v(" 这恰恰说明我们一直是在 components 数组的末尾进行插入，这种情况下各个 Component 实例中的 [offset , endOffset) 都是连续的不需要做任何调整。")]),e._v(" "),t("p",[e._v("但如果 "),t("code",[e._v("ci < componentCount")]),e._v(" 这就说明了我们是在原来 components 数组的中间位置处开始插入，下图中的 components[3] ，components[4] 是插入位置，当插入完成之后 ci 的值为 5。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("p",[e._v("这时候就需要重新调整 components[5]，components[6] 中的  "),t("code",[e._v("[offset , endOffset)")]),e._v(" 范围，因为 shiftComps 方法只负责帮你腾挪位置，不负责重新调整 "),t("code",[e._v("[offset , endOffset)")]),e._v(" 范围，当新的 Component 实例插入之后，原来彼此相邻的 Component 实例之间的 "),t("code",[e._v("[offset , endOffset)")]),e._v(" 就不连续了，所以这里需要重新调整。")]),e._v(" "),t("p",[e._v("比如下图中所展示的情况，原来的 components 数组包含五个 Component 实例，分别在 0 - 4 位置，它们之间原本的是连续的 "),t("code",[e._v("[offset , endOffset)")]),e._v("。")]),e._v(" "),t("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),t("p",[e._v("现在我们要在位置 3 ，4 处插入两个新的 Component 实例，所以原来的  components[3] ，components[4] 需要移动到  components[5] ，components[6] 的位置上，但 shiftComps 只负责移动而不负责重新调整它们的 "),t("code",[e._v("[offset , endOffset)")]),e._v("。")]),e._v(" "),t("p",[e._v("当新的 Component 实例插入之后，components[4]，components[5] ，components[6] 之间的  "),t("code",[e._v("[offset , endOffset)")]),e._v(" 就不连续了。所以需要通过 "),t("code",[e._v("updateComponentOffsets")]),e._v(" 方法重新调整。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    private void updateComponentOffsets(int cIndex) {\n        int size = componentCount;\n        if (size <= cIndex) {\n            return;\n        }\n        // 重新调整 components[5] ，components[6] 之间的 [offset , endOffset)\n        int nextIndex = cIndex > 0 ? components[cIndex - 1].endOffset : 0;\n        for (; cIndex < size; cIndex++) {\n            Component c = components[cIndex];\n            // 重新调整 Component 的 offset ， endOffset\n            c.reposition(nextIndex);\n            nextIndex = c.endOffset;\n        }\n    }\n\n     void reposition(int newOffset) {\n            int move = newOffset - offset;\n            endOffset += move;\n            srcAdjustment -= move;\n            adjustment -= move;\n            offset = newOffset;\n      }\n        \n")])])]),t("p",[e._v("以上介绍的是正常情况下的逻辑，如果在执行 for 循环的过程中出现了 break 或者发生了异常，那么 ci 的值一定是小于 "),t("code",[e._v("cIndex + count")]),e._v(" 的。什么意思呢 ？")]),e._v(" "),t("p",[e._v("比如我们要向一个 components 数组 "),t("code",[e._v("cIndex = 0")]),e._v(" 的位置插入 "),t("code",[e._v("count = 5")]),e._v(" 个 Component 实例，但是在插入第四个 Component 的时候，也就是在 components[3] 的位置处出现了 break 或者异常的情况，那么就会退出 for 循环来到这里的 finally 代码块。")]),e._v(" "),t("p",[e._v("此时的 ci 值为 3 ，cIndex + count 的值为 5，那么就说明出现了异常情况。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409191122096.webp",alt:"图片"}}),e._v("image.png")]),e._v(" "),t("p",[e._v("值得我们注意的是，components[3] 以及 components[4] 这两个位置是之前通过 shiftComps 方法腾挪出来的，由于异常情况的发生，这两个位置将不会放置任何 Component 实例。")]),e._v(" "),t("p",[e._v("这样一来 components 数组就出现了空洞，所以接下来我们还需要将 components[5] ， components[6] 位置上的 Component 实例重新移动回 components[3] 以及 components[4] 的位置上。")]),e._v(" "),t("p",[e._v("由于异常情况，那些 ByteBuf 数组中没有被添加进 CompositeByteBuf 的  ByteBuf 需要执行 release 。")]),e._v(" "),t("h4",{attrs:{id:"_2-8-6-consolidateifneeded"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-6-consolidateifneeded"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.8.6 consolidateIfNeeded")])]),e._v(" "),t("p",[e._v("到现在为止一个空的 CompositeByteBuf 就算被填充好了，但是这里有一个问题，就是 CompositeByteBuf 中所能包含的 Component 实例个数是受到 maxNumComponents 限制的。")]),e._v(" "),t("p",[e._v("我们回顾一下整个 addComponents 的过程，好像还没有一个地方对 Component 的个数做出限制，甚至在 shiftComps 方法中还会对 components 数组进行扩容。")]),e._v(" "),t("p",[e._v("那么这样一来，Component 的个数有很大可能会超过 maxNumComponents 的限制，如果当前 CompositeByteBuf 中包含的 component 个数已经超过了 maxNumComponents ，那么就需要在 "),t("code",[e._v("consolidate0")]),e._v(" 方法中，将所有的 component 合并。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    private void consolidateIfNeeded() {\n        int size = componentCount;\n        // 如果当前 component 的个数已经超过了 maxNumComponents，则将所有 component 合并成一个\n        if (size > maxNumComponents) {\n            consolidate0(0, size);\n        }\n    }\n")])])]),t("p",[e._v("在这里，Netty 会将当前 CompositeByteBuf 中包含的所有 Component 合并成一个更大的 Component。合并之后 ，CompositeByteBuf 中就只包含一个 Component 了。合并的核心逻辑如下：")]),e._v(" "),t("ol",[t("li",[e._v("根据当前  CompositeByteBuf 的 capacity 重新申请一个更大的 ByteBuf ，该  ByteBuf 需要容纳下 CompositeByteBuf 所能表示的所有字节。")]),e._v(" "),t("li",[e._v("将所有 Component 底层的 buf 中存储的内容全部转移到新的 ByteBuf 中，并释放原有 buf 的内存。")]),e._v(" "),t("li",[e._v("删除 Component 数组中所有的 Component。")]),e._v(" "),t("li",[e._v("根据新的 ByteBuf 创建一个新的 Component 实例，并放置在 components 数组的第一个位置上。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    private void consolidate0(int cIndex, int numComponents) {\n        if (numComponents <= 1) {\n            return;\n        }\n        // 将 [cIndex , endCIndex) 之间的 Components 合并成一个\n        final int endCIndex = cIndex + numComponents;\n        final int startOffset = cIndex != 0 ? components[cIndex].offset : 0;\n        // 计算合并范围内 Components 的存储的字节总数\n        final int capacity = components[endCIndex - 1].endOffset - startOffset;\n        // 重新申请一个新的 ByteBuf\n        final ByteBuf consolidated = allocBuffer(capacity);\n        // 将合并范围内的 Components 中的数据全部转移到新的 ByteBuf 中\n        for (int i = cIndex; i < endCIndex; i ++) {\n            components[i].transferTo(consolidated);\n        }\n        lastAccessed = null;\n        // 数据转移完成之后，将合并之前的这些 components 删除\n        removeCompRange(cIndex + 1, endCIndex);\n        // 将合并之后的新 Component 存储在 cIndex 位置处\n        components[cIndex] = newComponent(consolidated, 0);\n        if (cIndex != 0 || numComponents != componentCount) {\n            // 如果 cIndex 不是从 0 开始的，那么就更新 newComponent 的相关 offset\n            updateComponentOffsets(cIndex);\n        }\n    }\n")])])]),t("h4",{attrs:{id:"_2-8-7-compositebytebuf-的应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-7-compositebytebuf-的应用"}},[e._v("#")]),e._v(" "),t("strong",[e._v("2.8.7 CompositeByteBuf 的应用")])]),e._v(" "),t("p",[e._v("当我们在传输层采用 TCP 协议进行数据传输的时候，经常会遇到半包或者粘包的问题，我们从 socket 中读取出来的 ByteBuf 很大可能还构不成一个完整的包，这样一来，我们就需要将每次从 socket 中读取出来的 ByteBuf 在用户态缓存累加起来。")]),e._v(" "),t("p",[e._v("当累加起来的 ByteBuf 达到一个完整的数据包之后，我们在从这个被缓存的 ByteBuf 中读取字节，然后进行解码，最后将解码出来的对象沿着 pipeline 向后传递。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public abstract class ByteToMessageDecoder extends ChannelInboundHandlerAdapter {\n    // 缓存累加起来的 ByteBuf\n    ByteBuf cumulation;\n    // ByteBuf 的累加聚合器\n    private Cumulator cumulator = MERGE_CUMULATOR;\n    // 是否是第一次收包\n    private boolean first;\n\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n        if (msg instanceof ByteBuf) {\n            // 用于存储解码之后的对象\n            CodecOutputList out = CodecOutputList.newInstance();\n            try {\n                // 第一次收包\n                first = cumulation == null;\n                // 将新进来的 (ByteBuf) msg 与之前缓存的 cumulation 聚合累加起来\n                cumulation = cumulator.cumulate(ctx.alloc(),\n                        first ? Unpooled.EMPTY_BUFFER : cumulation, (ByteBuf) msg);\n                // 解码\n                callDecode(ctx, cumulation, out);\n            } catch (DecoderException e) {\n                throw e;\n            } catch (Exception e) {\n                throw new DecoderException(e);\n            } finally {\n                    ........ 省略 ........\n                    // 解码成功之后，就将解码出来的对象沿着 pipeline 向后传播\n                    fireChannelRead(ctx, out, size); \n            }\n        } else {\n            ctx.fireChannelRead(msg);\n        }\n    }\n}\n")])])]),t("p",[e._v("Netty 为此专门定义了一个 Cumulator 接口，用于将每次从 socket 中读取到的 ByteBuf 聚合累积起来。参数 alloc 是一个 ByteBuf 分配器，用于在聚合的过程中如果涉及到扩容，合并等操作可以用它来申请内存。")]),e._v(" "),t("p",[e._v("参数 cumulation 就是之前缓存起来的 ByteBuf，当第一次收包的时候，这里的 cumulation 就是一个空的 ByteBuf —— Unpooled.EMPTY_BUFFER 。")]),e._v(" "),t("p",[e._v("参数 in 则是本次刚刚从 socket 中读取出来的 ByteBuf，可能是一个半包，Cumulator 的作用就是将新读取出来的 ByteBuf （in），累加合并到之前缓存的 ByteBuf （cumulation）中。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    public interface Cumulator {\n        ByteBuf cumulate(ByteBufAllocator alloc, ByteBuf cumulation, ByteBuf in);\n    }\n")])])]),t("p",[e._v("Netty 提供了 Cumulator 接口的两个实现，一个是 MERGE_CUMULATOR ， 另一个是 COMPOSITE_CUMULATOR 。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public abstract class ByteToMessageDecoder extends ChannelInboundHandlerAdapter {\n\n    public static final Cumulator MERGE_CUMULATOR\n\n    public static final Cumulator COMPOSITE_CUMULATOR\n}\n")])])]),t("p",[e._v("MERGE_CUMULATOR 是 Netty 默认的 Cumulator ，也是传统意义上最为普遍的一种聚合 ByteBuf 的实现，它的核心思想是在聚合多个 ByteBuf 的时候，首先会申请一块更大的内存，然后将这些需要被聚合的 ByteBuf 中的内容全部拷贝到新的 ByteBuf 中。然后释放掉原来的 ByteBuf 。")]),e._v(" "),t("p",[e._v("效果就是将多个 ByteBuf 重新聚合成一个更大的 ByteBuf ，但这种方式涉及到内存申请以及内存拷贝的开销，优势就是内存都是连续的，读取速度快。")]),e._v(" "),t("p",[e._v("另外一种实现就是 COMPOSITE_CUMULATOR ，也是本小节的主题，它的核心思想是将多个 ByteBuf 聚合到一个 CompositeByteBuf 中，不需要额外申请内存，更不需要内存的拷贝。")]),e._v(" "),t("p",[e._v("但由于 CompositeByteBuf 只是逻辑上的一个视图 ByteBuf，其底层依赖的内存还是原来的那些 ByteBuf，所以就导致了 CompositeByteBuf 中的内存不是连续的，在加上 CompositeByteBuf 的相关 index 设计的比较复杂，所以在读取速度方面可能会比 MERGE_CUMULATOR 更慢一点，所以我们需要根据自己的场景来权衡考虑，灵活选择。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    public static final Cumulator COMPOSITE_CUMULATOR = new Cumulator() {\n        @Override\n        public ByteBuf cumulate(ByteBufAllocator alloc, ByteBuf cumulation, ByteBuf in) {\n            if (!cumulation.isReadable()) {\n                // 之前缓存的已经解码完毕，这里将它释放，并从 in 开始重新累加。\n                cumulation.release();\n                return in;\n            }\n            CompositeByteBuf composite = null;\n            try {\n                // cumulation 是一个 CompositeByteBuf，说明 cumulation 之前是一个被聚合过的 ByteBuf\n                if (cumulation instanceof CompositeByteBuf && cumulation.refCnt() == 1) {\n                    composite = (CompositeByteBuf) cumulation;\n                    // 这里需要保证 CompositeByteBuf 的 writerIndex 与 capacity 相等\n                    // 因为我们需要每次在 CompositeByteBuf 的末尾聚合添加新的 ByteBuf\n                    if (composite.writerIndex() != composite.capacity()) {\n                        composite.capacity(composite.writerIndex());\n                    }\n                } else {\n                    // 如果 cumulation 不是 CompositeByteBuf，只是一个普通的 ByteBuf\n                    // 说明 cumulation 之前还没有被聚合过，这里是第一次聚合，所以需要先创建一个空的 CompositeByteBuf\n                    // 然后将 cumulation 添加到 CompositeByteBuf 中\n                    composite = alloc.compositeBuffer(Integer.MAX_VALUE).addFlattenedComponents(true, cumulation);\n                }\n                // 将本次新接收到的 ByteBuf（in）添加累积到 CompositeByteBuf 中\n                composite.addFlattenedComponents(true, in);\n                in = null;\n                return composite;\n            } finally {\n                 ........ 省略聚合失败的处理 ..........\n            }\n        }\n    };\n")])])]),t("h2",{attrs:{id:"_3-heap-or-direct"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-heap-or-direct"}},[e._v("#")]),e._v(" "),t("strong",[e._v("3. Heap or Direct")])]),e._v(" "),t("p",[e._v("在前面的几个小节中，我们讨论了很多 ByteBuf 的设计细节，接下来让我们跳出这些细节，重新站在全局的视角下来看一下 ByteBuf 的总体设计。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409191121381.webp",alt:"图片"}}),e._v("image.png")]),e._v(" "),t("p",[e._v("在 ByteBuf 的整个设计体系中，Netty 从 ByteBuf 内存布局的角度上，将整个体系分为了 HeapByteBuf 和 DirectByteBuf 两个大类。Netty 提供了 "),t("code",[e._v("PlatformDependent.directBufferPreferred()")]),e._v("方法来指定在默认情况下，是否偏向于分配 Direct Memory。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public final class PlatformDependent {\n    // 是否偏向于分配 Direct Memory\n    private static final boolean DIRECT_BUFFER_PREFERRED;\n\n    public static boolean directBufferPreferred() {\n        return DIRECT_BUFFER_PREFERRED;\n    }\n}\n")])])]),t("p",[e._v("要想使得 DIRECT_BUFFER_PREFERRED 为 true ，必须同时满足以下两个条件：")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("-Dio.netty.noPreferDirect")]),e._v(" 参数必须指定为 false（默认）。")]),e._v(" "),t("li",[e._v("CLEANER 不为 NULL , 也就是需要 JDK 中包含有效的 CLEANER 机制。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' static {\n        DIRECT_BUFFER_PREFERRED = CLEANER != NOOP\n                                  && !SystemPropertyUtil.getBoolean("io.netty.noPreferDirect", false);\n        if (logger.isDebugEnabled()) {\n            logger.debug("-Dio.netty.noPreferDirect: {}", !DIRECT_BUFFER_PREFERRED);\n        }\n }\n')])])]),t("p",[e._v("如果是安卓平台，那么 CLEANER 直接就是 NOOP，不会做任何判断，默认情况下直接走 Heap Memory , 除非特殊指定要走 Direct Memory。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("        if (!isAndroid()) {\n            if (javaVersion() >= 9) {\n                // 检查 sun.misc.Unsafe 类中是否包含有效的 invokeCleaner 方法\n                CLEANER = CleanerJava9.isSupported() ? new CleanerJava9() : NOOP;\n            } else {\n                // 检查 java.nio.ByteBuffer 中是否包含了 cleaner 字段\n                CLEANER = CleanerJava6.isSupported() ? new CleanerJava6() : NOOP;\n            }\n        } else {\n            CLEANER = NOOP;\n        }\n")])])]),t("p",[e._v("如果是 JDK 9 以上的版本，Netty 会检查是否可以通过  "),t("code",[e._v("sun.misc.Unsafe")]),e._v(" 的 "),t("code",[e._v("invokeCleaner")]),e._v(" 方法正确执行 DirectBuffer 的 Cleaner，如果执行过程中发生异常，那么 CLEANER 就为 NOOP，Netty 在默认情况下就会走 Heap Memory。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public final class Unsafe {\n    public void invokeCleaner(java.nio.ByteBuffer directBuffer) {\n        if (!directBuffer.isDirect())\n            throw new IllegalArgumentException("buffer is non-direct");\n\n        theInternalUnsafe.invokeCleaner(directBuffer);\n    }\n}\n')])])]),t("p",[e._v("如果是 JDK 9 以下的版本，Netty 就会通过反射的方式先去获取 DirectByteBuffer 的 cleaner 字段，如果 cleaner 为 null 或者在执行 clean 方法的过程中出现了异常，那么 CLEANER 就为 NOOP，Netty 在默认情况下就会走 Heap Memory。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class DirectByteBuffer extends MappedByteBuffer implements DirectBuffer\n{\n    private final Cleaner cleaner;\n\n    DirectByteBuffer(int cap) {                   // package-private\n\n        ...... 省略 .....   \n\n        base = UNSAFE.allocateMemory(size);\n        cleaner = Cleaner.create(this, new Deallocator(base, size, cap));\n    }\n}\n")])])]),t("p",[e._v("如果 "),t("code",[e._v("PlatformDependent.directBufferPreferred()")]),e._v(" 方法返回 true ,那么 ByteBufAllocator 接下来在分配内存的时候，默认情况下就会分配  directBuffer。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public final class UnpooledByteBufAllocator  extends AbstractByteBufAllocator {\n    // ByteBuf 分配器\n    public static final UnpooledByteBufAllocator DEFAULT =\n            new UnpooledByteBufAllocator(PlatformDependent.directBufferPreferred());\n}\n\npublic abstract class AbstractByteBufAllocator implements ByteBufAllocator {\n    // 是否默认分配 directBuffer\n    private final boolean directByDefault;\n\n    protected AbstractByteBufAllocator(boolean preferDirect) {\n        directByDefault = preferDirect && PlatformDependent.hasUnsafe();\n    }\n\n    @Override\n    public ByteBuf buffer() {\n        if (directByDefault) {\n            return directBuffer();\n        }\n        return heapBuffer();\n    }\n}\n")])])]),t("p",[e._v("一般情况下，JDK 都会包含有效的 CLEANER 机制，所以我们完全可以仅是通过 "),t("code",[e._v("-Dio.netty.noPreferDirect")]),e._v(" （默认 false）来控制 Netty 默认情况下走  Direct Memory。")]),e._v(" "),t("p",[e._v("但如果是安卓平台，那么无论  "),t("code",[e._v("-Dio.netty.noPreferDirect")]),e._v(" 如何设置，Netty 默认情况下都会走  Heap Memory 。")]),e._v(" "),t("h2",{attrs:{id:"_4-cleaner-or-nocleaner"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-cleaner-or-nocleaner"}},[e._v("#")]),e._v(" "),t("strong",[e._v("4. Cleaner or NoCleaner")])]),e._v(" "),t("p",[e._v("站在内存回收的角度，Netty 将 ByteBuf 分为了带有 Cleaner 的 DirectByteBuf 和没有 Cleaner 的 DirectByteBuf 两个大类。在之前的文章"),t("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg2MzU3Mjc3Ng==&mid=2247489586&idx=1&sn=4306549c480f668458ab4df0d4b2ea47&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("《以 ZGC 为例，谈一谈 JVM 是如何实现 Reference 语义的》"),t("OutboundLink")],1),e._v(" 中的第三小节，笔者详细的介绍过，JVM  如何利用 Cleaner 机制来回收 DirectByteBuffer 背后的 Native Memory 。")]),e._v(" "),t("p",[e._v("而 Cleaner 回收 DirectByteBuffer 的 Native Memory 需要依赖 GC 的发生，当一个 DirectByteBuffer 没有任何强引用或者软引用的时候，如果此时发生 GC , Cleaner 才会去回收 Native Memory。如果很久都没发生 GC ,那么这些 DirectByteBuffer 所引用的 Native Memory 将一直不会释放。")]),e._v(" "),t("p",[e._v("所以仅仅是依赖 Cleaner 来释放 Native Memory 是有一定延迟的，极端情况下，如果一直等不来 GC ,很有可能就会发生 OOM 。")]),e._v(" "),t("p",[e._v("而 Netty 的 ByteBuf 设计相当于是对 NIO ByteBuffer 的一种完善扩展，其底层其实都会依赖一个 JDK 的 ByteBuffer。比如，前面介绍的 UnpooledDirectByteBuf ， UnpooledUnsafeDirectByteBuf 其底层依赖的就是 JDK  DirectByteBuffer , 而这个 DirectByteBuffer 就是带有 Cleaner 的 ByteBuf 。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class UnpooledDirectByteBuf extends AbstractReferenceCountedByteBuf {\n    // 底层依赖的 JDK DirectByteBuffer\n    ByteBuffer buffer;\n\n    public UnpooledDirectByteBuf(ByteBufAllocator alloc, int initialCapacity, int maxCapacity) {\n        // 创建 DirectByteBuffer\n        setByteBuffer(allocateDirect(initialCapacity), false);\n    }\n\n   protected ByteBuffer allocateDirect(int initialCapacity) {\n        return ByteBuffer.allocateDirect(initialCapacity);\n    }\npublic class UnpooledUnsafeDirectByteBuf extends UnpooledDirectByteBuf {\n    // 底层依赖的 JDK DirectByteBuffer 的内存地址\n    long memoryAddress;\n\n\n    public UnpooledUnsafeDirectByteBuf(ByteBufAllocator alloc, int initialCapacity, int maxCapacity) {\n         // 调用父类 UnpooledDirectByteBuf 构建函数创建底层依赖的 JDK DirectByteBuffer \n        super(alloc, initialCapacity, maxCapacity);\n    }\n\n    @Override\n    final void setByteBuffer(ByteBuffer buffer, boolean tryFree) {\n        super.setByteBuffer(buffer, tryFree);\n        // 获取 JDK DirectByteBuffer 的内存地址\n        memoryAddress = PlatformDependent.directBufferAddress(buffer);\n    }\n")])])]),t("p",[e._v("在 JDK NIO  中，凡是通过 "),t("code",[e._v("ByteBuffer.allocateDirect")]),e._v(" 方法申请到 DirectByteBuffer 都是带有 Cleaer 的。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public abstract class ByteBuffer {\n  public static ByteBuffer allocateDirect(int capacity) {\n        return new DirectByteBuffer(capacity);\n    }\n}\n\nclass DirectByteBuffer extends MappedByteBuffer implements DirectBuffer\n{\n    private final Cleaner cleaner;\n\n    DirectByteBuffer(int cap) {                   // package-private\n\n        ...... 省略 .....   \n        // 通过该构造函数申请到的 Direct Memory 会受到 -XX:MaxDirectMemorySize 参数的限制\n        Bits.reserveMemory(size, cap);   \n        // 底层调用 malloc 申请内存\n        base = UNSAFE.allocateMemory(size);\n\n        ...... 省略 .....   \n        // 创建 Cleaner\n        cleaner = Cleaner.create(this, new Deallocator(base, size, cap));\n    }\n}\n")])])]),t("p",[t("strong",[e._v("而带有 Cleaner 的 DirectByteBuffer 背后所能引用的 Direct Memory 是受到 "),t("code",[e._v("-XX:MaxDirectMemorySize")]),e._v(" JVM 参数限制的")]),e._v("。由于 UnpooledDirectByteBuf 以及 UnpooledUnsafeDirectByteBuf 都带有 Cleaner，所以当他们在系统中没有任何强引用或者软引用的时候，如果发生 GC , Cleaner 就会释放他们的 Direct Memory 。")]),e._v(" "),t("p",[e._v("由于 Cleaner 执行会依赖 GC , 而 GC 的发生往往不那么及时，会有一定的延时，所以 Netty 为了可以及时的释放  Direct Memory ，往往选择不依赖 JDK 的 Cleaner 机制，手动进行释放。所以就有了 NoCleaner 类型的 DirectByteBuf —— UnpooledUnsafeNoCleanerDirectByteBuf 。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class UnpooledUnsafeNoCleanerDirectByteBuf extends UnpooledUnsafeDirectByteBuf {\n\n    @Override\n    protected ByteBuffer allocateDirect(int initialCapacity) {\n        // 创建没有 Cleaner 的 JDK DirectByteBuffer \n        return PlatformDependent.allocateDirectNoCleaner(initialCapacity);\n    }\n\n    @Override\n    protected void freeDirect(ByteBuffer buffer) {\n        // 既然没有了 Cleaner ， 所以 Netty 要手动进行释放\n        PlatformDependent.freeDirectNoCleaner(buffer);\n    }\n}\n")])])]),t("p",[e._v("UnpooledUnsafeNoCleanerDirectByteBuf 的底层同样也会依赖一个 JDK  DirectByteBuffer , 但和之前不同的是，这里的 DirectByteBuffer 是不带有 cleaner 的。")]),e._v(" "),t("p",[e._v("我们通过 JNI 来调用 "),t("code",[e._v("DirectByteBuffer(long addr, int cap)")]),e._v(" 构造函数创建出来的 JDK  DirectByteBuffer 都是没有 cleaner 的。"),t("strong",[e._v("但通过这种方式创建出来的 DirectByteBuffer 背后引用的 Native Memory 是不会受到 "),t("code",[e._v("-XX:MaxDirectMemorySize")]),e._v(" JVM 参数限制的")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class DirectByteBuffer {\n    // Invoked only by JNI: NewDirectByteBuffer(void*, long)\n    private DirectByteBuffer(long addr, int cap) {\n        super(-1, 0, cap, cap, null);\n        address = addr;\n        // cleaner 为 null\n        cleaner = null;\n    }\n}\n")])])]),t("p",[e._v("既然没有了 cleaner ， 所以 Netty 就无法依赖 GC 来释放 Direct Memory 了，这就要求 Netty 必须手动调用 "),t("code",[e._v("freeDirect")]),e._v("方法及时地释放 Direct Memory。")]),e._v(" "),t("blockquote",[t("p",[e._v("事实上，无论 Netty 中的 DirectByteBuf 有没有 Cleaner， Netty 都会选择手动的进行释放，目的就是为了避免 GC 的延迟 ， 从而及时的释放 Direct Memory。")])]),e._v(" "),t("p",[e._v("那么 Netty 中的 DirectByteBuf 在什么情况下带有 Cleaner，又在什么情况下不带 Cleaner 呢 ？我们可以通过 "),t("code",[e._v("PlatformDependent.useDirectBufferNoCleaner")]),e._v(" 方法的返回值进行判断：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public final class PlatformDependent {\n    // Netty 的 DirectByteBuf 是否带有 Cleaner\n    private static final boolean USE_DIRECT_BUFFER_NO_CLEANER;\n    public static boolean useDirectBufferNoCleaner() {\n        return USE_DIRECT_BUFFER_NO_CLEANER;\n    }\n}\n")])])]),t("ul",[t("li",[e._v("USE_DIRECT_BUFFER_NO_CLEANER = TRUE 表示 Netty 创建出来的 DirectByteBuf 不带有 Cleaner 。  Direct Memory 的用量不会受到 JVM 参数 -"),t("code",[e._v("XX:MaxDirectMemorySize")]),e._v(" 的限制。")]),e._v(" "),t("li",[e._v("USE_DIRECT_BUFFER_NO_CLEANER = FALSE 表示 Netty 创建出来的 DirectByteBuf 带有 Cleaner 。  Direct Memory 的用量会受到 JVM 参数 -"),t("code",[e._v("XX:MaxDirectMemorySize")]),e._v(" 的限制。")])]),e._v(" "),t("p",[e._v("我们可以通过 "),t("code",[e._v("-Dio.netty.maxDirectMemory")]),e._v(" 来设置 USE_DIRECT_BUFFER_NO_CLEANER 的值，除此之外，该参数还可以指定在 Netty 层面上可以使用的最大 DirectMemory 用量。")]),e._v(" "),t("p",[t("code",[e._v("io.netty.maxDirectMemory = 0")]),e._v(" 那么 USE_DIRECT_BUFFER_NO_CLEANER 就为 FALSE , 表示在 Netty 层面创建出来的 DirectByteBuf 都是带有 Cleaner 的，"),t("strong",[e._v("这种情况下 Netty 并不会限制 maxDirectMemory 的用量，因为限制了也没用，具体能用多少 maxDirectMemory，还是由 JVM 参数 "),t("code",[e._v("-XX:MaxDirectMemorySize")]),e._v(" 决定的")]),e._v("。")]),e._v(" "),t("p",[t("code",[e._v("io.netty.maxDirectMemory < 0")]),e._v(" ，默认为 -1，也就是在默认情况下 USE_DIRECT_BUFFER_NO_CLEANER 为 TRUE , 创建出来的 DirectByteBuf 都是不带 Cleaner 的。由于在这种情况下 maxDirectMemory 的用量并不会受到 JVM 参数 "),t("code",[e._v("-XX:MaxDirectMemorySize")]),e._v(" 的限制，所以在 Netty 层面上必须限制 maxDirectMemory 的用量，默认值就是  "),t("code",[e._v("-XX:MaxDirectMemorySize")]),e._v(" 指定的值。")]),e._v(" "),t("p",[t("strong",[e._v("这里需要特别注意的是")]),e._v("，Netty 层面对于 maxDirectMemory 的容量限制和 JVM 层面对于 maxDirectMemory 的容量限制是单独分别计算的，互不影响。因此站在 JVM 进程的角度来说，总体 maxDirectMemory 的用量是 "),t("code",[e._v("-XX:MaxDirectMemorySize")]),e._v(" 的两倍。")]),e._v(" "),t("p",[t("code",[e._v("io.netty.maxDirectMemory > 0")]),e._v(" 的情况和小于 0 的情况一样，唯一不同的是 Netty 层面的 maxDirectMemory 用量是专门由  "),t("code",[e._v("-Dio.netty.maxDirectMemory")]),e._v(" 参数指定，仍然独立于 JVM 层面的 maxDirectMemory 限制之外单独计算。")]),e._v(" "),t("p",[t("strong",[e._v("所以从这个层面来说，Netty 设计 NoCleaner 类型的 DirectByteBuf 的另外一个目的就是为了突破 JVM 对于 maxDirectMemory 用量的限制")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public final class PlatformDependent {\n    // Netty 层面  Direct Memory 的用量统计\n    // 为 NULL 表示在 Netty 层面不进行特殊限制，完全由 JVM 进行限制 Direct Memory 的用量\n    private static final AtomicLong DIRECT_MEMORY_COUNTER;\n    // Netty 层面 Direct Memory 的最大用量\n    private static final long DIRECT_MEMORY_LIMIT;\n    // JVM 指定的 -XX:MaxDirectMemorySize 最大堆外内存\n    private static final long MAX_DIRECT_MEMORY = maxDirectMemory0();\n\n    static {\n        long maxDirectMemory = SystemPropertyUtil.getLong("io.netty.maxDirectMemory", -1);\n\n        if (maxDirectMemory == 0 || !hasUnsafe() || !PlatformDependent0.hasDirectBufferNoCleanerConstructor()) {\n            // maxDirectMemory = 0 表示后续创建的 DirectBuffer 是带有 Cleaner 的，Netty 自己不会强制限定 maxDirectMemory 的用量，完全交给 JDK 的 maxDirectMemory 来限制\n            // 因为 Netty 限制了也没用，其底层依然依赖的是 JDK  DirectBuffer（Cleaner），JDK 会限制 maxDirectMemory 的用量\n            // 在没有 Unsafe 的情况下，那么就必须使用 Cleaner，因为如果不使用 Cleaner 的话，又没有 Unsafe，我们就无法释放 Native Memory 了\n            // 如果 JDK 本身不包含创建 NoCleaner DirectBuffer 的构造函数 —— DirectByteBuffer(long, int)，那么自然只能使用 Cleaner\n            USE_DIRECT_BUFFER_NO_CLEANER = false;\n            // Netty 自身不会统计 Direct Memory 的用量，完全交给 JDK 来统计\n            DIRECT_MEMORY_COUNTER = null;\n        } else {\n            USE_DIRECT_BUFFER_NO_CLEANER = true;\n            if (maxDirectMemory < 0) {\n                // maxDirectMemory < 0 (默认 -1) 后续创建 NoCleaner DirectBuffer\n                // Netty 层面会单独限制 maxDirectMemory 用量，maxDirectMemory 的值与 -XX:MaxDirectMemorySize 的值相同\n                // 因为 JDK 不会统计和限制 NoCleaner DirectBuffer 的用量\n                // 注意，这里 Netty 的 maxDirectMemory 和 JDK 的 maxDirectMemory 是分别单独统计的\n                // 在 JVM 进程的角度来说，整体 maxDirectMemory 的用量是 -XX:MaxDirectMemorySize 的两倍（Netty用的和 JDK 用的之和）\n                maxDirectMemory = MAX_DIRECT_MEMORY;\n                if (maxDirectMemory <= 0) {\n                    DIRECT_MEMORY_COUNTER = null;\n                } else {\n                    // 统计 Netty DirectMemory 的用量\n                    DIRECT_MEMORY_COUNTER = new AtomicLong();\n                }\n            } else {\n                // maxDirectMemory > 0 后续创建 NoCleaner DirectBuffer,Netty 层面的 maxDirectMemory 就是 io.netty.maxDirectMemory 指定的值\n                DIRECT_MEMORY_COUNTER = new AtomicLong();\n            }\n        }\n        logger.debug("-Dio.netty.maxDirectMemory: {} bytes", maxDirectMemory);\n        DIRECT_MEMORY_LIMIT = maxDirectMemory >= 1 ? maxDirectMemory : MAX_DIRECT_MEMORY;\n    }  \n}\n')])])]),t("p",[e._v("当 Netty 层面的 direct memory 用量超过了 "),t("code",[e._v("-Dio.netty.maxDirectMemory")]),e._v(" 参数指定的值时，那么就会抛出 "),t("code",[e._v("OutOfDirectMemoryError")]),e._v(" ，分配 DirectByteBuf 将会失败。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    private static void incrementMemoryCounter(int capacity) {\n        if (DIRECT_MEMORY_COUNTER != null) {\n            long newUsedMemory = DIRECT_MEMORY_COUNTER.addAndGet(capacity);\n            if (newUsedMemory > DIRECT_MEMORY_LIMIT) {\n                DIRECT_MEMORY_COUNTER.addAndGet(-capacity);\n                throw new OutOfDirectMemoryError("failed to allocate " + capacity\n                        + " byte(s) of direct memory (used: " + (newUsedMemory - capacity)\n                        + ", max: " + DIRECT_MEMORY_LIMIT + \')\');\n            }\n        }\n    }\n')])])]),t("h2",{attrs:{id:"_5-unsafe-or-nounsafe"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-unsafe-or-nounsafe"}},[e._v("#")]),e._v(" "),t("strong",[e._v("5. Unsafe or NoUnsafe")])]),e._v(" "),t("p",[e._v("站在内存访问方式的角度上来说 ， Netty 又会将 ByteBuf 分为了 Unsafe 和 NoUnsafe 两个大类，其中 NoUnsafe 的内存访问方式是依赖底层的 JDK ByteBuffer，对于 Netty ByteBuf 的任何操作最终都是会代理给底层 JDK 的 ByteBuffer。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class UnpooledDirectByteBuf extends AbstractReferenceCountedByteBuf {\n    // 底层依赖的 JDK DirectByteBuffer\n    ByteBuffer buffer;\n\n   @Override\n    protected byte _getByte(int index) {\n        return buffer.get(index);\n    }\n\n    @Override\n    protected void _setByte(int index, int value) {\n        buffer.put(index, (byte) value);\n    }\n}\n")])])]),t("p",[e._v("而 Unsafe 的内存访问方式则是通过 "),t("code",[e._v("sun.misc.Unsafe")]),e._v(" 类中提供的众多 low-level direct buffer access API 来对内存地址直接进行访问，由于是脱离 JVM 相关规范直接对内存地址进行访问，所以我们在调用 Unsafe 相关方法的时候需要考虑 JVM 以及 OS 的各种细节，一不小心就会踩坑出错，所以它是一种不安全的访问方式，但是足够灵活，高效。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class UnpooledUnsafeDirectByteBuf extends UnpooledDirectByteBuf {\n    // 底层依赖的 JDK DirectByteBuffer 的内存地址\n    long memoryAddress;\n\n    @Override\n    protected byte _getByte(int index) {\n        return UnsafeByteBufUtil.getByte(addr(index));\n    }\n\n   final long addr(int index) {\n        // 直接通过内存地址进行访问\n        return memoryAddress + index;\n    }\n\n    @Override\n    protected void _setByte(int index, int value) {\n        UnsafeByteBufUtil.setByte(addr(index), value);\n    }\n\n}\n")])])]),t("p",[e._v("Netty 提供了 "),t("code",[e._v("-Dio.netty.noUnsafe")]),e._v(" 参数来让我们决定是否采用 Unsafe 的内存访问方式，默认值是 false , 表示 Netty 默认开启 Unsafe 访问方式。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('final class PlatformDependent0 {\n    // 是否明确禁用 Unsafe，null 表示开启  Unsafe\n    private static final Throwable EXPLICIT_NO_UNSAFE_CAUSE = explicitNoUnsafeCause0();\n\n    private static Throwable explicitNoUnsafeCause0() {\n        final boolean noUnsafe = SystemPropertyUtil.getBoolean("io.netty.noUnsafe", false);\n        logger.debug("-Dio.netty.noUnsafe: {}", noUnsafe);\n\n        if (noUnsafe) {\n            logger.debug("sun.misc.Unsafe: unavailable (io.netty.noUnsafe)");\n            return new UnsupportedOperationException("sun.misc.Unsafe: unavailable (io.netty.noUnsafe)");\n        }\n\n        return null;\n    }\n}\n')])])]),t("p",[e._v("在确认开启了 Unsafe 方式之后，我们就需要近一步确认在当前 JRE 的 classpath 下是否存在 "),t("code",[e._v("sun.misc.Unsafe")]),e._v(" 类，是否能通过反射的方式获取到 Unsafe 实例 —— theUnsafe 。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public final class Unsafe {\n    // Unsafe 实例\n    private static final Unsafe theUnsafe = new Unsafe();\n}\nfinal class PlatformDependent0 {\n    // 验证 Unsafe 是否可用，null 表示 Unsafe 是可用状态\n    private static final Throwable UNSAFE_UNAVAILABILITY_CAUSE;\n    static {\n           // 尝试通过反射的方式拿到 theUnsafe 实例\n           final Object maybeUnsafe = AccessController.doPrivileged(new PrivilegedAction<Object>() {\n                @Override\n                public Object run() {\n                    try {\n                        final Field unsafeField = Unsafe.class.getDeclaredField("theUnsafe");\n                        Throwable cause = ReflectionUtil.trySetAccessible(unsafeField, false);\n                        if (cause != null) {\n                            return cause;\n                        }\n                        // the unsafe instance\n                        return unsafeField.get(null);\n                    } catch (NoSuchFieldException e) {\n                        return e;\n                    } catch (SecurityException e) {\n                        return e;\n                    } catch (IllegalAccessException e) {\n                        return e;\n                    } catch (NoClassDefFoundError e) {\n                        // Also catch NoClassDefFoundError in case someone uses for example OSGI and it made\n                        // Unsafe unloadable.\n                        return e;\n                    }\n                }\n            });\n    }\n}\n')])])]),t("p",[e._v("在获取到 Unsafe 实例之后，我们还需要检查 Unsafe 中是否包含所有 Netty 用到的 low-level direct buffer access API ，确保这些 API 可以正常有效的运行。比如，是否包含 "),t("code",[e._v("copyMemory")]),e._v(" 方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public final class Unsafe {\n    @ForceInline\n    public void copyMemory(Object srcBase, long srcOffset,\n                           Object destBase, long destOffset,\n                           long bytes) {\n        theInternalUnsafe.copyMemory(srcBase, srcOffset, destBase, destOffset, bytes);\n    }\n}\n")])])]),t("p",[e._v("是否可以通过 Unsafe 访问到 NIO Buffer 的 address 字段，因为后续我们需要直接操作内存地址。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public abstract class Buffer {\n    // 内存地址\n    long address;\n}\n")])])]),t("p",[e._v("在整个过程中如果发生任何异常，则表示在当前 classpath 下，不存在 "),t("code",[e._v("sun.misc.Unsafe")]),e._v(" 类或者是由于不同版本 JDK 的设计，Unsafe 中没有 Netty 所需要的一些必要的访存 API 。这样一来我们就无法使用 Unsafe，内存的访问方式就需要回退到 NoUnsafe。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('            if (maybeUnsafe instanceof Throwable) {\n                unsafe = null;\n                unsafeUnavailabilityCause = (Throwable) maybeUnsafe;\n                logger.debug("sun.misc.Unsafe.theUnsafe: unavailable", (Throwable) maybeUnsafe);\n            } else {\n                unsafe = (Unsafe) maybeUnsafe;\n                logger.debug("sun.misc.Unsafe.theUnsafe: available");\n            }\n            // 为 null 表示 Unsafe 可用\n            UNSAFE_UNAVAILABILITY_CAUSE = unsafeUnavailabilityCause;\n            UNSAFE = unsafe;\n')])])]),t("p",[e._v("如果在整个过程中没有发生任何异常，我们获取到了一个有效的 UNSAFE 实例，那么后续将正式开启 Unsafe 的内存访问方式。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("final class PlatformDependent0 {\n    static boolean hasUnsafe() {\n        return UNSAFE != null;\n    }\n}\n")])])]),t("p",[e._v("完整的 "),t("code",[e._v("hasUnsafe()")]),e._v(" 判断逻辑如下：")]),e._v(" "),t("ol",[t("li",[e._v("如果当前平台是安卓或者 .NET ，则不能开启 Unsafe，因为这些平台并不包含 "),t("code",[e._v("sun.misc.Unsafe")]),e._v(" 类。")]),e._v(" "),t("li",[t("code",[e._v("-Dio.netty.noUnsafe")]),e._v(" 参数需要设置为 false （默认开启）。")])]),e._v(" "),t("p",[e._v("3.. 当前 classpath 下是否包含有效的 "),t("code",[e._v("sun.misc.Unsafe")]),e._v(" 类。")]),e._v(" "),t("ol",[t("li",[e._v("Unsafe 实例需要包含必要的访存 API 。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public final class PlatformDependent {\n    private static final Throwable UNSAFE_UNAVAILABILITY_CAUSE = unsafeUnavailabilityCause0();\n\n    public static boolean hasUnsafe() {\n        return UNSAFE_UNAVAILABILITY_CAUSE == null;\n    }\n    private static Throwable unsafeUnavailabilityCause0() {\n        if (isAndroid()) {\n            logger.debug("sun.misc.Unsafe: unavailable (Android)");\n            return new UnsupportedOperationException("sun.misc.Unsafe: unavailable (Android)");\n        }\n\n        if (isIkvmDotNet()) {\n            logger.debug("sun.misc.Unsafe: unavailable (IKVM.NET)");\n            return new UnsupportedOperationException("sun.misc.Unsafe: unavailable (IKVM.NET)");\n        }\n\n        Throwable cause = PlatformDependent0.getUnsafeUnavailabilityCause();\n        if (cause != null) {\n            return cause;\n        }\n\n        try {\n            boolean hasUnsafe = PlatformDependent0.hasUnsafe();\n            logger.debug("sun.misc.Unsafe: {}", hasUnsafe ? "available" : "unavailable");\n            return hasUnsafe ? null : PlatformDependent0.getUnsafeUnavailabilityCause();\n        } catch (Throwable t) {\n            logger.trace("Could not determine if Unsafe is available", t);\n            // Probably failed to initialize PlatformDependent0.\n            return new UnsupportedOperationException("Could not determine if Unsafe is available", t);\n        }\n    }\n}\n')])])]),t("p",[e._v("如果 "),t("code",[e._v("PlatformDependent.hasUnsafe()")]),e._v(" 方法返回 true , 那么后续 Netty 都会创建 Unsafe 类型的 ByteBuf。")]),e._v(" "),t("h2",{attrs:{id:"_6-pooled-or-unpooled"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-pooled-or-unpooled"}},[e._v("#")]),e._v(" "),t("strong",[e._v("6. Pooled or Unpooled")])]),e._v(" "),t("p",[e._v("站在内存管理的角度上来讲，Netty 将 ByteBuf 分为了 池化（Pooled） 和 非池化（Unpooled）两个大类，其中 Unpooled 类型的 ByteBuf  是用到的时候才去临时创建，使用完的时候再去释放。")]),e._v(" "),t("p",[e._v("而 Direct Memory 的申请和释放开销相较于 Heap Memory 会大很多，Netty 在面对高并发网络通信的场景下，Direct Memory 的申请和释放是一个非常频繁的操作，这种大量频繁地内存申请释放操作对程序的性能影响是巨大的，因此 Netty 引入了内存池将这些 Direct Memory 统一池化管理起来。")]),e._v(" "),t("p",[e._v("Netty 提供了 "),t("code",[e._v("-Dio.netty.allocator.type")]),e._v(" 参数来让我们决定是否采用内存池来管理 ByteBuf ， 默认值是 "),t("code",[e._v("pooled")]),e._v(" , 也就是说 Netty 默认是采用池化的方式来管理 PooledByteBuf 。如果是安卓平台，那么默认是使用非池化的 ByteBuf （unpooled）。")]),e._v(" "),t("ul",[t("li",[e._v("当参数 "),t("code",[e._v("io.netty.allocator.type")]),e._v(" 的值为 pooled 时，Netty 的默认 ByteBufAllocator 是 "),t("code",[e._v("PooledByteBufAllocator.DEFAULT")]),e._v(" 。")]),e._v(" "),t("li",[e._v("当参数 "),t("code",[e._v("io.netty.allocator.type")]),e._v(" 的值为 unpooled 时，Netty 的默认 ByteBufAllocator 是 "),t("code",[e._v("UnpooledByteBufAllocator.DEFAULT")]),e._v(" 。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public final class ByteBufUtil {\n    // 默认 PooledByteBufAllocator，池化管理 ByteBuf\n    static final ByteBufAllocator DEFAULT_ALLOCATOR;\n\n    static {\n        // 默认为 pooled\n        String allocType = SystemPropertyUtil.get(\n                "io.netty.allocator.type", PlatformDependent.isAndroid() ? "unpooled" : "pooled");\n        allocType = allocType.toLowerCase(Locale.US).trim();\n\n        ByteBufAllocator alloc;\n        if ("unpooled".equals(allocType)) {\n            alloc = UnpooledByteBufAllocator.DEFAULT;\n            logger.debug("-Dio.netty.allocator.type: {}", allocType);\n        } else if ("pooled".equals(allocType)) {\n            alloc = PooledByteBufAllocator.DEFAULT;\n            logger.debug("-Dio.netty.allocator.type: {}", allocType);\n        } else {\n            alloc = PooledByteBufAllocator.DEFAULT;\n            logger.debug("-Dio.netty.allocator.type: pooled (unknown: {})", allocType);\n        }\n\n        DEFAULT_ALLOCATOR = alloc;\n    }\n}\n')])])]),t("p",[e._v("后续 Netty 在创建 SocketChannel 的时候，在 SocketChannelConfig 中指定的 ByteBufAllocator 就是这里的 "),t("code",[e._v("ByteBufUtil.DEFAULT_ALLOCATOR")]),e._v("，默认情况下为 PooledByteBufAllocator。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public interface ByteBufAllocator {\n    ByteBufAllocator DEFAULT = ByteBufUtil.DEFAULT_ALLOCATOR;\n}\n\npublic class DefaultChannelConfig implements ChannelConfig {\n    // PooledByteBufAllocator\n    private volatile ByteBufAllocator allocator = ByteBufAllocator.DEFAULT;\n}\n")])])]),t("p",[e._v("当 Netty 读取 Socket 中的网络数据时，首先会从 DefaultChannelConfig 中将 ByteBufAllocator 获取到，然后利用 ByteBufAllocator 从内存池中获取一个 DirectByteBuf ，最后将 Socket 中的数据读取到 DirectByteBuf 中，随后沿着 pipeline 向后传播，进行 IO 处理。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("protected class NioByteUnsafe extends AbstractNioUnsafe {\n        @Override\n        public final void read() {\n            // 获取 SocketChannelConfig\n            final ChannelConfig config = config();\n            // 获取 ByteBufAllocator ， 默认为 PooledByteBufAllocator\n            final ByteBufAllocator allocator = config.getAllocator();\n            // 从内存池中获取 byteBuf\n            byteBuf = allocHandle.allocate(allocator);\n            // 读取 socket 中的数据到 byteBuf\n            allocHandle.lastBytesRead(doReadBytes(byteBuf));\n            // 将 byteBuf 沿着 pipeline 向后传播\n            pipeline.fireChannelRead(byteBuf);\n\n            ....... 省略 .......\n        }\n}\n")])])]),t("p",[e._v("除此之外，Netty 还提供了 "),t("code",[e._v("ChannelOption.ALLOCATOR")]),e._v(" 选项，让我们可以在配置 ServerBootstrap 的时候为 SocketChannel 灵活指定自定义的 ByteBufAllocator 。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(bossGroup, workerGroup)\n            // 灵活配置 ByteBufAllocator\n          .childOption(ChannelOption.ALLOCATOR, UnpooledByteBufAllocator.DEFAULT;);\n")])])]),t("p",[e._v("这里通过 ChannelOption 来配置 Socket 相关的属性是最高优先级的，它会覆盖掉一切默认配置。")]),e._v(" "),t("h2",{attrs:{id:"_7-metric"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-metric"}},[e._v("#")]),e._v(" "),t("strong",[e._v("7. Metric")])]),e._v(" "),t("p",[e._v("在第四小节中，我们介绍了 Cleaner 和 NoCleaner 这两种 DirectByteBuf，其中 CleanerDirectByteBuf  的整体 Direct Memory 的用量是受到 JVM 参数 "),t("code",[e._v("-XX:MaxDirectMemorySize")]),e._v(" 限制的，而 NoCleanerDirectByteBuf 的整体 Direct Memory  可以突破该参数的限制，JVM 并不会统计这块 Direct Memory 的用量。")]),e._v(" "),t("p",[e._v("Netty 为了及时地释放这些 Direct Memory，通常默认选择 NoCleanerDirectByteBuf，这就要求 Netty 需要对这部分 Direct Memory 的用量进行自行统计限制。NoCleanerDirectByteBuf 的最大可用 Direct Memory 我们可以通过 "),t("code",[e._v("-Dio.netty.maxDirectMemory")]),e._v(" 来指定，默认情况下等于 "),t("code",[e._v("-XX:MaxDirectMemorySize")]),e._v(" 设置的值。")]),e._v(" "),t("p",[e._v("PlatformDependent 类中的 "),t("code",[e._v("DIRECT_MEMORY_COUNTER")]),e._v(" 字段用于统计在 Netty 层面上，所有 NoCleanerDirectByteBuf 占用的 Direct Memory 大小。注意这里并不会统计 CleanerDirectByteBuf 的 Direct Memory 占用，这部分统计由 JVM 负责。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public final class PlatformDependent { \n    // 用于统计 NoCleaner 的 DirectByteBuf 所引用的 Native Memory 大小\n    private static final AtomicLong DIRECT_MEMORY_COUNTER;\n\n    public static ByteBuffer allocateDirectNoCleaner(int capacity) {\n        // 增加 Native Memory 用量统计\n        incrementMemoryCounter(capacity);\n        try {\n            // 分配 Native Memory\n            // 初始化 NoCleaner 的 DirectByteBuffer\n            return PlatformDependent0.allocateDirectNoCleaner(capacity);\n        } catch (Throwable e) {\n            decrementMemoryCounter(capacity);\n            throwException(e);\n            return null;\n        }\n    \n\n    public static void freeDirectNoCleaner(ByteBuffer buffer) {\n        int capacity = buffer.capacity();\n        // 释放 Native Memory\n        PlatformDependent0.freeMemory(PlatformDependent0.directBufferAddress(buffer));\n        // 减少 Native Memory 用量统计\n        decrementMemoryCounter(capacity);\n    }  \n}\n")])])]),t("p",[e._v("PlatformDependent 类是 Netty 最底层的一个类，所有内存的分配，释放动作最终都是在该类中执行，因此 DIRECT_MEMORY_COUNTER 字段统计的是全局的 Direct Memory 大小（Netty 层面）。")]),e._v(" "),t("p",[e._v("每一次的内存申请 —— allocateDirectNoCleaner ， 都会增加 DIRECT_MEMORY_COUNTER 计数，每一次的内存释放 —— freeDirectNoCleaner，都会减少 DIRECT_MEMORY_COUNTER 计数。")]),e._v(" "),t("p",[e._v("我们可以通过 "),t("code",[e._v("PlatformDependent.usedDirectMemory()")]),e._v("方法来获取 Netty 当前所占用的 Direct Memory 大小。但如果我们特殊指定了需要使用 CleanerDirectByteBuf ， 比如，将 "),t("code",[e._v("-Dio.netty.maxDirectMemory")]),e._v(" 参数设置为 "),t("code",[e._v("0")]),e._v(" , 那么这里将会返回  -1 。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    private static void incrementMemoryCounter(int capacity) {\n        // 只统计 NoCleaner 的 DirectByteBuf 所引用的 Native Memory \n        if (DIRECT_MEMORY_COUNTER != null) {\n            long newUsedMemory = DIRECT_MEMORY_COUNTER.addAndGet(capacity);\n            if (newUsedMemory > DIRECT_MEMORY_LIMIT) {\n                DIRECT_MEMORY_COUNTER.addAndGet(-capacity);\n                throw new OutOfDirectMemoryError("failed to allocate " + capacity\n                        + " byte(s) of direct memory (used: " + (newUsedMemory - capacity)\n                        + ", max: " + DIRECT_MEMORY_LIMIT + \')\');\n            }\n        }\n    }\n\n    private static void decrementMemoryCounter(int capacity) {\n        if (DIRECT_MEMORY_COUNTER != null) {\n            long usedMemory = DIRECT_MEMORY_COUNTER.addAndGet(-capacity);\n            assert usedMemory >= 0;\n        }\n    }\n\n    public static long usedDirectMemory() {\n        return DIRECT_MEMORY_COUNTER != null ? DIRECT_MEMORY_COUNTER.get() : -1;\n    }\n')])])]),t("p",[e._v("除了 PlatformDependent 这里的全局统计之外，Netty 还提供了以 ByteBufAllocator 为粒度的内存占用统计，统计的维度包括 Heap Memory 的占用和 Direct Memory 的占用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public final class UnpooledByteBufAllocator extends AbstractByteBufAllocator implements ByteBufAllocatorMetricProvider {\n    // 从该 ByteBufAllocator 分配出去的内存统计\n    private final UnpooledByteBufAllocatorMetric metric = new UnpooledByteBufAllocatorMetric();\n\n    @Override\n    public ByteBufAllocatorMetric metric() {\n        return metric;\n    }\n    // 统计 Direct Memory 的占用\n    void incrementDirect(int amount) {\n        metric.directCounter.add(amount);\n    }\n\n    void decrementDirect(int amount) {\n        metric.directCounter.add(-amount);\n    }\n    // 统计 Heap Memory 的占用\n    void incrementHeap(int amount) {\n        metric.heapCounter.add(amount);\n    }\n\n    void decrementHeap(int amount) {\n        metric.heapCounter.add(-amount);\n    }\n\n}\n")])])]),t("p",[e._v("Netty 定义的每一个  ByteBufAllocator 中，都会有一个 ByteBufAllocatorMetric 类型的字段，该类定义两个计数字段：directCounter，heapCounter。 分别用于统计 Direct Memory  和 Heap Memory 的占用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    private static final class UnpooledByteBufAllocatorMetric implements ByteBufAllocatorMetric {\n        final LongCounter directCounter = PlatformDependent.newLongCounter();\n        final LongCounter heapCounter = PlatformDependent.newLongCounter();\n\n        @Override\n        public long usedHeapMemory() {\n            return heapCounter.value();\n        }\n\n        @Override\n        public long usedDirectMemory() {\n            return directCounter.value();\n        }\n\n        @Override\n        public String toString() {\n            return StringUtil.simpleClassName(this) +\n                    "(usedHeapMemory: " + usedHeapMemory() + "; usedDirectMemory: " + usedDirectMemory() + \')\';\n        }\n    }\n')])])]),t("p",[e._v("因此从内存占用统计的角度上来说，Netty 又会将整个 ByteBuf 体系分为 Instrumented 和 NoInstrumented 两大类，带有 Instrumented 前缀的 ByteBuf ，无论你是 Heap or Direct ， Cleaner or NoCleaner，Unsafe or NoUnsafe 类型的 ByteBuf ，Netty 都会统计这部分内存占用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    private static final class InstrumentedUnpooledUnsafeNoCleanerDirectByteBuf\n            extends UnpooledUnsafeNoCleanerDirectByteBuf {\n        InstrumentedUnpooledUnsafeNoCleanerDirectByteBuf(\n                UnpooledByteBufAllocator alloc, int initialCapacity, int maxCapacity) {\n            // 构造普通的 UnpooledUnsafeNoCleanerDirectByteBuf\n            super(alloc, initialCapacity, maxCapacity);\n        }\n        \n        // 分配，释放 的时候更新 Direct Memory \n        @Override\n        protected ByteBuffer allocateDirect(int initialCapacity) {\n            ByteBuffer buffer = super.allocateDirect(initialCapacity);\n            ((UnpooledByteBufAllocator) alloc()).incrementDirect(buffer.capacity());\n            return buffer;\n        }\n\n        @Override\n        protected void freeDirect(ByteBuffer buffer) {\n            int capacity = buffer.capacity();\n            super.freeDirect(buffer);\n            ((UnpooledByteBufAllocator) alloc()).decrementDirect(capacity);\n        }\n    }\n    private static final class InstrumentedUnpooledUnsafeDirectByteBuf extends UnpooledUnsafeDirectByteBuf {\n        InstrumentedUnpooledUnsafeDirectByteBuf(\n                UnpooledByteBufAllocator alloc, int initialCapacity, int maxCapacity) {\n            // 构造普通的 UnpooledUnsafeDirectByteBuf\n            super(alloc, initialCapacity, maxCapacity);\n        }\n\n        // 分配，释放 的时候更新 Direct Memory \n        @Override\n        protected ByteBuffer allocateDirect(int initialCapacity) {\n            ByteBuffer buffer = super.allocateDirect(initialCapacity);\n            ((UnpooledByteBufAllocator) alloc()).incrementDirect(buffer.capacity());\n            return buffer;\n        }\n\n        @Override\n        protected void freeDirect(ByteBuffer buffer) {\n            int capacity = buffer.capacity();\n            super.freeDirect(buffer);\n            ((UnpooledByteBufAllocator) alloc()).decrementDirect(capacity);\n        }\n    }\n")])])]),t("h2",{attrs:{id:"_8-bytebufallocator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-bytebufallocator"}},[e._v("#")]),e._v(" "),t("strong",[e._v("8. ByteBufAllocator")])]),e._v(" "),t("p",[e._v("在 Netty 中，ByteBuf 的创建必须通过 ByteBufAllocator 进行，不能直接显示地调用 ByteBuf 相关的构造函数自行创建。Netty 定义了两种类型的 ByteBufAllocator  ：")]),e._v(" "),t("ol",[t("li",[e._v("PooledByteBufAllocator 负责池化 ByteBuf，这里正是 Netty 内存管理的核心，在下一篇文章中，笔者会详细的和大家介绍它。")]),e._v(" "),t("li",[e._v("UnpooledByteBufAllocator 负责分配非池化的 ByteBuf，创建 ByteBuf 的时候临时向 OS 申请 Native Memory ，使用完之后，需要及时的手动调用 release 将 Native Memory 释放给 OS 。")])]),e._v(" "),t("p",[t("code",[e._v("-Dio.netty.allocator.type")]),e._v(" 参数可以让我们自行选择 ByteBufAllocator 的类型，默认值为 "),t("code",[e._v("pooled")]),e._v(", Netty 默认是采用池化的方式来管理 ByteBuf 。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public interface ByteBufAllocator {\n    // 默认为 PooledByteBufAllocator\n    ByteBufAllocator DEFAULT = ByteBufUtil.DEFAULT_ALLOCATOR;\n}\n")])])]),t("p",[e._v("除了以上两种官方定义的 ByteBufAllocator 之外，我们还可以根据自己实际业务场景来自行定制 ByteBufAllocator ， 然后通过第六小节中介绍的 "),t("code",[e._v("ChannelOption.ALLOCATOR")]),e._v(" 选项，将 ByteBufAllocator 灵活指定为我们自行定制的实现。")]),e._v(" "),t("p",[e._v("对于 UnpooledByteBuf 来说，Netty 还专门提供了一个工具类 "),t("code",[e._v("Unpooled")]),e._v("，这里定义实现了很多针对 ByteBuf 的实用操作，比如，allocate，wrapped，copied 等。这里笔者以 DirectByteBuf 的创建为例进行说明：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public final class Unpooled {\n\n    private static final ByteBufAllocator ALLOC = UnpooledByteBufAllocator.DEFAULT;\n\n    public static ByteBuf directBuffer() {\n        return ALLOC.directBuffer();\n    }\n}\n")])])]),t("p",[e._v("Unpooled 底层依赖了 UnpooledByteBufAllocator ， 所有对 ByteBuf 的创建动作最终都会代理给这个 Allocator 。在 DirectBuffer 的创建过程中，我们可以看到前面介绍的所有类型的 ByteBuf。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public final class UnpooledByteBufAllocator {\n    @Override\n    protected ByteBuf newDirectBuffer(int initialCapacity, int maxCapacity) {\n        final ByteBuf buf;\n        if (PlatformDependent.hasUnsafe()) {\n            buf = noCleaner ? new InstrumentedUnpooledUnsafeNoCleanerDirectByteBuf(this, initialCapacity, maxCapacity) :\n                    new InstrumentedUnpooledUnsafeDirectByteBuf(this, initialCapacity, maxCapacity);\n        } else {\n            buf = new InstrumentedUnpooledDirectByteBuf(this, initialCapacity, maxCapacity);\n        }\n        // 是否启动内存泄露探测，如果启动则额外用 LeakAwareByteBuf 进行包装返回\n        return disableLeakDetector ? buf : toLeakAwareBuffer(buf);\n    }\n}\n")])])]),t("ul",[t("li",[e._v("首先 Netty 创建出来的所有 ByteBuf 都是带有 Metric 统计的，具体的 ByteBuf 类型都会带有 Instrumented 前缀。")]),e._v(" "),t("li",[e._v("如果当前 JRE 环境支持 Unsafe ， 那么后续就会通过 Unsafe 的方式来对 ByteBuf 进行相关操作（默认），具体的 ByteBuf 类型都会带有 Unsafe 前缀。")]),e._v(" "),t("li",[e._v("如果我们明确指定了 NoCleaner 类型的 DirectByteBuf（默认），那么创建出来的 ByteBuf 类型就会带有 NoCleaner 前缀，由于没有 Cleaner ，这就要求我们使用完 ByteBuf 的时候必须及时地手动进行释放。")]),e._v(" "),t("li",[e._v("如果我们开启了内存泄露探测，那么创建流程的最后，Netty 会用一个  LeakAwareByteBuf 去包装新创建出来的 ByteBuf，当这个 ByteBuf 被 GC 的时候，Netty 会通过相关引用计数来判断是否存在忘记 release 的情况，从而确定出是否发生内存泄露。")])]),e._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" "),t("strong",[e._v("总结")])]),e._v(" "),t("p",[e._v("本文笔者从八个角度为大家详细的剖析了 ByteBuf 的整体设计，这八个角度分别是：内存区域分布的角度，内存管理的角度，内存访问的角度，内存回收的角度，内存统计 Metric 的角度，零拷贝的角度，引用计数的角度，扩容的角度。")]),e._v(" "),t("p",[e._v("到现在为止，我们只是扫清了 Netty 内存管理外围的一些障碍，那么下一篇文章，笔者将带大家深入到内存管理的核心，彻底让大家弄懂 Netty 的内存管理机制。好了，本文的内容就到这里，我们下篇文章见~~~")])])}),[],!1,null,null,null);t.default=r.exports}}]);