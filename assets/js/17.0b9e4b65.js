(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{351:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[t._v("提出问题是一切智慧的开端")]),t._v(" "),s("ul",[s("li",[t._v("为什么 Redis 采用单线程主 IO 处理架构，而不是多线程架构？")]),t._v(" "),s("li",[t._v("在实际开发中，哪些操作可能导致 Redis 的主线程阻塞？如何利用后台线程避免这些问题？")]),t._v(" "),s("li",[t._v("Redis 的后台线程是如何启动和管理的？这些线程如何与主线程协同工作？")]),t._v(" "),s("li",[t._v("Redis 的惰性删除机制是如何工作的？它对 Redis 的性能有何影响？")]),t._v(" "),s("li",[t._v("在生产环境中，如何根据 Redis 执行模型优化应用性能？")]),t._v(" "),s("li",[t._v("Redis 后台线程的创建机制有何特别之处？它们与任务队列如何交互？")]),t._v(" "),s("li",[t._v("如果 Redis 的后台任务队列满了，会发生什么？")]),t._v(" "),s("li",[t._v("你了解 Redis 如何通过任务优先级或类型优化资源管理吗？")])])]),t._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[s("strong",[t._v("所谓的执行模型，就是指 Redis 运行时使用的进程、子进程和线程的个数，以及它们各自负责的工作任务")])]),t._v(" "),s("p",[t._v("你在实际使用 Redis 的时候，可能经常会听到类似“Redis 是单线程”、“Redis 的主 IO 线程”、“Redis 包含多线程”等不同说法。我也听到不少同学提出困惑和疑问："),s("strong",[t._v("Redis 到底是不是一个单线程的程序？")])]),t._v(" "),s("p",[t._v("其实，彻底理解这个问题，有助于指导我们保持 Redis 高性能、低延迟的特性。如果说 Redis 就是单线程程序，那么，我们就需要避免所有容易引起线程阻塞的操作；而如果说 Redis 不只是单线程，还有其他线程在工作，那么，我们就需要了解多线程各自负责什么任务，负责请求解析和数据读写的线程有几个，有哪些操作是后台线程在完成，而不会影响请求解析和数据读写的。")]),t._v(" "),s("h2",{attrs:{id:"从-bio-c-文件学习-redis-的后台线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从-bio-c-文件学习-redis-的后台线程"}},[t._v("#")]),t._v(" 从 bio.c 文件学习 Redis 的后台线程")]),t._v(" "),s("p",[t._v("我们先来看下 main 函数在初始化过程最后调用的 InitServerLast 函数。InitServerLast 函数的作用是进一步调用 bioInit 函数，来创建后台线程，让 Redis 把部分任务交给后台线程处理。这个过程如下所示。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("InitServerLast")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bioInit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    …\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("bioInit")]),t._v("函数是在"),s("a",{attrs:{href:"https://github.com/redis/redis/tree/5.0/src/bio.c",target:"_blank",rel:"noopener noreferrer"}},[t._v("bio.c"),s("OutboundLink")],1),t._v("文件中实现的，它的主要作用调用"),s("code",[t._v("pthread_create")]),t._v("函数创建多个后台线程。不过在具体了解"),s("code",[t._v("bioInit")]),t._v("函数之前，我们先来看下 bio.c 文件中定义的主要数组，这也是在"),s("code",[t._v("bioInit")]),t._v("函数中要进行初始化的。")]),t._v(" "),s("p",[t._v("bio.c 文件针对要创建的线程，定义了"),s("code",[t._v("pthread_t")]),t._v("类型的数组"),s("code",[t._v("bio_threads")]),t._v("，用来保存创建的线程描述符。此外，bio.c 文件还创建了一个保存互斥锁的数组"),s("code",[t._v("bio_mutex")]),t._v("，以及两个保存条件变量的数组"),s("code",[t._v("bio_newjob_cond")]),t._v("和"),s("code",[t._v("bio_step_cond")]),t._v("。以下代码展示了这些数组的创建逻辑，你可以看下。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//保存线程描述符的数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_t")]),t._v(" bio_threads"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("BIO_NUM_OPS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//保存互斥锁的数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_mutex_t")]),t._v(" bio_mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("BIO_NUM_OPS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//保存条件变量的两个数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_cond_t")]),t._v(" bio_newjob_cond"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("BIO_NUM_OPS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_cond_t")]),t._v(" bio_step_cond"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("BIO_NUM_OPS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("从中你可以注意到，这些数组的大小都是宏定义 BIO_NUM_OPS，这个宏定义是在"),s("a",{attrs:{href:"https://github.com/redis/redis/tree/5.0/src/bio.h",target:"_blank",rel:"noopener noreferrer"}},[t._v("bio.h"),s("OutboundLink")],1),t._v("文件中定义的，默认值为 3。")]),t._v(" "),s("p",[t._v("同时在 bio.h 文件中，你还可以看到另外三个宏定义，分别是 BIO_CLOSE_FILE、BIO_AOF_FSYNC 和 BIO_LAZY_FREE。它们的代码如下所示：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("BIO_CLOSE_FILE")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Deferred close(2) syscall. */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("BIO_AOF_FSYNC")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Deferred AOF fsync. */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("BIO_LAZY_FREE")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Deferred objects freeing. */")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("BIO_NUM_OPS")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")])])]),t._v("\n")])])]),s("p",[t._v("其中，BIO_NUM_OPS 表示的是 Redis 后台任务的类型有三种。而 BIO_CLOSE_FILE、BIO_AOF_FSYNC 和 BIO_LAZY_FREE，它们分别表示三种后台任务的操作码，这些操作码可以用来标识不同的任务。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("BIO_CLOSE_FILE")]),t._v("：文件关闭后台任务")]),t._v(" "),s("li",[s("strong",[t._v("BIO_AOF_FSYNC")]),t._v("：AOF 日志同步写回后台任务")]),t._v(" "),s("li",[s("strong",[t._v("BIO_LAZY_FREE")]),t._v("：惰性删除后台任务")])]),t._v(" "),s("p",[t._v("实际上，bio.c 文件创建的线程数组、互斥锁数组和条件变量数组，大小都是包含三个元素，也正是对应了这三种任务。")]),t._v(" "),s("h3",{attrs:{id:"bioinit-函数-初始化数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bioinit-函数-初始化数组"}},[t._v("#")]),t._v(" bioInit 函数：初始化数组")]),t._v(" "),s("p",[t._v("接下来，我们再来了解下 bio.c 文件中的初始化和线程创建函数"),s("code",[t._v("bioInit")]),t._v("。我刚才也给你介绍过这个函数，它是"),s("code",[t._v("main")]),t._v("函数执行完"),s("code",[t._v("server")]),t._v("初始化后，通过"),s("code",[t._v("InitServerLast")]),t._v("函数调用的。也就是说，Redis 在完成 server 初始化后，就会创建线程来执行后台任务。")]),t._v(" "),s("p",[t._v("所以，"),s("strong",[t._v("Redis 在运行时其实已经不止是单个线程（也就是主 IO 线程）在运行了，还会有后台线程在运行")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("bioInit")]),t._v("函数首先会初始化互斥锁数组和条件变量数组。然后，该函数会调用"),s("code",[t._v("listCreate")]),t._v("函数，给"),s("code",[t._v("bio_jobs")]),t._v("这个数组的每个元素创建一个列表，同时给"),s("code",[t._v("bio_pending")]),t._v("数组的每个元素赋值为 0。这部分代码如下所示：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" BIO_NUM_OPS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_mutex_init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("bio_mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_cond_init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("bio_newjob_cond"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_cond_init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("bio_step_cond"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    bio_jobs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listCreate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    bio_pending"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("那么，要想了解给"),s("code",[t._v("bio_jobs")]),t._v("数组和"),s("code",[t._v("bio_pending")]),t._v("数组元素赋值的作用，我们就需要先搞清楚这两个数组的含义：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("bio_jobs 数组")]),t._v("的元素是"),s("code",[t._v("bio_jobs")]),t._v("结构体类型，用来表示后台任务。该结构体的成员变量包括了后台任务的创建时间 time，以及任务的参数。为该数组的每个元素创建一个列表，其实就是为每个后台线程创建一个要处理的任务列表。")]),t._v(" "),s("li",[s("strong",[t._v("bio_pending 数组")]),t._v("的元素类型是"),s("code",[t._v("unsigned long long")]),t._v("，用来表示每种任务中，处于等待状态的任务个数。将该数组每个元素初始化为 0，其实就是表示初始时，每种任务都没有待处理的具体任务。")])]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("bio_job")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("time_t")]),t._v(" time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//任务创建时间")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//任务参数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//以后台线程方式运行的任务列表")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("bio_jobs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("BIO_NUM_OPS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//被阻塞的后台任务数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" bio_pending"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("BIO_NUM_OPS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("好了，到这里，你就了解了"),s("code",[t._v("bioInit")]),t._v("函数执行时，会把线程互斥锁、条件变量对应数组初始化为 NULL，同时会给每个后台线程创建一个任务列表（对应"),s("code",[t._v("bio_jobs")]),t._v("数组的元素），以及会设置每种任务的待处理个数为 0（对应 bio_pending 数组的元素）。")]),t._v(" "),s("h3",{attrs:{id:"bioinit-函数-设置线程属性并创建线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bioinit-函数-设置线程属性并创建线程"}},[t._v("#")]),t._v(" bioInit 函数：设置线程属性并创建线程")]),t._v(" "),s("p",[t._v("在完成了初始化之后，接下来，bioInit 函数会先通过 pthread_attr_t 类型的变量，给线程设置属性。然后，bioInit 函数会调用前面我提到的 pthread_create 函数来创建线程。")]),t._v(" "),s("p",[t._v("不过，为了能更好地理解 bioInit 函数设置线程属性和创建线程的过程，我们需要先对 pthread_create 函数本身有所了解，该函数的原型如下所示：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("tidp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pthread_attr_t")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("attr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("start_routine"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("可以看到，pthread_create 函数一共有 4 个参数，分别是：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("*tidp")]),t._v("，指向线程数据结构 pthread_t 的指针；")]),t._v(" "),s("li",[s("strong",[t._v("*attr")]),t._v("，指向线程属性结构 pthread_attr_t 的指针；")]),t._v(" "),s("li",[s("strong",[t._v("*start_routine")]),t._v("，线程所要运行的函数的起始地址，也是指向函数的指针；")]),t._v(" "),s("li",[s("strong",[t._v("*arg")]),t._v("，传给运行函数的参数。")])]),t._v(" "),s("p",[t._v("了解了"),s("code",[t._v("pthread_create")]),t._v("函数之后，我们来看下"),s("code",[t._v("bioInit")]),t._v("函数的具体操作。")]),t._v(" "),s("p",[t._v("首先，"),s("code",[t._v("bioInit")]),t._v("函数会调用"),s("code",[t._v("pthread_attr_init")]),t._v("函数，初始化线程属性变量"),s("code",[t._v("attr")]),t._v("，然后调用"),s("code",[t._v("pthread_attr_getstacksize")]),t._v("函数，获取线程的栈大小这一属性的当前值，并根据当前栈大小和"),s("code",[t._v("REDIS_THREAD_STACK_SIZE")]),t._v("宏定义的大小（默认值为 4MB），来计算最终的栈大小属性值。紧接着，"),s("code",[t._v("bioInit")]),t._v("函数会调用"),s("code",[t._v("pthread_attr_setstacksize")]),t._v("函数，来设置栈大小这一属性值。")]),t._v(" "),s("p",[t._v("下面的代码展示了线程属性的获取、计算和设置逻辑，你可以看下。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_attr_init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("attr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_attr_getstacksize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("attr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("stacksize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("stacksize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" stacksize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("针对Solaris系统做处理\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stacksize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" REDIS_THREAD_STACK_SIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" stacksize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_attr_setstacksize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("attr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stacksize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("我也画了一张图，展示了线程属性的这一操作过程，你可以看下。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409152035887.png",alt:"image-20240915203504836"}})]),t._v(" "),s("p",[t._v("在完成线程属性的设置后，接下来，"),s("code",[t._v("bioInit")]),t._v("函数会通过一个 for 循环，来依次为每种后台任务创建一个线程。循环的次数是由"),s("code",[t._v("BIO_NUM_OPS")]),t._v("宏定义决定的，也就是 3 次。相应的，"),s("code",[t._v("bioInit")]),t._v("函数就会调用 3 次"),s("code",[t._v("pthread_create")]),t._v("函数，并创建 3 个线程。bioInit 函数让这 3 个线程执行的函数都是**"),s("code",[t._v("bioProcessBackgroundJobs")]),t._v("**。")]),t._v(" "),s("p",[t._v("不过这里要注意一点，就是在这三次线程的创建过程中，传给这个函数的参数分别是 0、1、2。这个创建过程如下所示：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" BIO_NUM_OPS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("attr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("bioProcessBackgroundJobs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("arg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t… "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//报错信息")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    bio_threads"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("你看了这个代码，可能会有一个小疑问："),s("strong",[t._v("为什么创建的 3 个线程，它们所运行的 bioProcessBackgroundJobs 函数接收的参数分别是 0、1、2 呢？")])]),t._v(" "),s("p",[t._v("这就和 bioProcessBackgroundJobs 函数的实现有关了，我们来具体看下。")]),t._v(" "),s("h3",{attrs:{id:"bioprocessbackgroundjobs-函数-处理后台任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bioprocessbackgroundjobs-函数-处理后台任务"}},[t._v("#")]),t._v(" bioProcessBackgroundJobs 函数：处理后台任务")]),t._v(" "),s("p",[t._v("首先，"),s("code",[t._v("bioProcessBackgroundJobs")]),t._v("函数会把接收到的参数 arg，转成"),s("code",[t._v("unsigned long")]),t._v("类型，并赋值给 type 变量，如下所示：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bioProcessBackgroundJobs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    …\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" arg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t…\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("而"),s("strong",[t._v("type 变量表示的就是后台任务的操作码")]),t._v("。这也是我刚才给你介绍的三种后台任务类型 BIO_CLOSE_FILE、BIO_AOF_FSYNC 和 BIO_LAZY_FREE 对应的操作码，它们的取值分别为 0、1、2。")]),t._v(" "),s("p",[t._v("bioProcessBackgroundJobs 函数的主要执行逻辑是一个 while(1)的循环。在这个循环中，bioProcessBackgroundJobs 函数会从 bio_jobs 这个数组中取出相应任务，并根据任务类型，调用具体的函数来执行。")]),t._v(" "),s("p",[t._v("我刚才已经介绍过，"),s("code",[t._v("bio_jobs")]),t._v("数组的每一个元素是一个队列。而因为"),s("code",[t._v("bio_jobs")]),t._v("数组的元素个数，等于后台任务的类型个数（也就是 BIO_NUM_OPS），"),s("strong",[t._v("所以，"),s("code",[t._v("bio_jobs")]),t._v("数组的每个元素，实际上是对应了某一种后台任务的任务队列。")])]),t._v(" "),s("p",[t._v("在了解了这一点后，我们就容易理解"),s("code",[t._v("bioProcessBackgroundJobs")]),t._v("函数中的 while 循环了。因为传给"),s("code",[t._v("bioProcessBackgroundJobs")]),t._v("函数的参数，分别是 0、1、2，对应了三种任务类型，所以在这个循环中，"),s("code",[t._v("bioProcessBackgroundJobs")]),t._v("函数会一直不停地从某一种任务队列中，取出一个任务来执行。")]),t._v(" "),s("p",[t._v("同时，bioProcessBackgroundJobs 函数会根据传入的任务操作类型调用相应函数，具体来说：")]),t._v(" "),s("ul",[s("li",[t._v("任务类型是 BIO_CLOSE_FILE，则调用 close 函数；")]),t._v(" "),s("li",[t._v("任务类型是 BIO_AOF_FSYNC，则调用 redis_fsync 函数；")]),t._v(" "),s("li",[t._v("任务类型是 BIO_LAZY_FREE，则再根据参数个数等情况，分别调用 lazyfreeFreeObjectFromBioThread、lazyfreeFreeDatabaseFromBioThread 和 lazyfreeFreeSlotsMapFromBioThread 这三个函数。")])]),t._v(" "),s("p",[t._v("最后，当某个任务执行完成后，bioProcessBackgroundJobs 函数会从任务队列中，把这个任务对应的数据结构删除。我把这部分代码放在这里，你可以看下。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        listNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ln"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        …\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//从类型为type的任务队列中获取第一个任务")]),t._v("\n        ln "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listFirst")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bio_jobs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        job "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ln"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        …\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//判断当前处理的后台任务类型是哪一种")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" BIO_CLOSE_FILE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("job"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("arg1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果是关闭文件任务，那就调用close函数")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" BIO_AOF_FSYNC"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("redis_fsync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("job"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("arg1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果是AOF同步写任务，那就调用redis_fsync函数")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" BIO_LAZY_FREE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果是惰性删除任务，那根据任务的参数分别调用不同的惰性删除函数执行")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("job"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("arg1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lazyfreeFreeObjectFromBioThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("job"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("arg1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("job"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("arg2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" job"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("arg3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lazyfreeFreeDatabaseFromBioThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("job"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("arg2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("job"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("arg3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("job"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("arg3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lazyfreeFreeSlotsMapFromBioThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("job"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("arg3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("serverPanic")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Wrong job type in bioProcessBackgroundJobs()."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        …\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//任务执行完成后，调用 listDelNode 在任务队列中删除该任务")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listDelNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bio_jobs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ln"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将对应的等待任务个数减一。")]),t._v("\n        bio_pending"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        …\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("所以说，bioInit 函数其实就是创建了 3 个线程，每个线程不停地去查看任务队列中是否有任务，如果有任务，就调用具体函数执行。")]),t._v(" "),s("p",[t._v("你可以再参考回顾下图所展示的"),s("code",[t._v("bioInit")]),t._v("函数和"),s("code",[t._v("bioProcessBackgroundJobs")]),t._v("函数的基本处理流程。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409152040645.png",alt:"image-20240915204025572"}})]),t._v(" "),s("p",[t._v("不过接下来你或许还会疑惑：既然 bioProcessBackgroundJobs 函数是负责执行任务的，"),s("strong",[t._v("那么哪个函数负责生成任务呢？")])]),t._v(" "),s("p",[t._v("这就是下面，我要给你介绍的"),s("strong",[t._v("后台任务创建函数 bioCreateBackgroundJob")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"biocreatebackgroundjob-函数-创建后台任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#biocreatebackgroundjob-函数-创建后台任务"}},[t._v("#")]),t._v(" bioCreateBackgroundJob 函数：创建后台任务")]),t._v(" "),s("p",[s("code",[t._v("bioCreateBackgroundJob")]),t._v("函数的原型如下，它会接收 4 个参数，其中，参数 type 表示该后台任务的类型，剩下来的 3 个参数，则对应了后台任务函数的参数，如下所示：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bioCreateBackgroundJob")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("code",[t._v("bioCreateBackgroundJob")]),t._v("函数在执行时，会先创建"),s("code",[t._v("bio_job")]),t._v("，这是后台任务对应的数据结构。然后，后台任务数据结构中的参数，会被设置为"),s("code",[t._v("bioCreateBackgroundJob")]),t._v("函数传入的参数 arg1、arg2 和 arg3。")]),t._v(" "),s("p",[t._v("最后，"),s("code",[t._v("bioCreateBackgroundJob")]),t._v("函数调用"),s("code",[t._v("listAddNodeTail")]),t._v("函数，将刚才创建的任务加入到对应的"),s("code",[t._v("bio_jobs")]),t._v("队列中，同时，将"),s("code",[t._v("bio_pending")]),t._v("数组的对应值加 1，表示有个任务在等待执行。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建新的任务")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("bio_job")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("job "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("zmalloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("job"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//设置任务数据结构中的参数")]),t._v("\n    job"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("time "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("time")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    job"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("arg1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arg1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    job"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("arg2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arg2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    job"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("arg3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arg3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_mutex_lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("bio_mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listAddNodeTail")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bio_jobs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("job"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将任务加到bio_jobs数组的对应任务列表中")]),t._v("\n    bio_pending"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将对应任务列表上等待处理的任务个数加1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_cond_signal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("bio_newjob_cond"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pthread_mutex_unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("bio_mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("好了，这样一来，当 Redis 进程想要启动一个后台任务时，只要调用"),s("code",[t._v("bioCreateBackgroundJob")]),t._v("函数，并设置好该任务对应的类型和参数即可。然后，"),s("code",[t._v("bioCreateBackgroundJob")]),t._v("函数就会把创建好的任务数据结构，放到后台任务对应的队列中。另一方面，"),s("code",[t._v("bioInit")]),t._v("函数在 Redis server 启动时，创建的线程会不断地轮询后台任务队列，一旦发现有任务可以执行，就会将该任务取出并执行。")]),t._v(" "),s("p",[t._v("其实，这种设计方式是典型的"),s("strong",[t._v("生产者-消费者模型")]),t._v("。"),s("code",[t._v("bioCreateBackgroundJob")]),t._v("函数是生产者，负责往每种任务队列中加入要执行的后台任务，而"),s("code",[t._v("bioProcessBackgroundJobs")]),t._v("函数是消费者，负责从每种任务队列中取出任务来执行。然后 Redis 创建的后台线程，会调用"),s("code",[t._v("bioProcessBackgroundJobs")]),t._v("函数，从而实现一直循环检查任务队列。")]),t._v(" "),s("p",[t._v("下图展示的就是"),s("code",[t._v("bioCreateBackgroundJob")]),t._v("和"),s("code",[t._v("bioProcessBackgroundJobs")]),t._v("两者间的生产者-消费者模型，你可以看下。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409152042939.png",alt:"image-20240915204224883"}})]),t._v(" "),s("p",[t._v("好了，到这里，我们就学习了 Redis 后台线程的创建和运行机制。简单来说，主要是以下三个关键点：")]),t._v(" "),s("ul",[s("li",[t._v("Redis 是先通过 "),s("code",[t._v("bioInit")]),t._v(" 函数初始化和创建后台线程")]),t._v(" "),s("li",[t._v("后台线程运行的是 "),s("code",[t._v("bioProcessBackgroundJobs")]),t._v(" 函数，这个函数会轮询任务队列，并根据要处理的任务类型，调用相应函数进行处理")]),t._v(" "),s("li",[t._v("后台线程要处理的任务是由 "),s("code",[t._v("bioCreateBackgroundJob")]),t._v("函数来创建的，这些任务创建后会被放到任务队列中，等待"),s("code",[t._v("bioProcessBackgroundJobs")]),t._v(" 函数处理")])]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("echo 你介绍了 Redis 的执行模型，并且也从源码的角度出发，通过分析代码，带你了解了 Redis 进程创建、以子进程方式创建的守护进程、以及后台线程和它们负责的工作任务。同时，这也解答了你在面试中可能经常会被问到的问题："),s("strong",[t._v("Redis 是单线程程序吗？")])]),t._v(" "),s("p",[t._v("事实上，Redis server 启动后，它的主要工作包括接收客户端请求、解析请求和进行数据读写等操作，是由单线程来执行的，这也是我们常说 Redis 是单线程程序的原因。")]),t._v(" "),s("p",[t._v("但是，学完这节课你应该也知道，Redis 还启动了 3 个线程来执行文件关闭、AOF 同步写和惰性删除等操作，从这个角度来说，Redis 又不能算单线程程序，它还是有多线程的。")])])}),[],!1,null,null,null);s.default=e.exports}}]);