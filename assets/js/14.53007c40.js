(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{349:function(t,r,s){"use strict";s.r(r);var a=s(4),e=Object(a.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[t._v("本文从源码层面分析了 redis 的缓存淘汰机制，并在文章末尾描述使用 Java 实现的思路，以供参考。")]),t._v(" "),r("h2",{attrs:{id:"前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),r("h2",{attrs:{id:"被淘汰数据的删除过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#被淘汰数据的删除过程"}},[t._v("#")]),t._v(" 被淘汰数据的删除过程")]),t._v(" "),r("p",[t._v("一个完整的缓存淘汰机制需要解决两个问题：")]),t._v(" "),r("ul",[r("li",[t._v("确定淘汰哪些记录 —— "),r("strong",[t._v("淘汰策略")])]),t._v(" "),r("li",[t._v("删除被淘汰的记录 —— "),r("strong",[t._v("删除策略")])])]),t._v(" "),r("h3",{attrs:{id:"淘汰策略"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#淘汰策略"}},[t._v("#")]),t._v(" 淘汰策略")]),t._v(" "),r("p",[t._v("缓存能使用的内存是有限的，当空间不足时，应该优先淘汰那些将来不再被访问的数据，保留那些将来还会频繁访问的数据。因此淘汰算法会围绕 "),r("strong",[t._v("时间局部性")]),t._v(" 原理进行设计，即："),r("strong",[t._v("如果一个数据正在被访问，那么在近期很可能会被再次访问")]),t._v("。")]),t._v(" "),r("p",[t._v("为了适应缓存读多写少的特点，实际应用中会使用哈希表来实现缓存。当需要实现某种特定的缓存淘汰策略时，需要引入额外的簿记 "),r("code",[t._v("book keeping")]),t._v(" 结构。")]),t._v(" "),r("p",[t._v("下面回顾 3 种最常见的缓存淘汰策略。")]),t._v(" "),r("h2",{attrs:{id:"参考文献"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/buttercup/p/13888110.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis 的缓存淘汰机制（Eviction） - buttercup - 博客园 (cnblogs.com)"),r("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=e.exports}}]);