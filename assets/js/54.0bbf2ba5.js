(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{390:function(e,n,t){"use strict";t.r(n);var a=t(4),o=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("对于一个高性能网络通讯框架来说，最最重要也是最核心的工作就是如何高效的接收客户端连接，这就好比我们开了一个饭店，那么迎接客人就是饭店最重要的工作，我们要先把客人迎接进来，不能让客人一看人多就走掉，只要客人进来了，哪怕菜做的慢一点也没关系。")]),e._v(" "),n("p",[e._v("本文笔者就来为大家介绍下netty这块最核心的内容，看看netty是如何高效的接收客户端连接的。")]),e._v(" "),n("p",[e._v("下图为笔者在一个月黑风高天空显得那么深邃遥远的夜晚，闲来无事，于是捧起Netty关于如何接收连接这部分源码细细品读的时候，意外的发现了一个影响Netty接收连接吞吐的一个Bug。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409191110731.webp",alt:"图片"}}),e._v("issue讨论.png")]),e._v(" "),n("p",[e._v("于是笔者就在Github提了一个?Issue#11708，阐述了下这个Bug产生的原因以及导致的结果并和Netty的作者一起讨论了下修复措施。如上图所示。")]),e._v(" "),n("blockquote",[n("p",[e._v("Issue#11708：https://github.com/netty/netty/issues/11708")])]),e._v(" "),n("p",[e._v("这里先不详细解释这个Issue，也不建议大家现在就打开这个Issue查看，笔者会在本文的介绍中随着源码深入的解读慢慢的为大家一层一层地拨开迷雾。")]),e._v(" "),n("p",[e._v("之所以在文章的开头把这个拎出来，笔者是想让大家带着怀疑，审视，欣赏，崇敬，敬畏的态度来一起品读世界顶级程序员编写的代码。由衷的感谢他们在这一领域做出的贡献。")]),e._v(" "),n("p",[e._v("好了，问题抛出来后，我们就带着这个疑问来开始本文的内容吧~~~")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409191110723.webp",alt:"图片"}}),e._v("文章概要.png")]),e._v(" "),n("h2",{attrs:{id:"前文回顾"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前文回顾"}},[e._v("#")]),e._v(" 前文回顾")]),e._v(" "),n("p",[e._v("按照老规矩，再开始本文的内容之前，我们先来回顾下前边几篇文章的概要内容帮助大家梳理一个框架全貌出来。")]),e._v(" "),n("blockquote",[n("p",[e._v("笔者这里再次想和读者朋友们强调的是本文可以独立观看，并不依赖前边系列文章的内容，只是大家如果对相关细节部分感兴趣的话，可以在阅读完本文之后在去回看相关文章。")])]),e._v(" "),n("p",[e._v("在前边的系列文章中，笔者为大家介绍了驱动Netty整个框架运转的核心引擎Reactor的创建，启动，运行的全流程。从现在开始Netty的整个核心框架就开始运转起来开始工作了，本文要介绍的主要内容就是Netty在启动之后要做的第一件事件：监听端口地址，高效接收客户端连接。")]),e._v(" "),n("p",[e._v("在"),n("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg2MzU3Mjc3Ng==&mid=2247483737&idx=1&sn=7ef3afbb54289c6e839eed724bb8a9d6&chksm=ce77c71ef9004e08e3d164561e3a2708fc210c05408fa41f7fe338d8e85f39c1ad57519b614e&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("?《聊聊Netty那些事儿之从内核角度看IO模型》"),n("OutboundLink")],1),e._v("一文中，我们是从整个网络框架的基石IO模型的角度整体阐述了下Netty的IO线程模型。")]),e._v(" "),n("p",[e._v("而Netty中的Reactor正是IO线程在Netty中的模型定义。Reactor在Netty中是以Group的形式出现的，分为:")]),e._v(" "),n("ul",[n("li",[e._v("主Reactor线程组也就是我们在启动代码中配置的"),n("code",[e._v("EventLoopGroup bossGroup")]),e._v(",main reactor group中的reactor主要负责监听客户端连接事件，高效的处理客户端连接。也是本文我们要介绍的重点。")]),e._v(" "),n("li",[e._v("从Reactor线程组也就是我们在启动代码中配置的"),n("code",[e._v("EventLoopGroup workerGroup")]),e._v("，sub reactor group中的reactor主要负责处理客户端连接上的IO事件，以及异步任务的执行。")])]),e._v(" "),n("p",[e._v("最后我们得出Netty的整个IO模型如下：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNialDtXCOD5vvVGh56FT2yKauwTch6oYbrn1icPuYKaqY8nPibicWv66sQfw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("netty中的reactor.png")]),e._v(" "),n("p",[e._v("本文我们讨论的重点就是MainReactorGroup的核心工作上图中所示的步骤1，步骤2，步骤3。")]),e._v(" "),n("p",[e._v("在从整体上介绍完Netty的IO模型之后，我们又在"),n("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg2MzU3Mjc3Ng==&mid=2247483907&idx=1&sn=084c470a8fe6234c2c9461b5f713ff30&chksm=ce77c444f9004d52e7c6244bee83479070effb0bc59236df071f4d62e91e25f01715fca53696&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("?《Reactor在Netty中的实现(创建篇)》"),n("OutboundLink")],1),e._v("中完整的介绍了Netty框架的骨架主从Reactor组的搭建过程，阐述了Reactor是如何被创建出来的，并介绍了它的核心组件如下图所示：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNiaRn9ZX4dJLJdyxSEEXojs5lEmPNiaBfstFOG95KMGibJed4vo3xMhnE6g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("image.png")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("thread")]),e._v("即为Reactor中的IO线程，主要负责监听IO事件，处理IO任务，执行异步任务。")]),e._v(" "),n("li",[n("code",[e._v("selector")]),e._v("则是JDK NIO对操作系统底层IO多路复用技术实现的封装。用于监听IO就绪事件。")]),e._v(" "),n("li",[n("code",[e._v("taskQueue")]),e._v("用于保存Reactor需要执行的异步任务，这些异步任务可以由用户在业务线程中向Reactor提交，也可以是Netty框架提交的一些自身核心的任务。")]),e._v(" "),n("li",[n("code",[e._v("scheduledTaskQueue")]),e._v("则是保存Reactor中执行的定时任务。代替了原有的时间轮来执行延时任务。")]),e._v(" "),n("li",[n("code",[e._v("tailQueue")]),e._v("保存了在Reactor需要执行的一些尾部收尾任务，在普通任务执行完后 Reactor线程会执行尾部任务，比如对Netty 的运行状态做一些统计数据，例如任务循环的耗时、占用物理内存的大小等等")])]),e._v(" "),n("p",[e._v("在骨架搭建完毕之后，我们随后又在在"),n("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg2MzU3Mjc3Ng==&mid=2247484005&idx=1&sn=52f51269902a58f40d33208421109bc3&chksm=ce77c422f9004d340e5b385ef6ba24dfba1f802076ace80ad6390e934173a10401e64e13eaeb&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("?《详细图解Netty Reactor启动全流程》"),n("OutboundLink")],1),e._v("》一文中介绍了"),n("strong",[e._v("本文的主角服务端NioServerSocketChannel的创建，初始化，绑定端口地址，向main reactor注册监听"),n("code",[e._v("OP_ACCEPT事件")]),e._v("的完整过程")]),e._v("。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNiaMNnpeQav9HykpMEYenDPdshUtLBMicYHd5F9HwloOsE6FfLVtGW0XRA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("Reactor启动后的结构.png")]),e._v(" "),n("p",[e._v("main reactor如何处理OP_ACCEPT事件将会是本文的主要内容。")]),e._v(" "),n("p",[e._v("自此Netty框架的main reactor group已经启动完毕，开始准备监听OP_accept事件，当客户端连接上来之后，OP_ACCEPT事件活跃，main reactor开始处理OP_ACCEPT事件接收客户端连接了。")]),e._v(" "),n("p",[e._v("而netty中的IO事件分为：OP_ACCEPT事件，OP_READ事件，OP_WRITE事件和OP_CONNECT事件，netty对于IO事件的监听和处理统一封装在Reactor模型中，这四个IO事件的处理过程也是我们后续文章中要单独拿出来介绍的，本文我们聚焦OP_ACCEPT事件的处理。")]),e._v(" "),n("p",[e._v("而为了让大家能够对IO事件的处理有一个完整性的认识，笔者写了"),n("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg2MzU3Mjc3Ng==&mid=2247484087&idx=1&sn=0c065780e0f05c23c8e6465ede86cba0&chksm=ce77c4f0f9004de63be369a664105708bc5975b52993f4a6df223caed34cc1ef6185a16acd75&token=997171731&lang=zh_CN&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("?《一文聊透Netty核心引擎Reactor的运转架构》"),n("OutboundLink")],1),e._v("这篇文章，在文章中详细介绍了Reactor线程的整体运行框架。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNiavrDh48SPMAM6BFPzvme6iceQT8aibcKY54GLfSOm2F7yCqynlkI9HkOg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("Reactor线程运行时结构.png")]),e._v(" "),n("p",[e._v("Reactor线程会在一个死循环中996不停的运转，在循环中会不断的轮询监听Selector上的IO事件，当IO事件活跃后，Reactor从Selector上被唤醒转去执行IO就绪事件的处理，在这个过程中我们引出了上述四种IO事件的处理入口函数。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    private void processSelectedKey(SelectionKey k, AbstractNioChannel ch) {\n        //获取Channel的底层操作类Unsafe\n        final AbstractNioChannel.NioUnsafe unsafe = ch.unsafe();\n        if (!k.isValid()) {\n            ......如果SelectionKey已经失效则关闭对应的Channel......\n        }\n\n        try {\n            //获取IO就绪事件\n            int readyOps = k.readyOps();\n            //处理Connect事件\n            if ((readyOps & SelectionKey.OP_CONNECT) != 0) {\n                int ops = k.interestOps();\n                //移除对Connect事件的监听，否则Selector会一直通知\n                ops &= ~SelectionKey.OP_CONNECT;\n                k.interestOps(ops);\n                //触发channelActive事件处理Connect事件\n                unsafe.finishConnect();\n            }\n\n            //处理Write事件\n            if ((readyOps & SelectionKey.OP_WRITE) != 0) {\n                ch.unsafe().forceFlush();\n            }\n\n             //处理Read事件或者Accept事件\n            if ((readyOps & (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != 0 || readyOps == 0) {\n                unsafe.read();\n            }\n        } catch (CancelledKeyException ignored) {\n            unsafe.close(unsafe.voidPromise());\n        }\n    }\n")])])]),n("p",[e._v("本文笔者将会为大家重点介绍"),n("code",[e._v("OP_ACCEPT事件")]),e._v("的处理入口函数"),n("code",[e._v("unsafe.read()")]),e._v("的整个源码实现。")]),e._v(" "),n("p",[e._v("当客户端连接完成三次握手之后，main reactor中的selector产生"),n("code",[e._v("OP_ACCEPT事件")]),e._v("活跃，main reactor随即被唤醒，来到了"),n("code",[e._v("OP_ACCEPT事件")]),e._v("的处理入口函数开始接收客户端连接。")]),e._v(" "),n("h2",{attrs:{id:"_1-main-reactor处理op-accept事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-main-reactor处理op-accept事件"}},[e._v("#")]),e._v(" 1. Main Reactor处理OP_ACCEPT事件")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNiaWfVAUiaQYd2Sebxwzf9VCWLhcbIISY1nBSug2YiaVEPewXhib8D8EUk2A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("OP_ACCEPT事件活跃.png")]),e._v(" "),n("p",[e._v("当"),n("code",[e._v("Main Reactor")]),e._v("轮询到"),n("code",[e._v("NioServerSocketChannel")]),e._v("上的"),n("code",[e._v("OP_ACCEPT事件")]),e._v("就绪时，Main Reactor线程就会从"),n("code",[e._v("JDK Selector")]),e._v("上的阻塞轮询API"),n("code",[e._v("selector.select(timeoutMillis)")]),e._v("调用中返回。转而去处理"),n("code",[e._v("NioServerSocketChannel")]),e._v("上的"),n("code",[e._v("OP_ACCEPT事件")]),e._v("。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public final class NioEventLoop extends SingleThreadEventLoop {\n\n    private void processSelectedKey(SelectionKey k, AbstractNioChannel ch) {\n        final AbstractNioChannel.NioUnsafe unsafe = ch.unsafe();\n        ..............省略.................\n\n        try {\n            int readyOps = k.readyOps();\n\n            if ((readyOps & SelectionKey.OP_CONNECT) != 0) {\n               ..............处理OP_CONNECT事件.................\n            }\n\n\n            if ((readyOps & SelectionKey.OP_WRITE) != 0) {\n              ..............处理OP_WRITE事件.................\n            }\n\n\n            if ((readyOps & (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != 0 || readyOps == 0) {\n                //本文重点处理OP_ACCEPT事件\n                unsafe.read();\n            }\n        } catch (CancelledKeyException ignored) {\n            unsafe.close(unsafe.voidPromise());\n        }\n    }\n\n}\n")])])]),n("ul",[n("li",[e._v("处理IO就绪事件的入口函数"),n("code",[e._v("processSelectedKey")]),e._v("中的参数"),n("code",[e._v("AbstractNioChannel ch")]),e._v("正是Netty服务端"),n("code",[e._v("NioServerSocketChannel")]),e._v("。因为此时的执行线程为main reactor线程，而main reactor上注册的正是netty服务端NioServerSocketChannel负责监听端口地址，接收客户端连接。")]),e._v(" "),n("li",[e._v("通过"),n("code",[e._v("ch.unsafe()")]),e._v("获取到的NioUnsafe操作类正是NioServerSocketChannel中对底层JDK NIO ServerSocketChannel的Unsafe底层操作类。")])]),e._v(" "),n("blockquote",[n("p",[n("code",[e._v("Unsafe接口")]),e._v("是Netty对Channel底层操作行为的封装，比如NioServerSocketChannel的底层Unsafe操作类干的事情就是"),n("code",[e._v("绑定端口地址")]),e._v("，"),n("code",[e._v("处理OP_ACCEPT事件")]),e._v("。")])]),e._v(" "),n("p",[e._v("这里我们看到，Netty将"),n("code",[e._v("OP_ACCEPT事件")]),e._v("处理的入口函数封装在"),n("code",[e._v("NioServerSocketChannel")]),e._v("里的底层操作类Unsafe的"),n("code",[e._v("read")]),e._v("方法中。")]),e._v(" "),n("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),n("p",[e._v("而NioServerSocketChannel中的Unsafe操作类实现类型为"),n("code",[e._v("NioMessageUnsafe")]),e._v("定义在上图继承结构中的"),n("code",[e._v("AbstractNioMessageChannel父类中")]),e._v("。")]),e._v(" "),n("p",[e._v("下面我们到"),n("code",[e._v("NioMessageUnsafe#read")]),e._v("方法中来看下Netty对"),n("code",[e._v("OP_ACCPET事件")]),e._v("的具体处理过程：")]),e._v(" "),n("h2",{attrs:{id:"_2-接收客户端连接核心流程框架总览"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-接收客户端连接核心流程框架总览"}},[e._v("#")]),e._v(" 2. 接收客户端连接核心流程框架总览")]),e._v(" "),n("p",[e._v("我们还是按照老规矩，先从整体上把整个OP_ACCEPT事件的逻辑处理框架提取出来，让大家先总体俯视下流程全貌，然后在针对每个核心点位进行各个击破。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNiaDjWPOibC4yyvicZOQROz0VprRQdxN0scINPgOrCAVGxL1bUoV6ia4YJXQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("接收客户端连接.png")]),e._v(" "),n("p",[e._v("main reactor线程是在一个"),n("code",[e._v("do...while{...}")]),e._v("循环read loop中不断的调用JDK NIO "),n("code",[e._v("serverSocketChannel.accept()")]),e._v("方法来接收完成三次握手的客户端连接"),n("code",[e._v("NioSocketChannel")]),e._v("的，并将接收到的客户端连接NioSocketChannel临时保存在"),n("code",[e._v("List<Object> readBuf")]),e._v("集合中，后续会服务端NioServerSocketChannel的pipeline中通过ChannelRead事件来传递，最终会在ServerBootstrapAcceptor这个ChannelHandler中被处理初始化，并将其注册到Sub Reator Group中。")]),e._v(" "),n("p",[e._v("这里的read loop循环会被限定只能读取"),n("strong",[e._v("16次")]),e._v("，当main reactor从NioServerSocketChannel中读取客户端连接NioSocketChannel的次数达到"),n("strong",[e._v("16次")]),e._v("之后，无论此时是否还有客户端连接都不能在继续读取了。")]),e._v(" "),n("p",[e._v("因为我们在"),n("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg2MzU3Mjc3Ng==&mid=2247484087&idx=1&sn=0c065780e0f05c23c8e6465ede86cba0&chksm=ce77c4f0f9004de63be369a664105708bc5975b52993f4a6df223caed34cc1ef6185a16acd75&token=997171731&lang=zh_CN&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("?《一文聊透Netty核心引擎Reactor的运转架构》"),n("OutboundLink")],1),e._v("一文中提到，netty对reactor线程压榨的比较狠，要干的事情很多，除了要监听轮询IO就绪事件，处理IO就绪事件，还需要执行用户和netty框架本省提交的异步任务和定时任务。")]),e._v(" "),n("p",[e._v("所以这里的main reactor线程不能在read loop中无限制的执行下去，因为还需要分配时间去执行异步任务，不能因为无限制的接收客户端连接而耽误了异步任务的执行。所以这里将read loop的循环次数限定为16次。")]),e._v(" "),n("p",[e._v("如果main reactor线程在read loop中读取客户端连接NioSocketChannel的次数已经满了16次，即使此时还有客户端连接未接收，那么main reactor线程也不会再去接收了，而是转去执行异步任务，当异步任务执行完毕后，还会在回来执行剩余接收连接的任务。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNiavrDh48SPMAM6BFPzvme6iceQT8aibcKY54GLfSOm2F7yCqynlkI9HkOg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("Reactor线程运行时结构.png")]),e._v(" "),n("p",[e._v("main reactor线程退出read loop循环的条件有两个：")]),e._v(" "),n("ol",[n("li",[e._v("在限定的16次读取中，已经没有新的客户端连接要接收了。退出循环。")]),e._v(" "),n("li",[e._v("从NioServerSocketChannel中读取客户端连接的次数达到了16次，无论此时是否还有客户端连接都需要退出循环。")])]),e._v(" "),n("p",[e._v("以上就是Netty在接收客户端连接时的整体核心逻辑，下面笔者将这部分逻辑的核心源码实现框架提取出来，方便大家根据上述核心逻辑与源码中的处理模块对应起来，还是那句话，这里只需要总体把握核心处理流程，不需要读懂每一行代码，笔者会在文章的后边分模块来各个击破它们。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public abstract class AbstractNioMessageChannel extends AbstractNioChannel {\n\n  private final class NioMessageUnsafe extends AbstractNioUnsafe {\n\n        //存放连接建立后，创建的客户端SocketChannel\n        private final List<Object> readBuf = new ArrayList<Object>();\n\n        @Override\n        public void read() {\n            //必须在Main Reactor线程中执行\n            assert eventLoop().inEventLoop();\n            //注意下面的config和pipeline都是服务端ServerSocketChannel中的\n            final ChannelConfig config = config();\n            final ChannelPipeline pipeline = pipeline();\n            //创建接收数据Buffer分配器（用于分配容量大小合适的byteBuffer用来容纳接收数据）\n            //在接收连接的场景中，这里的allocHandle只是用于控制read loop的循环读取创建连接的次数。\n            final RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();\n            allocHandle.reset(config);\n\n            boolean closed = false;\n            Throwable exception = null;\n            try {\n                try {\n                    do {\n                        //底层调用NioServerSocketChannel->doReadMessages 创建客户端SocketChannel\n                        int localRead = doReadMessages(readBuf);\n\n                        //已无新的连接可接收则退出read loop\n                        if (localRead == 0) {\n                            break;\n                        }\n                        if (localRead < 0) {\n                            closed = true;\n                            break;\n                        }\n                        //统计在当前事件循环中已经读取到得Message数量（创建连接的个数）\n                        allocHandle.incMessagesRead(localRead);\n                    } while (allocHandle.continueReading());//判断是否已经读满16次\n                } catch (Throwable t) {\n                    exception = t;\n                }\n\n                int size = readBuf.size();\n                for (int i = 0; i < size; i ++) {\n                    readPending = false;\n                    //在NioServerSocketChannel对应的pipeline中传播ChannelRead事件\n                    //初始化客户端SocketChannel，并将其绑定到Sub Reactor线程组中的一个Reactor上\n                    pipeline.fireChannelRead(readBuf.get(i));\n                }\n                //清除本次accept 创建的客户端SocketChannel集合\n                readBuf.clear();\n                allocHandle.readComplete();\n                //触发readComplete事件传播\n                pipeline.fireChannelReadComplete();\n                ....................省略............\n            } finally {\n                ....................省略............\n            }\n        }\n    }\n  }\n}\n")])])]),n("p",[e._v("这里首先要通过断言"),n("code",[e._v("assert eventLoop().inEventLoop()")]),e._v("确保处理接收客户端连接的线程必须为Main Reactor 线程。")]),e._v(" "),n("p",[e._v("而main reactor中主要注册的是服务端NioServerSocketChannel，主要负责处理"),n("code",[e._v("OP_ACCEPT事件")]),e._v("，所以当前main reactor线程是在NioServerSocketChannel中执行接收连接的工作。")]),e._v(" "),n("p",[e._v("所以这里我们通过"),n("code",[e._v("config()")]),e._v("获取到的是NioServerSocketChannel的属性配置类"),n("code",[e._v("NioServerSocketChannelConfig")]),e._v(",它是在Reactor的启动阶段被创建出来的。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    public NioServerSocketChannel(ServerSocketChannel channel) {\n        //父类AbstractNioChannel中保存JDK NIO原生ServerSocketChannel以及要监听的事件OP_ACCEPT\n        super(null, channel, SelectionKey.OP_ACCEPT);\n        //DefaultChannelConfig中设置用于Channel接收数据用的buffer->AdaptiveRecvByteBufAllocator\n        config = new NioServerSocketChannelConfig(this, javaChannel().socket());\n    }\n")])])]),n("p",[e._v("同理这里通过"),n("code",[e._v("pipeline()")]),e._v("获取到的也是NioServerSocketChannel中的"),n("code",[e._v("pipeline")]),e._v("。它会在NioServerSocketChannel向main reactor注册成功之后被初始化。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNiaLCnvGuX5Vnkyf8vov0T9bwuSrXAQAKQWoCQjzhgBbkfQ52iaDe6282Q/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("ServerChannelPipeline完整结构.png")]),e._v(" "),n("p",[e._v("前边提到main reactor线程会被限定只能在read loop中向NioServerSocketChannel读取16次客户端连接，所以在开始read loop之前，我们需要创建一个能够保存记录读取次数的对象，在每次read loop循环之后，可以根据这个对象来判断是否结束read loop。")]),e._v(" "),n("p",[e._v("这个对象就是这里的 "),n("code",[e._v("RecvByteBufAllocator.Handle allocHandle")]),e._v("专门用于统计read loop中接收客户端连接的次数，以及判断是否该结束read loop转去执行异步任务。")]),e._v(" "),n("p",[e._v("当这一切准备就绪之后，main reactor线程就开始在"),n("code",[e._v("do{....}while(...)")]),e._v("循环中接收客户端连接了。")]),e._v(" "),n("p",[e._v("在 read loop中通过调用"),n("code",[e._v("doReadMessages函数")]),e._v("接收完成三次握手的客户端连接，底层会调用到JDK NIO ServerSocketChannel的accept方法，从内核全连接队列中取出客户端连接。")]),e._v(" "),n("p",[e._v("返回值"),n("code",[e._v("localRead")]),e._v("表示接收到了多少客户端连接，客户端连接通过accept方法只会一个一个的接收，所以这里的"),n("code",[e._v("localRead")]),e._v("正常情况下都会返回"),n("code",[e._v("1")]),e._v("，当"),n("code",[e._v("localRead <= 0")]),e._v("时意味着已经没有新的客户端连接可以接收了，本次main reactor接收客户端的任务到这里就结束了，跳出read loop。开始新的一轮IO事件的监听处理。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    public static SocketChannel accept(final ServerSocketChannel serverSocketChannel) throws IOException {\n        try {\n            return AccessController.doPrivileged(new PrivilegedExceptionAction<SocketChannel>() {\n                @Override\n                public SocketChannel run() throws IOException {\n                    return serverSocketChannel.accept();\n                }\n            });\n        } catch (PrivilegedActionException e) {\n            throw (IOException) e.getCause();\n        }\n    }\n")])])]),n("p",[e._v("随后会将接收到的客户端连接占时存放到"),n("code",[e._v("List<Object> readBuf")]),e._v("集合中。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  private final class NioMessageUnsafe extends AbstractNioUnsafe {\n\n        //存放连接建立后，创建的客户端SocketChannel\n        private final List<Object> readBuf = new ArrayList<Object>();\n}\n")])])]),n("p",[e._v("调用"),n("code",[e._v("allocHandle.incMessagesRead")]),e._v("统计本次事件循环中接收到的客户端连接个数，最后在read loop末尾通过"),n("code",[e._v("allocHandle.continueReading")]),e._v("判断是否达到了限定的16次。从而决定main reactor线程是继续接收客户端连接还是转去执行异步任务。")]),e._v(" "),n("p",[e._v("main reactor线程退出read loop的两个条件：")]),e._v(" "),n("ol",[n("li",[e._v("在限定的16次读取中，已经没有新的客户端连接要接收了。退出循环。")]),e._v(" "),n("li",[e._v("从NioServerSocketChannel中读取客户端连接的次数达到了16次，无论此时是否还有客户端连接都需要退出循环。")])]),e._v(" "),n("p",[e._v("当满足以上两个退出条件时，main reactor线程就会退出read loop，由于在read loop中接收到的客户端连接全部暂存在"),n("code",[e._v("List<Object> readBuf")]),e._v("集合中,随后开始遍历readBuf，在NioServerSocketChannel的pipeline中传播ChannelRead事件。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("                int size = readBuf.size();\n                for (int i = 0; i < size; i ++) {\n                    readPending = false;\n                    //NioServerSocketChannel对应的pipeline中传播read事件\n                    //io.netty.bootstrap.ServerBootstrap.ServerBootstrapAcceptor.channelRead\n                    //初始化客户端SocketChannel，并将其绑定到Sub Reactor线程组中的一个Reactor上\n                    pipeline.fireChannelRead(readBuf.get(i));\n                }\n")])])]),n("p",[e._v("最终pipeline中的ChannelHandler(ServerBootstrapAcceptor)会响应ChannelRead事件，并在相应回调函数中初始化客户端NioSocketChannel，并将其注册到Sub Reactor Group中。此后客户端NioSocketChannel绑定到的sub reactor就开始监听处理客户端连接上的读写事件了。")]),e._v(" "),n("p",[e._v("Netty整个接收客户端的逻辑过程如下图步骤1，2，3所示。")]),e._v(" "),n("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)netty中的reactor.png")]),e._v(" "),n("p",[e._v("以上内容就是笔者提取出来的整体流程框架，下面我们来将其中涉及到的重要核心模块拆开，一个一个详细解读下。")]),e._v(" "),n("h2",{attrs:{id:"_3-recvbytebufallocator简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-recvbytebufallocator简介"}},[e._v("#")]),e._v(" 3. RecvByteBufAllocator简介")]),e._v(" "),n("p",[e._v("Reactor在处理对应Channel上的IO数据时，都会采用一个"),n("code",[e._v("ByteBuffer")]),e._v("来接收Channel上的IO数据。而本小节要介绍的RecvByteBufAllocator正是用来分配ByteBuffer的一个分配器。")]),e._v(" "),n("p",[e._v("还记得这个"),n("code",[e._v("RecvByteBufAllocator")]),e._v("在哪里被创建的吗？？")]),e._v(" "),n("p",[e._v("在"),n("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg2MzU3Mjc3Ng==&mid=2247483907&idx=1&sn=084c470a8fe6234c2c9461b5f713ff30&chksm=ce77c444f9004d52e7c6244bee83479070effb0bc59236df071f4d62e91e25f01715fca53696&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("?《聊聊Netty那些事儿之Reactor在Netty中的实现(创建篇)》"),n("OutboundLink")],1),e._v("一文中，在介绍"),n("code",[e._v("NioServerSocketChannel")]),e._v("的创建过程中提到，对应Channel的配置类NioServerSocketChannelConfig也会随着NioServerSocketChannel的创建而创建。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    public NioServerSocketChannel(ServerSocketChannel channel) {\n        super(null, channel, SelectionKey.OP_ACCEPT);\n        config = new NioServerSocketChannelConfig(this, javaChannel().socket());\n    }\n")])])]),n("p",[e._v("在创建"),n("code",[e._v("NioServerSocketChannelConfig")]),e._v("的过程中会创建"),n("code",[e._v("RecvByteBufAllocator")]),e._v("。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("   public DefaultChannelConfig(Channel channel) {\n            this(channel, new AdaptiveRecvByteBufAllocator());\n    }\n")])])]),n("p",[e._v("这里我们看到NioServerSocketChannel中的RecvByteBufAllocator实际类型为"),n("code",[e._v("AdaptiveRecvByteBufAllocator")]),e._v("，顾名思义，这个类型的RecvByteBufAllocator可以根据Channel上每次到来的IO数据大小来自适应动态调整ByteBuffer的容量。")]),e._v(" "),n("p",[e._v("对于服务端NioServerSocketChannel来说，它上边的IO数据就是客户端的连接，它的长度和类型都是固定的，所以在接收客户端连接的时候并不需要这样的一个ByteBuffer来接收，我们会将接收到的客户端连接存放在"),n("code",[e._v("List<Object> readBuf")]),e._v("集合中")]),e._v(" "),n("p",[e._v("对于客户端NioSocketChannel来说，它上边的IO数据时客户端发送来的网络数据，长度是不定的，所以才会需要这样一个可以根据每次IO数据的大小来自适应动态调整容量的ByteBuffer来接收。")]),e._v(" "),n("p",[e._v("那么看起来这个RecvByteBufAllocator和本文的主题不是很关联，因为在接收连接的过程中并不会怎么用到它，这个类笔者还会在后面的文章中详细介绍，之所以这里把它拎出来单独介绍是因为它和本文开头提到的Bug有关系，这个Bug就是由这个类引起的。")]),e._v(" "),n("h3",{attrs:{id:"_3-1-recvbytebufallocator-handle的获取"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-recvbytebufallocator-handle的获取"}},[e._v("#")]),e._v(" 3.1 RecvByteBufAllocator.Handle的获取")]),e._v(" "),n("p",[e._v("在本文中，我们是通过NioServerSocketChannel中的unsafe底层操作类来获取RecvByteBufAllocator.Handle的")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("final RecvByteBufAllocator.Handle allocHandle = unsafe().recvBufAllocHandle();\nprotected abstract class AbstractUnsafe implements Unsafe {\n        @Override\n        public RecvByteBufAllocator.Handle recvBufAllocHandle() {\n            if (recvHandle == null) {\n                recvHandle = config().getRecvByteBufAllocator().newHandle();\n            }\n            return recvHandle;\n        }\n}\n")])])]),n("p",[e._v("我们看到最终会在NioServerSocketChannel的配置类NioServerSocketChannelConfig中获取到"),n("code",[e._v("AdaptiveRecvByteBufAllocator")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class DefaultChannelConfig implements ChannelConfig {\n    //用于Channel接收数据用的buffer分配器  类型为AdaptiveRecvByteBufAllocator\n    private volatile RecvByteBufAllocator rcvBufAllocator;\n}\n")])])]),n("p",[n("code",[e._v("AdaptiveRecvByteBufAllocator")]),e._v("中会创建自适应动态调整容量的ByteBuffer分配器。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class AdaptiveRecvByteBufAllocator extends DefaultMaxMessagesRecvByteBufAllocator {\n\n    @Override\n    public Handle newHandle() {\n        return new HandleImpl(minIndex, maxIndex, initial);\n    }\n    \n    private final class HandleImpl extends MaxMessageHandle {\n                  .................省略................\n    }\n}\n")])])]),n("p",[e._v("这里的"),n("code",[e._v("newHandle")]),e._v("方法返回的具体类型为"),n("code",[e._v("MaxMessageHandle")]),e._v("，这个"),n("code",[e._v("MaxMessageHandle")]),e._v("里边保存了每次从"),n("code",[e._v("Channel")]),e._v("中读取"),n("code",[e._v("IO数据")]),e._v("的容量指标，方便下次读取时分配合适大小的"),n("code",[e._v("buffer")]),e._v("。")]),e._v(" "),n("p",[e._v("每次在使用"),n("code",[e._v("allocHandle")]),e._v("前需要调用"),n("code",[e._v("allocHandle.reset(config);")]),e._v("重置里边的统计指标。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    public abstract class MaxMessageHandle implements ExtendedHandle {\n        private ChannelConfig config;\n        //每次事件轮询时，最多读取16次\n        private int maxMessagePerRead;\n        //本次事件轮询总共读取的message数,这里指的是接收连接的数量\n        private int totalMessages;\n        //本次事件轮询总共读取的字节数\n        private int totalBytesRead;\n\n       @Override\n        public void reset(ChannelConfig config) {\n            this.config = config;\n            //默认每次最多读取16次\n            maxMessagePerRead = maxMessagesPerRead();\n            totalMessages = totalBytesRead = 0;\n        }\n    }\n")])])]),n("ul",[n("li",[n("strong",[e._v("maxMessagePerRead")]),e._v("：用于控制每次read loop里最大可以循环读取的次数，默认为16次，可在启动配置类"),n("code",[e._v("ServerBootstrap")]),e._v("中通过"),n("code",[e._v("ChannelOption.MAX_MESSAGES_PER_READ")]),e._v("选项设置。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ServerBootstrap b = new ServerBootstrap();\nb.group(bossGroup, workerGroup)\n  .channel(NioServerSocketChannel.class)\n  .option(ChannelOption.MAX_MESSAGES_PER_READ, 自定义次数)\n")])])]),n("ul",[n("li",[n("strong",[e._v("totalMessages")]),e._v("：用于统计read loop中总共接收的连接个数，每次read loop循环后会调用"),n("code",[e._v("allocHandle.incMessagesRead")]),e._v("增加记录接收到的连接个数。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("        @Override\n        public final void incMessagesRead(int amt) {\n            totalMessages += amt;\n        }\n")])])]),n("ul",[n("li",[n("strong",[e._v("totalBytesRead")]),e._v("：用于统计在read loop中总共接收到客户端连接上的数据大小，这个字段主要用于sub reactor在接收客户端NioSocketChannel上的网络数据用的，本文我们介绍的是main reactor接收客户端连接，所以这里并不会用到这个字段。这个字段会在sub reactor每次读取完NioSocketChannel上的网络数据时增加记录。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("        @Override\n        public void lastBytesRead(int bytes) {\n            lastBytesRead = bytes;\n            if (bytes > 0) {\n                totalBytesRead += bytes;\n            }\n        }\n")])])]),n("p",[e._v("MaxMessageHandler中还有一个非常重要的方法就是在每次read loop末尾会调用"),n("code",[e._v("allocHandle.continueReading()")]),e._v("方法来判断读取连接次数是否已满16次，来决定main reactor线程是否退出循环。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("                  do {\n                        //底层调用NioServerSocketChannel->doReadMessages 创建客户端SocketChannel\n                        int localRead = doReadMessages(readBuf);\n                        if (localRead == 0) {\n                            break;\n                        }\n                        if (localRead < 0) {\n                            closed = true;\n                            break;\n                        }\n                        //统计在当前事件循环中已经读取到得Message数量（创建连接的个数）\n                        allocHandle.incMessagesRead(localRead);\n                    } while (allocHandle.continueReading());\n")])])]),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNiadlS4S4GAOnWGfc4cAFuhpziasUfsEWHxBfh3nKvLNvBAFAWEAP2sJibw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("image.png")]),e._v(" "),n("p",[e._v("红框中圈出来的两个判断条件和本文主题无关，我们这里不需要关注，笔者会在后面的文章详细介绍。")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("totalMessages < maxMessagePerRead")]),e._v("：在本文的接收客户端连接场景中，这个条件用于判断main reactor线程在read loop中的读取次数是否超过了16次。如果超过16次就会返回false，main reactor线程退出循环。")]),e._v(" "),n("li",[n("code",[e._v("totalBytesRead > 0")]),e._v("：用于判断当客户端NioSocketChannel上的OP_READ事件活跃时，sub reactor线程在read loop中是否读取到了网络数据。")])]),e._v(" "),n("p",[e._v("以上内容就是RecvByteBufAllocator.Handle在接收客户端连接场景下的作用，大家这里仔细看下这个"),n("code",[e._v("allocHandle.continueReading()")]),e._v("方法退出循环的判断条件，再结合整个"),n("code",[e._v("do{....}while(...)")]),e._v("接收连接循环体，感受下是否哪里有些不对劲？Bug即将出现~~~")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNia73S7DDn065yic2ibMIJ2CB70d9VuqkWqj9ydiaAk4yDaKbHZ5Z3rlfQfA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("image.png")]),e._v(" "),n("h2",{attrs:{id:"_4-啊哈-bug"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-啊哈-bug"}},[e._v("#")]),e._v(" 4. 啊哈！！Bug ! !")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNia1WWpXwfWKkgmhBW2wuBConIInzvqErmKhCjykxao8tPMQq4aMzRMWw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("image.png")]),e._v(" "),n("p",[e._v("netty不论是在本文中处理接收客户端连接的场景还是在处理接收客户端连接上的网络数据场景都会在一个"),n("code",[e._v("do{....}while(...)")]),e._v("循环read loop中不断的处理。")]),e._v(" "),n("p",[e._v("同时也都会利用在上一小节中介绍的"),n("code",[e._v("RecvByteBufAllocator.Handle")]),e._v("来记录每次read loop接收到的连接个数和从连接上读取到的网络数据大小。")]),e._v(" "),n("p",[e._v("从而在read loop的末尾都会通过"),n("code",[e._v("allocHandle.continueReading()")]),e._v("方法判断是否应该退出read loop循环结束连接的接收流程或者是结束连接上数据的读取流程。")]),e._v(" "),n("p",[e._v("无论是用于接收客户端连接的main reactor也好还是用于接收客户端连接上的网络数据的sub reactor也好，它们的运行框架都是一样的，只不过是具体分工不同。")]),e._v(" "),n("p",[e._v("所以netty这里想用统一的"),n("code",[e._v("RecvByteBufAllocator.Handle")]),e._v("来处理以上两种场景。")]),e._v(" "),n("p",[e._v("而"),n("code",[e._v("RecvByteBufAllocator.Handle")]),e._v("中的"),n("code",[e._v("totalBytesRead")]),e._v("字段主要记录sub reactor线程在处理客户端NioSocketChannel中OP_READ事件活跃时，总共在read loop中读取到的网络数据，而这里是main reactor线程在接收客户端连接所以这个字段并不会被设置。totalBytesRead字段的值在本文中永远会是"),n("code",[e._v("0")]),e._v("。")]),e._v(" "),n("p",[e._v("所以无论同时有多少个客户端并发连接到服务端上，在接收连接的这个read loop中永远只会接受一个连接就会退出循环，因为"),n("code",[e._v("allocHandle.continueReading()方法")]),e._v("中的判断条件"),n("code",[e._v("totalBytesRead > 0")]),e._v("永远会返回"),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("                  do {\n                        //底层调用NioServerSocketChannel->doReadMessages 创建客户端SocketChannel\n                        int localRead = doReadMessages(readBuf);\n                        if (localRead == 0) {\n                            break;\n                        }\n                        if (localRead < 0) {\n                            closed = true;\n                            break;\n                        }\n                        //统计在当前事件循环中已经读取到得Message数量（创建连接的个数）\n                        allocHandle.incMessagesRead(localRead);\n                    } while (allocHandle.continueReading());\n")])])]),n("p",[n("strong",[e._v("而netty的本意是在这个read loop循环中尽可能多的去接收客户端的并发连接，同时又不影响main reactor线程执行异步任务。但是由于这个Bug，main reactor在这个循环中只执行一次就结束了。这也一定程度上就影响了netty的吞吐")]),e._v("。")]),e._v(" "),n("p",[e._v("让我们想象下这样的一个场景，当有16个客户端同时并发连接到了服务端，这时NioServerSocketChannel上的"),n("code",[e._v("OP_ACCEPT事件")]),e._v("活跃，main reactor从Selector上被唤醒，随后执行"),n("code",[e._v("OP_ACCEPT事件")]),e._v("的处理。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public final class NioEventLoop extends SingleThreadEventLoop {\n    @Override\n    protected void run() {\n        int selectCnt = 0;\n        for (;;) {\n            try { \n                int strategy;\n                try {\n                    strategy = selectStrategy.calculateStrategy(selectNowSupplier, hasTasks());\n                    switch (strategy) {\n                    case SelectStrategy.CONTINUE:                  \n                          ............省略.........\n                    case SelectStrategy.BUSY_WAIT:\n\n                          ............省略.........\n                    case SelectStrategy.SELECT:\n                            ............监听轮询IO事件.........\n                    default:\n                    }\n                } catch (IOException e) {\n                    ............省略.........\n                }\n\n                ............处理IO就绪事件.........\n                ............执行异步任务.........\n    }\n}\n")])])]),n("p",[e._v("但是由于这个Bug的存在，main reactor在接收客户端连接的这个read loop中只接收了一个客户端连接就匆匆返回了。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("      private final class NioMessageUnsafe extends AbstractNioUnsafe {\n                    do {\n                        int localRead = doReadMessages(readBuf);\n                        .........省略...........\n                    } while (allocHandle.continueReading());\n     }\n")])])]),n("p",[e._v("然后根据下图中这个Reactor的运行结构去执行异步任务，随后绕一大圈又会回到"),n("code",[e._v("NioEventLoop#run")]),e._v("方法中重新发起一轮OP_ACCEPT事件轮询。")]),e._v(" "),n("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)Reactor线程运行时结构.png")]),e._v(" "),n("p",[e._v("由于现在还有15个客户端并发连接没有被接收，所以此时Main Reactor线程并不会在"),n("code",[e._v("selector.select()")]),e._v("上阻塞，最终绕一圈又会回到"),n("code",[e._v("NioMessageUnsafe#read")]),e._v("方法的"),n("code",[e._v("do{.....}while()")]),e._v("循环。在接收一个连接之后又退出循环。")]),e._v(" "),n("p",[e._v("本来我们可以在一次read loop中把这16个并发的客户端连接全部接收完毕的，因为这个Bug，main reactor需要不断的发起OP_ACCEPT事件的轮询，绕了很大一个圈子。"),n("strong",[e._v("同时也增加了许多不必要的selector.select()系统调用开销")])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://echo798.oss-cn-shenzhen.aliyuncs.com/img/202409191110731.webp",alt:"图片"}}),e._v("issue讨论.png")]),e._v(" "),n("p",[e._v("这时大家在看这个?Issue#11708中的讨论是不是就清晰很多了~~")]),e._v(" "),n("blockquote",[n("p",[e._v("Issue#11708：https://github.com/netty/netty/issues/11708")])]),e._v(" "),n("h3",{attrs:{id:"_4-1-bug的修复"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-bug的修复"}},[e._v("#")]),e._v(" 4.1 Bug的修复")]),e._v(" "),n("blockquote",[n("p",[e._v("笔者在写这篇文章的时候，Netty最新版本是4.1.68.final，这个Bug在4.1.69.final中被修复。")])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNiamkpfIdsVEQRQibNvxZYJJiaTQFHvmuiasd23LH4hjLazv0W1sibvr46nkA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("image.png")]),e._v(" "),n("p",[e._v("由于该Bug产生的原因正是因为服务端NioServerSocketChannel（用于监听端口地址和接收客户端连接）和 客户端NioSocketChannel（用于通信）中的Config配置类混用了同一个ByteBuffer分配器"),n("code",[e._v("AdaptiveRecvByteBufAllocator")]),e._v("而导致的。")]),e._v(" "),n("p",[e._v("所以在新版本修复中专门为服务端ServerSocketChannel中的Config配置类引入了一个新的ByteBuffer分配器"),n("code",[e._v("ServerChannelRecvByteBufAllocator")]),e._v("，专门用于服务端ServerSocketChannel接收客户端连接的场景。")]),e._v(" "),n("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),n("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),n("p",[e._v("在"),n("code",[e._v("ServerChannelRecvByteBufAllocator")]),e._v("的父类"),n("code",[e._v("DefaultMaxMessagesRecvByteBufAllocator")]),e._v("中引入了一个新的字段"),n("code",[e._v("ignoreBytesRead")]),e._v("，用于表示是否忽略网络字节的读取，在创建服务端Channel配置类NioServerSocketChannelConfig的时候，这个字段会被赋值为"),n("code",[e._v("true")]),e._v("。")]),e._v(" "),n("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)image.png")]),e._v(" "),n("p",[e._v("当main reactor线程在read loop循环中接收客户端连接的时候。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("      private final class NioMessageUnsafe extends AbstractNioUnsafe {\n\n                    do {\n                        int localRead = doReadMessages(readBuf);\n                        .........省略...........\n                    } while (allocHandle.continueReading());\n     }\n")])])]),n("p",[e._v("在read loop循环的末尾就会采用从"),n("code",[e._v("ServerChannelRecvByteBufAllocator")]),e._v("中创建的"),n("code",[e._v("MaxMessageHandle#continueReading")]),e._v("方法来判断读取连接次数是否超过了16次。由于这里的"),n("code",[e._v("ignoreBytesRead == true")]),e._v("这回我们就会忽略"),n("code",[e._v("totalBytesRead == 0")]),e._v("的情况，从而使得接收连接的read loop得以继续地执行下去。在一个read loop中一次性把16个连接全部接收完毕。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNiabJdRFibbDhoULfxwyl3njuSGPmiaw9KwAtB7hicggEYHwcUbMZe4BibEDQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("image.png")]),e._v(" "),n("p",[e._v("以上就是对这个Bug产生的原因，以及发现的过程，最后修复的方案一个全面的介绍，因此笔者也出现在了netty 4.1.69.final版本发布公告里的thank-list中。哈哈，真是令人开心的一件事情~~~")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNiaEtpEzZGwchbkWicibbjCuOujhoHFk1GrxibqAKnfVkticFu04DQX8XyWkw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("image.png")]),e._v(" "),n("p",[e._v("通过以上对netty接收客户端连接的全流程分析和对这个Bug来龙去脉以及修复方案的介绍，大家现在一定已经理解了整个接收连接的流程框架。")]),e._v(" "),n("p",[e._v("接下来笔者就把这个流程中涉及到的一些核心模块在单独拎出来从细节入手，为大家各个击破~~~")]),e._v(" "),n("h2",{attrs:{id:"_5-doreadmessages接收客户端连接"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-doreadmessages接收客户端连接"}},[e._v("#")]),e._v(" 5. doReadMessages接收客户端连接")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class NioServerSocketChannel extends AbstractNioMessageChannel\n                             implements io.netty.channel.socket.ServerSocketChannel {\n\n    @Override\n    protected int doReadMessages(List<Object> buf) throws Exception {\n        SocketChannel ch = SocketUtils.accept(javaChannel());\n\n        try {\n            if (ch != null) {\n                buf.add(new NioSocketChannel(this, ch));\n                return 1;\n            }\n        } catch (Throwable t) {\n            logger.warn("Failed to create a new channel from an accepted socket.", t);\n\n            try {\n                ch.close();\n            } catch (Throwable t2) {\n                logger.warn("Failed to close a socket.", t2);\n            }\n        }\n\n        return 0;\n    }\n\n}\n')])])]),n("ul",[n("li",[e._v("通过"),n("code",[e._v("javaChannel()")]),e._v("获取封装在Netty服务端"),n("code",[e._v("NioServerSocketChannel")]),e._v("中的"),n("code",[e._v("JDK 原生 ServerSocketChannel")]),e._v("。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    @Override\n    protected ServerSocketChannel javaChannel() {\n        return (ServerSocketChannel) super.javaChannel();\n    }\n")])])]),n("ul",[n("li",[e._v("通过"),n("code",[e._v("JDK NIO 原生")]),e._v("的"),n("code",[e._v("ServerSocketChannel")]),e._v("的"),n("code",[e._v("accept方法")]),e._v("获取"),n("code",[e._v("JDK NIO 原生")]),e._v("客户端连接"),n("code",[e._v("SocketChannel")]),e._v("。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    public static SocketChannel accept(final ServerSocketChannel serverSocketChannel) throws IOException {\n        try {\n            return AccessController.doPrivileged(new PrivilegedExceptionAction<SocketChannel>() {\n                @Override\n                public SocketChannel run() throws IOException {\n                    return serverSocketChannel.accept();\n                }\n            });\n        } catch (PrivilegedActionException e) {\n            throw (IOException) e.getCause();\n        }\n    }\n")])])]),n("p",[e._v("这一步就是我们在"),n("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg2MzU3Mjc3Ng==&mid=2247483737&idx=1&sn=7ef3afbb54289c6e839eed724bb8a9d6&chksm=ce77c71ef9004e08e3d164561e3a2708fc210c05408fa41f7fe338d8e85f39c1ad57519b614e&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("?《聊聊Netty那些事儿之从内核角度看IO模型》"),n("OutboundLink")],1),e._v("介绍到的调用"),n("code",[e._v("监听Socket")]),e._v("的"),n("code",[e._v("accept方法")]),e._v("，内核会基于"),n("code",[e._v("监听Socket")]),e._v("创建出来一个新的"),n("code",[e._v("Socket")]),e._v("专门用于与客户端之间的网络通信这个我们称之为"),n("code",[e._v("客户端连接Socket")]),e._v("。这里的"),n("code",[e._v("ServerSocketChannel")]),e._v("就类似于"),n("code",[e._v("监听Socket")]),e._v("。"),n("code",[e._v("SocketChannel")]),e._v("就类似于"),n("code",[e._v("客户端连接Socket")]),e._v("。")]),e._v(" "),n("p",[e._v("由于我们在创建"),n("code",[e._v("NioServerSocketChannel")]),e._v("的时候，会将"),n("code",[e._v("JDK NIO 原生")]),e._v("的"),n("code",[e._v("ServerSocketChannel")]),e._v("设置为"),n("code",[e._v("非阻塞")]),e._v("，所以这里当"),n("code",[e._v("ServerSocketChannel")]),e._v("上有客户端连接时就会直接创建"),n("code",[e._v("SocketChannel")]),e._v("，如果此时并没有客户端连接时"),n("code",[e._v("accept调用")]),e._v("就会立刻返回"),n("code",[e._v("null")]),e._v("并不会阻塞。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    protected AbstractNioChannel(Channel parent, SelectableChannel ch, int readInterestOp) {\n        super(parent);\n        this.ch = ch;\n        this.readInterestOp = readInterestOp;\n        try {\n            //设置Channel为非阻塞 配合IO多路复用模型\n            ch.configureBlocking(false);\n        } catch (IOException e) {\n          ..........省略.............\n        }\n    }\n")])])]),n("h3",{attrs:{id:"_5-1-创建客户端niosocketchannel"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-创建客户端niosocketchannel"}},[e._v("#")]),e._v(" 5.1 创建客户端NioSocketChannel")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class NioServerSocketChannel extends AbstractNioMessageChannel\n                             implements io.netty.channel.socket.ServerSocketChannel {\n\n    @Override\n    protected int doReadMessages(List<Object> buf) throws Exception {\n        SocketChannel ch = SocketUtils.accept(javaChannel());\n\n        try {\n            if (ch != null) {\n                buf.add(new NioSocketChannel(this, ch));\n                return 1;\n            }\n        } catch (Throwable t) {\n          .........省略.......\n        }\n\n        return 0;\n    }\n\n}\n")])])]),n("p",[e._v("这里会根据"),n("code",[e._v("ServerSocketChannel")]),e._v("的"),n("code",[e._v("accept")]),e._v("方法获取到"),n("code",[e._v("JDK NIO 原生")]),e._v("的"),n("code",[e._v("SocketChannel")]),e._v("（用于底层真正与客户端通信的Channel），来创建Netty中的"),n("code",[e._v("NioSocketChannel")]),e._v("。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class NioSocketChannel extends AbstractNioByteChannel implements io.netty.channel.socket.SocketChannel {\n\n    public NioSocketChannel(Channel parent, SocketChannel socket) {\n        super(parent, socket);\n        config = new NioSocketChannelConfig(this, socket.socket());\n    }\n\n}\n")])])]),n("p",[e._v("创建客户端"),n("code",[e._v("NioSocketChannel")]),e._v("的过程其实和之前讲的创建服务端"),n("code",[e._v("NioServerSocketChannel")]),e._v("大体流程是一样的，我们这里只对客户端"),n("code",[e._v("NioSocketChannel")]),e._v("和服务端"),n("code",[e._v("NioServerSocketChannel")]),e._v("在创建过程中的不同之处做一个对比。")]),e._v(" "),n("blockquote",[n("p",[e._v("具体细节部分大家可以在回看下"),n("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg2MzU3Mjc3Ng==&mid=2247484005&idx=1&sn=52f51269902a58f40d33208421109bc3&chksm=ce77c422f9004d340e5b385ef6ba24dfba1f802076ace80ad6390e934173a10401e64e13eaeb&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("?《详细图解Netty Reactor启动全流程》"),n("OutboundLink")],1),e._v("一文中关于"),n("code",[e._v("NioServerSocketChannel")]),e._v("的创建的详细细节。")])]),e._v(" "),n("h3",{attrs:{id:"_5-3-对比niosocketchannel与nioserversocketchannel的不同"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-对比niosocketchannel与nioserversocketchannel的不同"}},[e._v("#")]),e._v(" 5.3 对比NioSocketChannel与NioServerSocketChannel的不同")]),e._v(" "),n("h4",{attrs:{id:"_1-channel的层次不同"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-channel的层次不同"}},[e._v("#")]),e._v(" 1：Channel的层次不同")]),e._v(" "),n("p",[e._v("在我们介绍Reactor的创建文章中，我们提到Netty中的"),n("code",[e._v("Channel")]),e._v("是具有层次的。由于客户端NioSocketChannel是在main reactor接收连接时在服务端NioServerSocketChannel中被创建的，所以在创建客户端NioSocketChannel的时候会通过构造函数指定了parent属性为"),n("code",[e._v("NioServerSocketChanel")]),e._v("。并将"),n("code",[e._v("JDK NIO 原生")]),e._v("的"),n("code",[e._v("SocketChannel")]),e._v("封装进Netty的客户端"),n("code",[e._v("NioSocketChannel")]),e._v("中。")]),e._v(" "),n("p",[e._v("而在Reactor启动过程中创建"),n("code",[e._v("NioServerSocketChannel")]),e._v("的时候"),n("code",[e._v("parent属性")]),e._v("指定是"),n("code",[e._v("null")]),e._v("。因为它就是顶层的"),n("code",[e._v("Channel")]),e._v("，负责创建客户端"),n("code",[e._v("NioSocketChannel")]),e._v("。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    public NioServerSocketChannel(ServerSocketChannel channel) {\n        super(null, channel, SelectionKey.OP_ACCEPT);\n        config = new NioServerSocketChannelConfig(this, javaChannel().socket());\n    }\n")])])]),n("h4",{attrs:{id:"_2-向reactor注册的io事件不同"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-向reactor注册的io事件不同"}},[e._v("#")]),e._v(" 2：向Reactor注册的IO事件不同")]),e._v(" "),n("p",[e._v("客户端NioSocketChannel向Sub Reactor注册的是"),n("code",[e._v("SelectionKey.OP_READ事件")]),e._v("，而服务端NioServerSocketChannel向Main Reactor注册的是"),n("code",[e._v("SelectionKey.OP_ACCEPT事件")]),e._v("。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public abstract class AbstractNioByteChannel extends AbstractNioChannel {\n\n    protected AbstractNioByteChannel(Channel parent, SelectableChannel ch) {\n        super(parent, ch, SelectionKey.OP_READ);\n    }\n\n}\n\npublic class NioServerSocketChannel extends AbstractNioMessageChannel\n                             implements io.netty.channel.socket.ServerSocketChannel {\n\n   public NioServerSocketChannel(ServerSocketChannel channel) {\n        //父类AbstractNioChannel中保存JDK NIO原生ServerSocketChannel以及要监听的事件OP_ACCEPT\n        super(null, channel, SelectionKey.OP_ACCEPT);\n        //DefaultChannelConfig中设置用于Channel接收数据用的buffer->AdaptiveRecvByteBufAllocator\n        config = new NioServerSocketChannelConfig(this, javaChannel().socket());\n    }\n}\n")])])]),n("h4",{attrs:{id:"_3-功能属性不同造成继承结构的不同"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-功能属性不同造成继承结构的不同"}},[e._v("#")]),e._v(" 3: 功能属性不同造成继承结构的不同")]),e._v(" "),n("p",[e._v("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)NioSocketChannel.png")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNiaJhrEYzibyhX4xH6g502Qobny1kJrRNvgo7j0duvaw9HC2f5eXQPqoTg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("NioServerSocketChannel.png")]),e._v(" "),n("p",[e._v("客户端"),n("code",[e._v("NioSocketChannel")]),e._v("继承的是"),n("code",[e._v("AbstractNioByteChannel")]),e._v("，而服务端"),n("code",[e._v("NioServerSocketChannel")]),e._v("继承的是"),n("code",[e._v("AbstractNioMessageChannel")]),e._v("。它们继承的这两个抽象类一个前缀是"),n("code",[e._v("Byte")]),e._v("，一个前缀是"),n("code",[e._v("Message")]),e._v("有什么区别吗？？")]),e._v(" "),n("blockquote",[n("p",[e._v("客户端"),n("code",[e._v("NioSocketChannel")]),e._v("主要处理的是服务端与客户端的通信，这里涉及到接收客户端发送来的数据，而"),n("code",[e._v("Sub Reactor线程")]),e._v("从"),n("code",[e._v("NioSocketChannel")]),e._v("中读取的正是网络通信数据单位为"),n("code",[e._v("Byte")]),e._v("。")])]),e._v(" "),n("blockquote",[n("p",[e._v("服务端"),n("code",[e._v("NioServerSocketChannel")]),e._v("主要负责处理"),n("code",[e._v("OP_ACCEPT事件")]),e._v("，创建用于通信的客户端"),n("code",[e._v("NioSocketChannel")]),e._v("。这时候客户端与服务端还没开始通信，所以"),n("code",[e._v("Main Reactor线程")]),e._v("从"),n("code",[e._v("NioServerSocketChannel")]),e._v("的读取对象为"),n("code",[e._v("Message")]),e._v("。这里的"),n("code",[e._v("Message")]),e._v("指的就是底层的"),n("code",[e._v("SocketChannel")]),e._v("客户端连接。")])]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("以上就是"),n("code",[e._v("NioSocketChannel")]),e._v("与"),n("code",[e._v("NioServerSocketChannel")]),e._v("创建过程中的不同之处，后面的过程就一样了。")]),e._v(" "),n("ul",[n("li",[e._v("在AbstractNioChannel 类中封装JDK NIO 原生的"),n("code",[e._v("SocketChannel")]),e._v("，并将其底层的IO模型设置为"),n("code",[e._v("非阻塞")]),e._v("，保存需要监听的IO事件"),n("code",[e._v("OP_READ")]),e._v("。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    protected AbstractNioChannel(Channel parent, SelectableChannel ch, int readInterestOp) {\n        super(parent);\n        this.ch = ch;\n        this.readInterestOp = readInterestOp;\n        try {\n            //设置Channel为非阻塞 配合IO多路复用模型\n            ch.configureBlocking(false);\n        } catch (IOException e) {\n\n        }\n    }\n")])])]),n("ul",[n("li",[e._v("为客户端NioSocketChannel创建全局唯一的"),n("code",[e._v("channelId")]),e._v("，创建客户端NioSocketChannel的底层操作类"),n("code",[e._v("NioByteUnsafe")]),e._v("，创建pipeline。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    protected AbstractChannel(Channel parent) {\n        this.parent = parent;\n        //channel全局唯一ID machineId+processId+sequence+timestamp+random\n        id = newId();\n        //unsafe用于底层socket的读写操作\n        unsafe = newUnsafe();\n        //为channel分配独立的pipeline用于IO事件编排\n        pipeline = newChannelPipeline();\n    }\n")])])]),n("ul",[n("li",[e._v("在NioSocketChannelConfig的创建过程中，将NioSocketChannel的RecvByteBufAllocator类型设置为"),n("code",[e._v("AdaptiveRecvByteBufAllocator")]),e._v("。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    public DefaultChannelConfig(Channel channel) {\n            this(channel, new AdaptiveRecvByteBufAllocator());\n    }\n")])])]),n("blockquote",[n("p",[e._v("在Bug修复后的版本中服务端NioServerSocketChannel的RecvByteBufAllocator类型设置为"),n("code",[e._v("ServerChannelRecvByteBufAllocator")])])]),e._v(" "),n("p",[e._v("最终我们得到的客户端"),n("code",[e._v("NioSocketChannel")]),e._v("结构如下：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNiaW2k5wARibzQC47D0ricxafnVibibz8usyYO8DIiagJObUwYIu1vS6fGW08A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("NioSocketChannel.png")]),e._v(" "),n("h2",{attrs:{id:"_6-channelread事件的响应"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-channelread事件的响应"}},[e._v("#")]),e._v(" 6. ChannelRead事件的响应")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNiaDjWPOibC4yyvicZOQROz0VprRQdxN0scINPgOrCAVGxL1bUoV6ia4YJXQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("接收客户端连接.png")]),e._v(" "),n("p",[e._v("在前边介绍接收连接的整体核心流程框架的时候，我们提到main reactor线程是在一个"),n("code",[e._v("do{.....}while(...)")]),e._v("循环read loop中不断的调用"),n("code",[e._v("ServerSocketChannel#accept")]),e._v("方法来接收客户端的连接。")]),e._v(" "),n("p",[e._v("当满足退出read loop循环的条件有两个：")]),e._v(" "),n("ol",[n("li",[e._v("在限定的16次读取中，已经没有新的客户端连接要接收了。退出循环。")]),e._v(" "),n("li",[e._v("从NioServerSocketChannel中读取客户端连接的次数达到了16次，无论此时是否还有客户端连接都需要退出循环。")])]),e._v(" "),n("p",[e._v("main reactor就会退出read loop循环，此时接收到的客户端连接NioSocketChannel暂存与"),n("code",[e._v("List<Object> readBuf")]),e._v("集合中。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    private final class NioMessageUnsafe extends AbstractNioUnsafe {\n\n        private final List<Object> readBuf = new ArrayList<Object>();\n\n        @Override\n        public void read() {\n            try {\n                try {\n                    do {\n                        ........省略.........\n                        //底层调用NioServerSocketChannel->doReadMessages 创建客户端SocketChannel\n                        int localRead = doReadMessages(readBuf);\n                        ........省略.........\n                        allocHandle.incMessagesRead(localRead);\n                    } while (allocHandle.continueReading());\n\n                } catch (Throwable t) {\n                    exception = t;\n                }\n\n                int size = readBuf.size();\n                for (int i = 0; i < size; i ++) {\n                    readPending = false;\n                    pipeline.fireChannelRead(readBuf.get(i));\n                }\n                \n                  ........省略.........\n            } finally {\n                  ........省略.........\n            }\n        }\n    }\n")])])]),n("p",[e._v("随后main reactor线程会遍历"),n("code",[e._v("List<Object> readBuf")]),e._v("集合中的NioSocketChannel，并在NioServerSocketChannel的pipeline中传播ChannelRead事件。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNiaLcRXsic4tugeyCbo2ZjSLhNtU09WGLEicbhFmqJBY7BDibKss8j2BTKibg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("传播ChannelRead事件.png")]),e._v(" "),n("p",[e._v("最终"),n("code",[e._v("ChannelRead事件")]),e._v("会传播到"),n("code",[e._v("ServerBootstrapAcceptor")]),e._v("中，这里正是Netty处理客户端连接的核心逻辑所在。")]),e._v(" "),n("p",[n("code",[e._v("ServerBootstrapAcceptor")]),e._v("主要的作用就是初始化客户端"),n("code",[e._v("NioSocketChannel")]),e._v("，并将客户端NioSocketChannel注册到"),n("code",[e._v("Sub Reactor Group")]),e._v("中，并监听"),n("code",[e._v("OP_READ事件")]),e._v("。")]),e._v(" "),n("p",[e._v("在ServerBootstrapAcceptor 中会初始化客户端NioSocketChannel的这些属性。")]),e._v(" "),n("p",[e._v("比如：从Reactor组"),n("code",[e._v("EventLoopGroup childGroup")]),e._v("，用于初始化"),n("code",[e._v("NioSocketChannel")]),e._v("中的"),n("code",[e._v("pipeline")]),e._v("用到的"),n("code",[e._v("ChannelHandler childHandler")]),e._v("，以及"),n("code",[e._v("NioSocketChannel")]),e._v("中的一些"),n("code",[e._v("childOptions")]),e._v("和"),n("code",[e._v("childAttrs")]),e._v("。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('private static class ServerBootstrapAcceptor extends ChannelInboundHandlerAdapter {\n\n        private final EventLoopGroup childGroup;\n        private final ChannelHandler childHandler;\n        private final Entry<ChannelOption<?>, Object>[] childOptions;\n        private final Entry<AttributeKey<?>, Object>[] childAttrs;\n\n        @Override\n        @SuppressWarnings("unchecked")\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            final Channel child = (Channel) msg;\n\n            //向客户端NioSocketChannel的pipeline中\n            //添加在启动配置类ServerBootstrap中配置的ChannelHandler\n            child.pipeline().addLast(childHandler);\n\n            //利用配置的属性初始化客户端NioSocketChannel\n            setChannelOptions(child, childOptions, logger);\n            setAttributes(child, childAttrs);\n\n            try {\n                /**\n                 * 1：在Sub Reactor线程组中选择一个Reactor绑定\n                 * 2：将客户端SocketChannel注册到绑定的Reactor上\n                 * 3：SocketChannel注册到sub reactor中的selector上，并监听OP_READ事件\n                 * */\n                childGroup.register(child).addListener(new ChannelFutureListener() {\n                    @Override\n                    public void operationComplete(ChannelFuture future) throws Exception {\n                        if (!future.isSuccess()) {\n                            forceClose(child, future.cause());\n                        }\n                    }\n                });\n            } catch (Throwable t) {\n                forceClose(child, t);\n            }\n        }\n}\n')])])]),n("p",[e._v("正是在这里，netty会将我们在"),n("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg2MzU3Mjc3Ng==&mid=2247484005&idx=1&sn=52f51269902a58f40d33208421109bc3&chksm=ce77c422f9004d340e5b385ef6ba24dfba1f802076ace80ad6390e934173a10401e64e13eaeb&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("?《详细图解Netty Reactor启动全流程》"),n("OutboundLink")],1),e._v("的启动示例程序中在ServerBootstrap中配置的客户端NioSocketChannel的所有属性（child前缀配置）初始化到NioSocketChannel中。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public final class EchoServer {\n    static final int PORT = Integer.parseInt(System.getProperty("port", "8007"));\n\n    public static void main(String[] args) throws Exception {\n        // Configure the server.\n        //创建主从Reactor线程组\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        final EchoServerHandler serverHandler = new EchoServerHandler();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)//配置主从Reactor\n             .channel(NioServerSocketChannel.class)//配置主Reactor中的channel类型\n             .option(ChannelOption.SO_BACKLOG, 100)//设置主Reactor中channel的option选项\n             .handler(new LoggingHandler(LogLevel.INFO))//设置主Reactor中Channel->pipline->handler\n             .childHandler(new ChannelInitializer<SocketChannel>() {//设置从Reactor中注册channel的pipeline\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     //p.addLast(new LoggingHandler(LogLevel.INFO));\n                     p.addLast(serverHandler);\n                 }\n             });\n\n            // Start the server. 绑定端口启动服务，开始监听accept事件\n            ChannelFuture f = b.bind(PORT).sync();\n            // Wait until the server socket is closed.\n            f.channel().closeFuture().sync();\n        } finally {\n            // Shut down all event loops to terminate all threads.\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}\n')])])]),n("p",[e._v("以上示例代码中通过ServerBootstrap配置的NioSocketChannel相关属性，会在Netty启动并开始初始化"),n("code",[e._v("NioServerSocketChannel")]),e._v("的时候将"),n("code",[e._v("ServerBootstrapAcceptor")]),e._v("的创建初始化工作封装成"),n("code",[e._v("异步任务")]),e._v("，然后在"),n("code",[e._v("NioServerSocketChannel")]),e._v("注册到"),n("code",[e._v("Main Reactor")]),e._v("中成功后执行。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class ServerBootstrap extends AbstractBootstrap<ServerBootstrap, ServerChannel> {\n\n    @Override\n    void init(Channel channel) {\n        ................省略................\n\n        p.addLast(new ChannelInitializer<Channel>() {\n            @Override\n            public void initChannel(final Channel ch) {\n                final ChannelPipeline pipeline = ch.pipeline();\n                ................省略................\n                ch.eventLoop().execute(new Runnable() {\n                    @Override\n                    public void run() {\n                        pipeline.addLast(new ServerBootstrapAcceptor(\n                                ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));\n                    }\n                });\n            }\n        });\n    }\n}\n")])])]),n("p",[e._v("在经过"),n("code",[e._v("ServerBootstrapAccptor#chanelRead回调")]),e._v("的处理之后，此时客户端NioSocketChannel中pipeline的结构为：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNia6cNkLIW571QH74LhkCfFpibJSm1cwDQTQBcxClKehQVGRR3ibdP9Ea5A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("客户端channel pipeline初始结构.png")]),e._v(" "),n("p",[e._v("随后会将初始化好的客户端NioSocketChannel向Sub Reactor Group中注册，并监听"),n("code",[e._v("OP_READ事件")]),e._v("。")]),e._v(" "),n("p",[e._v("如下图中的步骤3所示：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNialDtXCOD5vvVGh56FT2yKauwTch6oYbrn1icPuYKaqY8nPibicWv66sQfw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("netty中的reactor.png")]),e._v(" "),n("h2",{attrs:{id:"_7-向subreactorgroup中注册niosocketchannel"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-向subreactorgroup中注册niosocketchannel"}},[e._v("#")]),e._v(" 7. 向SubReactorGroup中注册NioSocketChannel")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("                childGroup.register(child).addListener(new ChannelFutureListener() {\n                    @Override\n                    public void operationComplete(ChannelFuture future) throws Exception {\n                        if (!future.isSuccess()) {\n                            forceClose(child, future.cause());\n                        }\n                    }\n                });\n")])])]),n("p",[e._v("客户端NioSocketChannel向Sub Reactor Group注册的流程完全和服务端NioServerSocketChannel向Main Reactor Group注册流程一样。")]),e._v(" "),n("blockquote",[n("p",[e._v("关于服务端NioServerSocketChannel的注册流程，笔者已经在"),n("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg2MzU3Mjc3Ng==&mid=2247484005&idx=1&sn=52f51269902a58f40d33208421109bc3&chksm=ce77c422f9004d340e5b385ef6ba24dfba1f802076ace80ad6390e934173a10401e64e13eaeb&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("?《详细图解Netty Reactor启动全流程》"),n("OutboundLink")],1),e._v("一文中做出了详细的介绍，对相关细节感兴趣的同学可以在回看下。")])]),e._v(" "),n("p",[e._v("这里笔者在带大家简要回顾下整个注册过程并着重区别对比客户端NioSocetChannel与服务端NioServerSocketChannel注册过程中不同的地方。")]),e._v(" "),n("h3",{attrs:{id:"_7-1-从sub-reactor-group中选取一个sub-reactor进行绑定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-从sub-reactor-group中选取一个sub-reactor进行绑定"}},[e._v("#")]),e._v(" 7.1 从Sub Reactor Group中选取一个Sub Reactor进行绑定")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public abstract class MultithreadEventLoopGroup extends MultithreadEventExecutorGroup implements EventLoopGroup {\n\n   @Override\n    public ChannelFuture register(Channel channel) {\n        return next().register(channel);\n    }\n\n    @Override\n    public EventExecutor next() {\n        return chooser.next();\n    }\n\n}\n")])])]),n("h3",{attrs:{id:"_7-2-向绑定的sub-reactor上注册niosocketchannel"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-向绑定的sub-reactor上注册niosocketchannel"}},[e._v("#")]),e._v(" 7.2 向绑定的Sub Reactor上注册NioSocketChannel")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public abstract class SingleThreadEventLoop extends SingleThreadEventExecutor implements EventLoop {\n\n    @Override\n    public ChannelFuture register(Channel channel) {\n        //注册channel到绑定的Reactor上\n        return register(new DefaultChannelPromise(channel, this));\n    }\n\n    @Override\n    public ChannelFuture register(final ChannelPromise promise) {\n        ObjectUtil.checkNotNull(promise, "promise");\n        //unsafe负责channel底层的各种操作\n        promise.channel().unsafe().register(this, promise);\n        return promise;\n    }\n\n}\n')])])]),n("ul",[n("li",[e._v("当时我们在介绍"),n("code",[e._v("NioServerSocketChannel")]),e._v("的注册过程时，这里的"),n("code",[e._v("promise.channel()")]),e._v("为"),n("code",[e._v("NioServerSocketChannel")]),e._v("。底层的unsafe操作类为"),n("code",[e._v("NioMessageUnsafe")]),e._v("。")]),e._v(" "),n("li",[e._v("此时这里的"),n("code",[e._v("promise.channel()")]),e._v("为"),n("code",[e._v("NioSocketChannel")]),e._v("。底层的unsafe操作类为"),n("code",[e._v("NioByteUnsafe")]),e._v("。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("        @Override\n        public final void register(EventLoop eventLoop, final ChannelPromise promise) {\n            ..............省略....................\n            //此时这里的eventLoop为Sub Reactor\n            AbstractChannel.this.eventLoop = eventLoop;\n\n            /**\n             * 执行channel注册的操作必须是Reactor线程来完成\n             *\n             * 1: 如果当前执行线程是Reactor线程，则直接执行register0进行注册\n             * 2：如果当前执行线程是外部线程，则需要将register0注册操作 封装程异步Task 由Reactor线程执行\n             * */\n            if (eventLoop.inEventLoop()) {\n                register0(promise);\n            } else {\n                try {\n                    eventLoop.execute(new Runnable() {\n                        @Override\n                        public void run() {\n                            register0(promise);\n                        }\n                    });\n                } catch (Throwable t) {\n                    ..............省略....................\n                }\n            }\n        }\n")])])]),n("p",[n("strong",[e._v("注意此时传递进来的EventLoop eventLoop为Sub Reactor")]),e._v("。")]),e._v(" "),n("p",[n("strong",[e._v("但此时的执行线程为"),n("code",[e._v("Main Reactor线程")]),e._v("，并不是Sub Reactor线程（此时还未启动）")]),e._v("。")]),e._v(" "),n("p",[e._v("所以这里的"),n("code",[e._v("eventLoop.inEventLoop()")]),e._v("返回的是"),n("code",[e._v("false")]),e._v("。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNiazIA5weroZkxOLyqsUBrN8Q1XP3NM5vBsFVdZXIGz1Il7FPprdZ4TNg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("image.png")]),e._v(" "),n("p",[e._v("在"),n("code",[e._v("else分支")]),e._v("中向绑定的Sub Reactor提交注册"),n("code",[e._v("NioSocketChannel")]),e._v("的任务。")]),e._v(" "),n("blockquote",[n("p",[e._v("当注册任务提交后，此时绑定的"),n("code",[e._v("Sub Reactor线程")]),e._v("启动。")])]),e._v(" "),n("h3",{attrs:{id:"_7-3-register0"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-register0"}},[e._v("#")]),e._v(" 7.3 register0")]),e._v(" "),n("p",[e._v("我们又来到了Channel注册的老地方"),n("code",[e._v("register0方法")]),e._v("。在"),n("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg2MzU3Mjc3Ng==&mid=2247484005&idx=1&sn=52f51269902a58f40d33208421109bc3&chksm=ce77c422f9004d340e5b385ef6ba24dfba1f802076ace80ad6390e934173a10401e64e13eaeb&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("?《详细图解Netty Reactor启动全流程》"),n("OutboundLink")],1),e._v("中我们花了大量的篇幅介绍了这个方法。这里我们只对比"),n("code",[e._v("NioSocketChannel")]),e._v("与"),n("code",[e._v("NioServerSocketChannel")]),e._v("不同的地方。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" private void register0(ChannelPromise promise) {\n            try {\n                ................省略..................\n                boolean firstRegistration = neverRegistered;\n                //执行真正的注册操作\n                doRegister();\n                //修改注册状态\n                neverRegistered = false;\n                registered = true;\n\n                pipeline.invokeHandlerAddedIfNeeded();\n\n                if (isActive()) {\n                    if (firstRegistration) {\n                        //触发channelActive事件\n                        pipeline.fireChannelActive();\n                    } else if (config().isAutoRead()) {\n                        beginRead();\n                    }\n                }\n            } catch (Throwable t) {\n                 ................省略..................\n            }\n        }\n")])])]),n("p",[e._v("这里 "),n("code",[e._v("doRegister()方法")]),e._v("将NioSocketChannel注册到Sub Reactor中的"),n("code",[e._v("Selector")]),e._v("上。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public abstract class AbstractNioChannel extends AbstractChannel {\n\n    @Override\n    protected void doRegister() throws Exception {\n        boolean selected = false;\n        for (;;) {\n            try {\n                selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), 0, this);\n                return;\n            } catch (CancelledKeyException e) {\n                ...............省略...............\n            }\n        }\n    }\n\n}\n")])])]),n("p",[e._v("这里是Netty客户端"),n("code",[e._v("NioSocketChannel")]),e._v("与JDK NIO 原生 SocketChannel关联的地方。此时注册的"),n("code",[e._v("IO事件")]),e._v("依然是"),n("code",[e._v("0")]),e._v("。目的也是只是为了获取NioSocketChannel在Selector中的"),n("code",[e._v("SelectionKey")]),e._v("。")]),e._v(" "),n("p",[e._v("同时通过"),n("code",[e._v("SelectableChannel#register")]),e._v("方法将Netty自定义的NioSocketChannel（这里的this指针）附着在SelectionKey的attechment属性上，完成Netty自定义Channel与JDK NIO Channel的关系绑定。这样在每次对Selector进行IO就绪事件轮询时，Netty 都可以从 JDK NIO Selector返回的SelectionKey中获取到自定义的Channel对象（这里指的就是NioSocketChannel）。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNiaBHZIoOsiaAmdqQxwtXvIIgHxoYrpp2AeUMs5qEla9BoHU4wkg4Sgjqg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("channel与SelectionKey对应关系.png")]),e._v(" "),n("p",[e._v("随后调用"),n("code",[e._v("pipeline.invokeHandlerAddedIfNeeded()")]),e._v("回调客户端NioSocketChannel上pipeline中的所有ChannelHandler的"),n("code",[e._v("handlerAdded方法")]),e._v("，此时"),n("code",[e._v("pipeline")]),e._v("的结构中只有一个"),n("code",[e._v("ChannelInitializer")]),e._v("。最终会在"),n("code",[e._v("ChannelInitializer#handlerAdded")]),e._v("回调方法中初始化客户端"),n("code",[e._v("NioSocketChannel")]),e._v("的"),n("code",[e._v("pipeline")]),e._v("。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNia6cNkLIW571QH74LhkCfFpibJSm1cwDQTQBcxClKehQVGRR3ibdP9Ea5A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("客户端channel pipeline初始结构.png")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public abstract class ChannelInitializer<C extends Channel> extends ChannelInboundHandlerAdapter {\n\n    @Override\n    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n        if (ctx.channel().isRegistered()) {\n            if (initChannel(ctx)) {\n                //初始化工作完成后，需要将自身从pipeline中移除\n                removeState(ctx);\n            }\n        }\n    }\n\n    protected abstract void initChannel(C ch) throws Exception;\n}\n")])])]),n("blockquote",[n("p",[e._v("关于对Channel中pipeline的详细初始化过程，对细节部分感兴趣的同学可以回看下"),n("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg2MzU3Mjc3Ng==&mid=2247484005&idx=1&sn=52f51269902a58f40d33208421109bc3&chksm=ce77c422f9004d340e5b385ef6ba24dfba1f802076ace80ad6390e934173a10401e64e13eaeb&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("?《详细图解Netty Reactor启动全流程》"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("此时客户端NioSocketChannel中的pipeline中的结构就变为了我们自定义的样子，在示例代码中我们自定义的"),n("code",[e._v("ChannelHandler")]),e._v("为"),n("code",[e._v("EchoServerHandler")]),e._v("。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNiaTdUsySmibYW5g2lI0f8hN484CkfWrAjns8jib4vPJfrta5gpuxH5lyvQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("客户端channel pipeline结构.png")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Sharable\npublic class EchoServerHandler extends ChannelInboundHandlerAdapter {\n\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) {\n        ctx.write(msg);\n    }\n\n    @Override\n    public void channelReadComplete(ChannelHandlerContext ctx) {\n\n        ctx.flush();\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n        // Close the connection when an exception is raised.\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n")])])]),n("p",[e._v("当客户端NioSocketChannel中的pipeline初始化完毕后，netty就开始调用"),n("code",[e._v("safeSetSuccess(promise)方法")]),e._v("回调"),n("code",[e._v("regFuture")]),e._v("中注册的"),n("code",[e._v("ChannelFutureListener")]),e._v("，通知客户端NioSocketChannel已经成功注册到Sub Reactor上了。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("               childGroup.register(child).addListener(new ChannelFutureListener() {\n                    @Override\n                    public void operationComplete(ChannelFuture future) throws Exception {\n                        if (!future.isSuccess()) {\n                            forceClose(child, future.cause());\n                        }\n                    }\n                });\n")])])]),n("blockquote",[n("p",[e._v("在服务端NioServerSocketChannel注册的时候我们会在listener中向Main Reactor提交"),n("code",[e._v("bind绑定端口地址任务")]),e._v("。但是在"),n("code",[e._v("NioSocketChannel")]),e._v("注册的时候，只会在"),n("code",[e._v("listener")]),e._v("中处理一下注册失败的情况。")])]),e._v(" "),n("p",[e._v("当Sub Reactor线程通知ChannelFutureListener注册成功之后，随后就会调用"),n("code",[e._v("pipeline.fireChannelRegistered()")]),e._v("在客户端NioSocketChannel的pipeline中传播"),n("code",[e._v("ChannelRegistered事件")]),e._v("。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNiaAGdSxbwsoLP3mhiaKahLtKrMRdE9IXvMOyxgInz5UweSSrv8H9HwNKQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("传播ChannelRegister事件.png")]),e._v(" "),n("p",[n("strong",[e._v("这里笔者重点要强调下")]),e._v("，在之前介绍NioServerSocketChannel注册的时候，我们提到因为此时NioServerSocketChannel并未绑定端口地址，所以这时的NioServerSocketChannel并未激活，这里的"),n("code",[e._v("isActive()")]),e._v("返回"),n("code",[e._v("false")]),e._v("。"),n("code",[e._v("register0方法")]),e._v("直接返回。")]),e._v(" "),n("blockquote",[n("p",[e._v("服务端NioServerSocketChannel判断是否激活的标准为端口是否绑定成功。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class NioServerSocketChannel extends AbstractNioMessageChannel\n                             implements io.netty.channel.socket.ServerSocketChannel {\n    @Override\n    public boolean isActive() {\n        return isOpen() && javaChannel().socket().isBound();\n    }\n}\n")])])]),n("blockquote",[n("p",[e._v("客户端"),n("code",[e._v("NioSocketChannel")]),e._v("判断是否激活的标准为是否处于"),n("code",[e._v("Connected状态")]),e._v("。那么显然这里肯定是处于"),n("code",[e._v("connected状态")]),e._v("的。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    @Override\n    public boolean isActive() {\n        SocketChannel ch = javaChannel();\n        return ch.isOpen() && ch.isConnected();\n    }\n")])])]),n("p",[n("code",[e._v("NioSocketChannel")]),e._v("已经处于"),n("code",[e._v("connected状态")]),e._v("，这里并不需要绑定端口，所以这里的"),n("code",[e._v("isActive()")]),e._v("返回"),n("code",[e._v("true")]),e._v("。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("           if (isActive()) {\n                    /**\n                     * 客户端SocketChannel注册成功后会走这里，在channelActive事件回调中注册OP_READ事件\n                     * */\n                    if (firstRegistration) {\n                        //触发channelActive事件\n                        pipeline.fireChannelActive();\n                    } else if (config().isAutoRead()) {\n                        .......省略..........\n                    }\n                }\n            }\n")])])]),n("p",[e._v("最后调用"),n("code",[e._v("pipeline.fireChannelActive()")]),e._v("在NioSocketChannel中的pipeline传播"),n("code",[e._v("ChannelActive事件")]),e._v("，最终在"),n("code",[e._v("pipeline")]),e._v("的头结点"),n("code",[e._v("HeadContext")]),e._v("中响应并注册"),n("code",[e._v("OP_READ事件")]),e._v("到"),n("code",[e._v("Sub Reactor")]),e._v("中的"),n("code",[e._v("Selector")]),e._v("上。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNiaaDWO56Rib0H2YViadZkbq3WErIBg6duwk22WMHcnt41ZWlS9WTtaYbcw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("传播ChannelActive事件.png")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public abstract class AbstractNioChannel extends AbstractChannel { {\n\n    @Override\n    protected void doBeginRead() throws Exception {\n        ..............省略................\n\n        final int interestOps = selectionKey.interestOps();\n        /**\n         * 1：ServerSocketChannel 初始化时 readInterestOp设置的是OP_ACCEPT事件\n         * 2：SocketChannel 初始化时 readInterestOp设置的是OP_READ事件\n         * */\n        if ((interestOps & readInterestOp) == 0) {\n            //注册监听OP_ACCEPT或者OP_READ事件\n            selectionKey.interestOps(interestOps | readInterestOp);\n        }\n    }\n\n}\n")])])]),n("blockquote",[n("p",[e._v("注意这里的"),n("code",[e._v("readInterestOp")]),e._v("为客户端"),n("code",[e._v("NioSocketChannel")]),e._v("在初始化时设置的"),n("code",[e._v("OP_READ事件")]),e._v("。")])]),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("到这里，Netty中的"),n("code",[e._v("Main Reactor")]),e._v("接收连接的整个流程，我们就介绍完了，此时Netty中主从Reactor组的结构就变为：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/sOIZXFW0vUZnjTia9x6OdAvgr1icM1ZsNiabSEUJ3uzXNIS7OGAbpeQ3ib7ZoCM6RlzjglPlzJ4Pud3L0oWSzN0iaAw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),e._v("主从Reactor组完整结构.png")]),e._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),n("p",[e._v("本文我们介绍了"),n("code",[e._v("NioServerSocketChannel")]),e._v("处理客户端连接事件的整个过程。")]),e._v(" "),n("ul",[n("li",[e._v("接收连接的整个处理框架。")]),e._v(" "),n("li",[e._v("影响Netty接收连接吞吐的Bug产生的原因，以及修复的方案。")]),e._v(" "),n("li",[e._v("创建并初始化客户端"),n("code",[e._v("NioSocketChannel")]),e._v("。")]),e._v(" "),n("li",[e._v("初始化"),n("code",[e._v("NioSocketChannel")]),e._v("中的"),n("code",[e._v("pipeline")]),e._v("。")]),e._v(" "),n("li",[e._v("客户端"),n("code",[e._v("NioSocketChannel")]),e._v("向"),n("code",[e._v("Sub Reactor")]),e._v("注册的过程")])]),e._v(" "),n("p",[e._v("其中我们也对比了"),n("code",[e._v("NioServerSocketChannel")]),e._v("与"),n("code",[e._v("NioSocketChannel")]),e._v("在创建初始化以及后面向"),n("code",[e._v("Reactor")]),e._v("注册过程中的差异之处。")]),e._v(" "),n("p",[e._v("当客户端"),n("code",[e._v("NioSocketChannel")]),e._v("接收完毕并向"),n("code",[e._v("Sub Reactor")]),e._v("注册成功后，那么接下来"),n("code",[e._v("Sub Reactor")]),e._v("就开始监听注册其上的所有客户端"),n("code",[e._v("NioSocketChannel")]),e._v("的"),n("code",[e._v("OP_READ事件")]),e._v("，并等待客户端向服务端发送网络数据。")]),e._v(" "),n("p",[e._v("后面"),n("code",[e._v("Reactor")]),e._v("的主角就该变为"),n("code",[e._v("Sub Reactor")]),e._v("以及注册在其上的客户端"),n("code",[e._v("NioSocketChannel")]),e._v("了。")]),e._v(" "),n("p",[e._v("下篇文章，我们将会讨论Netty是如何接收网络数据的~~~~ 我们下篇文章见~~")])])}),[],!1,null,null,null);n.default=o.exports}}]);